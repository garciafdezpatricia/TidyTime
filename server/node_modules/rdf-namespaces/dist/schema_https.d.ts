type Property = string;
type Class = string;
/**
 * AMRadioChannel
 *
 * A radio channel that uses AM.
 *
 * https://schema.org/AMRadioChannel
 */
export declare const AMRadioChannel: Class;
/**
 * APIReference
 *
 * Reference documentation for application programming interfaces (APIs).
 *
 * https://schema.org/APIReference
 */
export declare const APIReference: Class;
/**
 * AboutPage
 *
 * Web page type: About page.
 *
 * https://schema.org/AboutPage
 */
export declare const AboutPage: Class;
/**
 * AcceptAction
 *
 * The act of committing to/adopting an object.\n\nRelated actions:\n\n* [[RejectAction]]: The antonym of AcceptAction.
 *
 * https://schema.org/AcceptAction
 */
export declare const AcceptAction: Class;
/**
 * Accommodation
 *
 * An accommodation is a place that can accommodate human beings, e.g. a hotel room, a camping pitch, or a meeting room. Many accommodations are for overnight stays, but this is not a mandatory requirement.
 * For more specific types of accommodations not defined in schema.org, one can use [[additionalType]] with external vocabularies.
 * <br /><br />
 * See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
 *
 *
 * https://schema.org/Accommodation
 */
export declare const Accommodation: Class;
/**
 * AccountingService
 *
 * Accountancy business.\n\nAs a [[LocalBusiness]] it can be described as a [[provider]] of one or more [[Service]]\(s).
 *
 *
 * https://schema.org/AccountingService
 */
export declare const AccountingService: Class;
/**
 * AchieveAction
 *
 * The act of accomplishing something via previous efforts. It is an instantaneous action rather than an ongoing process.
 *
 * https://schema.org/AchieveAction
 */
export declare const AchieveAction: Class;
/**
 * Action
 *
 * An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
 *
 * https://schema.org/Action
 */
export declare const Action: Class;
/**
 * ActionAccessSpecification
 *
 * A set of requirements that must be fulfilled in order to perform an Action.
 *
 * https://schema.org/ActionAccessSpecification
 */
export declare const ActionAccessSpecification: Class;
/**
 * ActionStatusType
 *
 * The status of an Action.
 *
 * https://schema.org/ActionStatusType
 */
export declare const ActionStatusType: Class;
/**
 * ActivateAction
 *
 * The act of starting or activating a device or application (e.g. starting a timer or turning on a flashlight).
 *
 * https://schema.org/ActivateAction
 */
export declare const ActivateAction: Class;
/**
 * AddAction
 *
 * The act of editing by adding an object to a collection.
 *
 * https://schema.org/AddAction
 */
export declare const AddAction: Class;
/**
 * AdministrativeArea
 *
 * A geographical region, typically under the jurisdiction of a particular government.
 *
 * https://schema.org/AdministrativeArea
 */
export declare const AdministrativeArea: Class;
/**
 * AdultEntertainment
 *
 * An adult entertainment establishment.
 *
 * https://schema.org/AdultEntertainment
 */
export declare const AdultEntertainment: Class;
/**
 * AdultOrientedEnumeration
 *
 * Enumeration of considerations that make a product relevant or potentially restricted for adults only.
 *
 * https://schema.org/AdultOrientedEnumeration
 */
export declare const AdultOrientedEnumeration: Class;
/**
 * AdvertiserContentArticle
 *
 * An [[Article]] that an external entity has paid to place or to produce to its specifications. Includes [advertorials](https://en.wikipedia.org/wiki/Advertorial), sponsored content, native advertising and other paid content.
 *
 * https://schema.org/AdvertiserContentArticle
 */
export declare const AdvertiserContentArticle: Class;
/**
 * AggregateOffer
 *
 * When a single product is associated with multiple offers (for example, the same pair of shoes is offered by different merchants), then AggregateOffer can be used.\n\nNote: AggregateOffers are normally expected to associate multiple offers that all share the same defined [[businessFunction]] value, or default to http://purl.org/goodrelations/v1#Sell if businessFunction is not explicitly defined.
 *
 * https://schema.org/AggregateOffer
 */
export declare const AggregateOffer: Class;
/**
 * AggregateRating
 *
 * The average rating based on multiple ratings or reviews.
 *
 * https://schema.org/AggregateRating
 */
export declare const AggregateRating: Class;
/**
 * AgreeAction
 *
 * The act of expressing a consistency of opinion with the object. An agent agrees to/about an object (a proposition, topic or theme) with participants.
 *
 * https://schema.org/AgreeAction
 */
export declare const AgreeAction: Class;
/**
 * Airline
 *
 * An organization that provides flights for passengers.
 *
 * https://schema.org/Airline
 */
export declare const Airline: Class;
/**
 * Airport
 *
 * An airport.
 *
 * https://schema.org/Airport
 */
export declare const Airport: Class;
/**
 * AlignmentObject
 *
 * An intangible item that describes an alignment between a learning resource and a node in an educational framework.
 *
 * Should not be used where the nature of the alignment can be described using a simple property, for example to express that a resource [[teaches]] or [[assesses]] a competency.
 *
 * https://schema.org/AlignmentObject
 */
export declare const AlignmentObject: Class;
/**
 * AllocateAction
 *
 * The act of organizing tasks/objects/events by associating resources to it.
 *
 * https://schema.org/AllocateAction
 */
export declare const AllocateAction: Class;
/**
 * AmpStory
 *
 * A creative work with a visual storytelling format intended to be viewed online, particularly on mobile devices.
 *
 * https://schema.org/AmpStory
 */
export declare const AmpStory: Class;
/**
 * AmusementPark
 *
 * An amusement park.
 *
 * https://schema.org/AmusementPark
 */
export declare const AmusementPark: Class;
/**
 * AnalysisNewsArticle
 *
 * An AnalysisNewsArticle is a [[NewsArticle]] that, while based on factual reporting, incorporates the expertise of the author/producer, offering interpretations and conclusions.
 *
 * https://schema.org/AnalysisNewsArticle
 */
export declare const AnalysisNewsArticle: Class;
/**
 * AnatomicalStructure
 *
 * Any part of the human body, typically a component of an anatomical system. Organs, tissues, and cells are all anatomical structures.
 *
 * https://schema.org/AnatomicalStructure
 */
export declare const AnatomicalStructure: Class;
/**
 * AnatomicalSystem
 *
 * An anatomical system is a group of anatomical structures that work together to perform a certain task. Anatomical systems, such as organ systems, are one organizing principle of anatomy, and can include circulatory, digestive, endocrine, integumentary, immune, lymphatic, muscular, nervous, reproductive, respiratory, skeletal, urinary, vestibular, and other systems.
 *
 * https://schema.org/AnatomicalSystem
 */
export declare const AnatomicalSystem: Class;
/**
 * AnimalShelter
 *
 * Animal shelter.
 *
 * https://schema.org/AnimalShelter
 */
export declare const AnimalShelter: Class;
/**
 * Answer
 *
 * An answer offered to a question; perhaps correct, perhaps opinionated or wrong.
 *
 * https://schema.org/Answer
 */
export declare const Answer: Class;
/**
 * Apartment
 *
 * An apartment (in American English) or flat (in British English) is a self-contained housing unit (a type of residential real estate) that occupies only part of a building (source: Wikipedia, the free encyclopedia, see <a href="http://en.wikipedia.org/wiki/Apartment">http://en.wikipedia.org/wiki/Apartment</a>).
 *
 * https://schema.org/Apartment
 */
export declare const Apartment: Class;
/**
 * ApartmentComplex
 *
 * Residence type: Apartment complex.
 *
 * https://schema.org/ApartmentComplex
 */
export declare const ApartmentComplex: Class;
/**
 * AppendAction
 *
 * The act of inserting at the end if an ordered collection.
 *
 * https://schema.org/AppendAction
 */
export declare const AppendAction: Class;
/**
 * ApplyAction
 *
 * The act of registering to an organization/service without the guarantee to receive it.\n\nRelated actions:\n\n* [[RegisterAction]]: Unlike RegisterAction, ApplyAction has no guarantees that the application will be accepted.
 *
 * https://schema.org/ApplyAction
 */
export declare const ApplyAction: Class;
/**
 * ApprovedIndication
 *
 * An indication for a medical therapy that has been formally specified or approved by a regulatory body that regulates use of the therapy; for example, the US FDA approves indications for most drugs in the US.
 *
 * https://schema.org/ApprovedIndication
 */
export declare const ApprovedIndication: Class;
/**
 * Aquarium
 *
 * Aquarium.
 *
 * https://schema.org/Aquarium
 */
export declare const Aquarium: Class;
/**
 *
 *
 *
 *
 * https://schema.org/ArchiveComponent
 */
export declare const ArchiveComponent: Class;
/**
 *
 *
 *
 *
 * https://schema.org/ArchiveOrganization
 */
export declare const ArchiveOrganization: Class;
/**
 * ArriveAction
 *
 * The act of arriving at a place. An agent arrives at a destination from a fromLocation, optionally with participants.
 *
 * https://schema.org/ArriveAction
 */
export declare const ArriveAction: Class;
/**
 * ArtGallery
 *
 * An art gallery.
 *
 * https://schema.org/ArtGallery
 */
export declare const ArtGallery: Class;
/**
 * Artery
 *
 * A type of blood vessel that specifically carries blood away from the heart.
 *
 * https://schema.org/Artery
 */
export declare const Artery: Class;
/**
 * Article
 *
 * An article, such as a news article or piece of investigative report. Newspapers and magazines have articles of many different types and this is intended to cover them all.\n\nSee also [blog post](http://blog.schema.org/2014/09/schemaorg-support-for-bibliographic_2.html).
 *
 * https://schema.org/Article
 */
export declare const Article: Class;
/**
 * AskAction
 *
 * The act of posing a question / favor to someone.\n\nRelated actions:\n\n* [[ReplyAction]]: Appears generally as a response to AskAction.
 *
 * https://schema.org/AskAction
 */
export declare const AskAction: Class;
/**
 * AskPublicNewsArticle
 *
 * A [[NewsArticle]] expressing an open call by a [[NewsMediaOrganization]] asking the public for input, insights, clarifications, anecdotes, documentation, etc., on an issue, for reporting purposes.
 *
 * https://schema.org/AskPublicNewsArticle
 */
export declare const AskPublicNewsArticle: Class;
/**
 * AssessAction
 *
 * The act of forming one's opinion, reaction or sentiment.
 *
 * https://schema.org/AssessAction
 */
export declare const AssessAction: Class;
/**
 * AssignAction
 *
 * The act of allocating an action/event/task to some destination (someone or something).
 *
 * https://schema.org/AssignAction
 */
export declare const AssignAction: Class;
/**
 * Atlas
 *
 * A collection or bound volume of maps, charts, plates or tables, physical or in media form illustrating any subject.
 *
 * https://schema.org/Atlas
 */
export declare const Atlas: Class;
/**
 * Attorney
 *
 * Professional service: Attorney. \n\nThis type is deprecated - [[LegalService]] is more inclusive and less ambiguous.
 *
 * https://schema.org/Attorney
 */
export declare const Attorney: Class;
/**
 * Audience
 *
 * Intended audience for an item, i.e. the group for whom the item was created.
 *
 * https://schema.org/Audience
 */
export declare const Audience: Class;
/**
 * AudioObject
 *
 * An audio file.
 *
 * https://schema.org/AudioObject
 */
export declare const AudioObject: Class;
/**
 * AudioObjectSnapshot
 *
 * A specific and exact (byte-for-byte) version of an [[AudioObject]]. Two byte-for-byte identical files, for the purposes of this type, considered identical. If they have different embedded metadata the files will differ. Different external facts about the files, e.g. creator or dateCreated that aren't represented in their actual content, do not affect this notion of identity.
 *
 * https://schema.org/AudioObjectSnapshot
 */
export declare const AudioObjectSnapshot: Class;
/**
 * Audiobook
 *
 * An audiobook.
 *
 * https://schema.org/Audiobook
 */
export declare const Audiobook: Class;
/**
 * AuthorizeAction
 *
 * The act of granting permission to an object.
 *
 * https://schema.org/AuthorizeAction
 */
export declare const AuthorizeAction: Class;
/**
 * AutoBodyShop
 *
 * Auto body shop.
 *
 * https://schema.org/AutoBodyShop
 */
export declare const AutoBodyShop: Class;
/**
 * AutoDealer
 *
 * An car dealership.
 *
 * https://schema.org/AutoDealer
 */
export declare const AutoDealer: Class;
/**
 * AutoPartsStore
 *
 * An auto parts store.
 *
 * https://schema.org/AutoPartsStore
 */
export declare const AutoPartsStore: Class;
/**
 * AutoRental
 *
 * A car rental business.
 *
 * https://schema.org/AutoRental
 */
export declare const AutoRental: Class;
/**
 * AutoRepair
 *
 * Car repair business.
 *
 * https://schema.org/AutoRepair
 */
export declare const AutoRepair: Class;
/**
 * AutoWash
 *
 * A car wash business.
 *
 * https://schema.org/AutoWash
 */
export declare const AutoWash: Class;
/**
 * AutomatedTeller
 *
 * ATM/cash machine.
 *
 * https://schema.org/AutomatedTeller
 */
export declare const AutomatedTeller: Class;
/**
 * AutomotiveBusiness
 *
 * Car repair, sales, or parts.
 *
 * https://schema.org/AutomotiveBusiness
 */
export declare const AutomotiveBusiness: Class;
/**
 * BackgroundNewsArticle
 *
 * A [[NewsArticle]] providing historical context, definition and detail on a specific topic (aka "explainer" or "backgrounder"). For example, an in-depth article or frequently-asked-questions ([FAQ](https://en.wikipedia.org/wiki/FAQ)) document on topics such as Climate Change or the European Union. Other kinds of background material from a non-news setting are often described using [[Book]] or [[Article]], in particular [[ScholarlyArticle]]. See also [[NewsArticle]] for related vocabulary from a learning/education perspective.
 *
 * https://schema.org/BackgroundNewsArticle
 */
export declare const BackgroundNewsArticle: Class;
/**
 * Bakery
 *
 * A bakery.
 *
 * https://schema.org/Bakery
 */
export declare const Bakery: Class;
/**
 * BankAccount
 *
 * A product or service offered by a bank whereby one may deposit, withdraw or transfer money and in some cases be paid interest.
 *
 * https://schema.org/BankAccount
 */
export declare const BankAccount: Class;
/**
 * BankOrCreditUnion
 *
 * Bank or credit union.
 *
 * https://schema.org/BankOrCreditUnion
 */
export declare const BankOrCreditUnion: Class;
/**
 * BarOrPub
 *
 * A bar or pub.
 *
 * https://schema.org/BarOrPub
 */
export declare const BarOrPub: Class;
/**
 * Barcode
 *
 * An image of a visual machine-readable code such as a barcode or QR code.
 *
 * https://schema.org/Barcode
 */
export declare const Barcode: Class;
/**
 * Beach
 *
 * Beach.
 *
 * https://schema.org/Beach
 */
export declare const Beach: Class;
/**
 * BeautySalon
 *
 * Beauty salon.
 *
 * https://schema.org/BeautySalon
 */
export declare const BeautySalon: Class;
/**
 * BedAndBreakfast
 *
 * Bed and breakfast.
 * <br /><br />
 * See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
 *
 *
 * https://schema.org/BedAndBreakfast
 */
export declare const BedAndBreakfast: Class;
/**
 * BedDetails
 *
 * An entity holding detailed information about the available bed types, e.g. the quantity of twin beds for a hotel room. For the single case of just one bed of a certain type, you can use bed directly with a text. See also [[BedType]] (under development).
 *
 * https://schema.org/BedDetails
 */
export declare const BedDetails: Class;
/**
 * BedType
 *
 * A type of bed. This is used for indicating the bed or beds available in an accommodation.
 *
 * https://schema.org/BedType
 */
export declare const BedType: Class;
/**
 * BefriendAction
 *
 * The act of forming a personal connection with someone (object) mutually/bidirectionally/symmetrically.\n\nRelated actions:\n\n* [[FollowAction]]: Unlike FollowAction, BefriendAction implies that the connection is reciprocal.
 *
 * https://schema.org/BefriendAction
 */
export declare const BefriendAction: Class;
/**
 * BikeStore
 *
 * A bike store.
 *
 * https://schema.org/BikeStore
 */
export declare const BikeStore: Class;
/**
 * BioChemEntity
 *
 * Any biological, chemical, or biochemical thing. For example: a protein; a gene; a chemical; a synthetic chemical.
 *
 * https://schema.org/BioChemEntity
 */
export declare const BioChemEntity: Class;
/**
 * Blog
 *
 * A [blog](https://en.wikipedia.org/wiki/Blog), sometimes known as a "weblog". Note that the individual posts ([[BlogPosting]]s) in a [[Blog]] are often colloquially referred to by the same term.
 *
 * https://schema.org/Blog
 */
export declare const Blog: Class;
/**
 * BlogPosting
 *
 * A blog post.
 *
 * https://schema.org/BlogPosting
 */
export declare const BlogPosting: Class;
/**
 * BloodTest
 *
 * A medical test performed on a sample of a patient's blood.
 *
 * https://schema.org/BloodTest
 */
export declare const BloodTest: Class;
/**
 * BoardingPolicyType
 *
 * A type of boarding policy used by an airline.
 *
 * https://schema.org/BoardingPolicyType
 */
export declare const BoardingPolicyType: Class;
/**
 * BoatReservation
 *
 * A reservation for boat travel.
 *
 * Note: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use [[Offer]].
 *
 * https://schema.org/BoatReservation
 */
export declare const BoatReservation: Class;
/**
 * BoatTerminal
 *
 * A terminal for boats, ships, and other water vessels.
 *
 * https://schema.org/BoatTerminal
 */
export declare const BoatTerminal: Class;
/**
 * BoatTrip
 *
 * A trip on a commercial ferry line.
 *
 * https://schema.org/BoatTrip
 */
export declare const BoatTrip: Class;
/**
 * BodyMeasurementTypeEnumeration
 *
 * Enumerates types (or dimensions) of a person's body measurements, for example for fitting of clothes.
 *
 * https://schema.org/BodyMeasurementTypeEnumeration
 */
export declare const BodyMeasurementTypeEnumeration: Class;
/**
 * BodyOfWater
 *
 * A body of water, such as a sea, ocean, or lake.
 *
 * https://schema.org/BodyOfWater
 */
export declare const BodyOfWater: Class;
/**
 * Bone
 *
 * Rigid connective tissue that comprises up the skeletal structure of the human body.
 *
 * https://schema.org/Bone
 */
export declare const Bone: Class;
/**
 * Book
 *
 * A book.
 *
 * https://schema.org/Book
 */
export declare const Book: Class;
/**
 * BookFormatType
 *
 * The publication format of the book.
 *
 * https://schema.org/BookFormatType
 */
export declare const BookFormatType: Class;
/**
 * BookSeries
 *
 * A series of books. Included books can be indicated with the hasPart property.
 *
 * https://schema.org/BookSeries
 */
export declare const BookSeries: Class;
/**
 * BookStore
 *
 * A bookstore.
 *
 * https://schema.org/BookStore
 */
export declare const BookStore: Class;
/**
 * BookmarkAction
 *
 * An agent bookmarks/flags/labels/tags/marks an object.
 *
 * https://schema.org/BookmarkAction
 */
export declare const BookmarkAction: Class;
/**
 * Boolean
 *
 * Boolean: True or False.
 * Note that `Boolean` is a reserved Javascript keyword, and is therefore suffixed by `__workaround`.
 * For a list of reserved keywords, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Keywords.
 *
 * https://schema.org/Boolean
 */
export declare const Boolean__workaround: Class;
/**
 * BorrowAction
 *
 * The act of obtaining an object under an agreement to return it at a later date. Reciprocal of LendAction.\n\nRelated actions:\n\n* [[LendAction]]: Reciprocal of BorrowAction.
 *
 * https://schema.org/BorrowAction
 */
export declare const BorrowAction: Class;
/**
 * BowlingAlley
 *
 * A bowling alley.
 *
 * https://schema.org/BowlingAlley
 */
export declare const BowlingAlley: Class;
/**
 * BrainStructure
 *
 * Any anatomical structure which pertains to the soft nervous tissue functioning as the coordinating center of sensation and intellectual and nervous activity.
 *
 * https://schema.org/BrainStructure
 */
export declare const BrainStructure: Class;
/**
 * Brand
 *
 * A brand is a name used by an organization or business person for labeling a product, product group, or similar.
 *
 * https://schema.org/Brand
 */
export declare const Brand: Class;
/**
 * BreadcrumbList
 *
 * A BreadcrumbList is an ItemList consisting of a chain of linked Web pages, typically described using at least their URL and their name, and typically ending with the current page.\n\nThe [[position]] property is used to reconstruct the order of the items in a BreadcrumbList. The convention is that a breadcrumb list has an [[itemListOrder]] of [[ItemListOrderAscending]] (lower values listed first), and that the first items in this list correspond to the "top" or beginning of the breadcrumb trail, e.g. with a site or section homepage. The specific values of 'position' are not assigned meaning for a BreadcrumbList, but they should be integers, e.g. beginning with '1' for the first item in the list.
 *
 *
 * https://schema.org/BreadcrumbList
 */
export declare const BreadcrumbList: Class;
/**
 * Brewery
 *
 * Brewery.
 *
 * https://schema.org/Brewery
 */
export declare const Brewery: Class;
/**
 * Bridge
 *
 * A bridge.
 *
 * https://schema.org/Bridge
 */
export declare const Bridge: Class;
/**
 * BroadcastChannel
 *
 * A unique instance of a BroadcastService on a CableOrSatelliteService lineup.
 *
 * https://schema.org/BroadcastChannel
 */
export declare const BroadcastChannel: Class;
/**
 * BroadcastEvent
 *
 * An over the air or online broadcast event.
 *
 * https://schema.org/BroadcastEvent
 */
export declare const BroadcastEvent: Class;
/**
 * BroadcastFrequencySpecification
 *
 * The frequency in MHz and the modulation used for a particular BroadcastService.
 *
 * https://schema.org/BroadcastFrequencySpecification
 */
export declare const BroadcastFrequencySpecification: Class;
/**
 * BroadcastService
 *
 * A delivery service through which content is provided via broadcast over the air or online.
 *
 * https://schema.org/BroadcastService
 */
export declare const BroadcastService: Class;
/**
 * BrokerageAccount
 *
 * An account that allows an investor to deposit funds and place investment orders with a licensed broker or brokerage firm.
 *
 * https://schema.org/BrokerageAccount
 */
export declare const BrokerageAccount: Class;
/**
 * BuddhistTemple
 *
 * A Buddhist temple.
 *
 * https://schema.org/BuddhistTemple
 */
export declare const BuddhistTemple: Class;
/**
 * BusOrCoach
 *
 * A bus (also omnibus or autobus) is a road vehicle designed to carry passengers. Coaches are luxury busses, usually in service for long distance travel.
 *
 * https://schema.org/BusOrCoach
 */
export declare const BusOrCoach: Class;
/**
 * BusReservation
 *
 * A reservation for bus travel. \n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use [[Offer]].
 *
 * https://schema.org/BusReservation
 */
export declare const BusReservation: Class;
/**
 * BusStation
 *
 * A bus station.
 *
 * https://schema.org/BusStation
 */
export declare const BusStation: Class;
/**
 * BusStop
 *
 * A bus stop.
 *
 * https://schema.org/BusStop
 */
export declare const BusStop: Class;
/**
 * BusTrip
 *
 * A trip on a commercial bus line.
 *
 * https://schema.org/BusTrip
 */
export declare const BusTrip: Class;
/**
 * BusinessAudience
 *
 * A set of characteristics belonging to businesses, e.g. who compose an item's target audience.
 *
 * https://schema.org/BusinessAudience
 */
export declare const BusinessAudience: Class;
/**
 * BusinessEntityType
 *
 * A business entity type is a conceptual entity representing the legal form, the size, the main line of business, the position in the value chain, or any combination thereof, of an organization or business person.\n\nCommonly used values:\n\n* http://purl.org/goodrelations/v1#Business\n* http://purl.org/goodrelations/v1#Enduser\n* http://purl.org/goodrelations/v1#PublicInstitution\n* http://purl.org/goodrelations/v1#Reseller
 *
 *
 * https://schema.org/BusinessEntityType
 */
export declare const BusinessEntityType: Class;
/**
 * BusinessEvent
 *
 * Event type: Business event.
 *
 * https://schema.org/BusinessEvent
 */
export declare const BusinessEvent: Class;
/**
 * BusinessFunction
 *
 * The business function specifies the type of activity or access (i.e., the bundle of rights) offered by the organization or business person through the offer. Typical are sell, rental or lease, maintenance or repair, manufacture / produce, recycle / dispose, engineering / construction, or installation. Proprietary specifications of access rights are also instances of this class.\n\nCommonly used values:\n\n* http://purl.org/goodrelations/v1#ConstructionInstallation\n* http://purl.org/goodrelations/v1#Dispose\n* http://purl.org/goodrelations/v1#LeaseOut\n* http://purl.org/goodrelations/v1#Maintain\n* http://purl.org/goodrelations/v1#ProvideService\n* http://purl.org/goodrelations/v1#Repair\n* http://purl.org/goodrelations/v1#Sell\n* http://purl.org/goodrelations/v1#Buy
 *
 *
 * https://schema.org/BusinessFunction
 */
export declare const BusinessFunction: Class;
/**
 * BuyAction
 *
 * The act of giving money to a seller in exchange for goods or services rendered. An agent buys an object, product, or service from a seller for a price. Reciprocal of SellAction.
 *
 * https://schema.org/BuyAction
 */
export declare const BuyAction: Class;
/**
 * CDCPMDRecord
 *
 * A CDCPMDRecord is a data structure representing a record in a CDC tabular data format
 *       used for hospital data reporting. See [documentation](/docs/cdc-covid.html) for details, and the linked CDC materials for authoritative
 *       definitions used as the source here.
 *
 *
 * https://schema.org/CDCPMDRecord
 */
export declare const CDCPMDRecord: Class;
/**
 * CableOrSatelliteService
 *
 * A service which provides access to media programming like TV or radio. Access may be via cable or satellite.
 *
 * https://schema.org/CableOrSatelliteService
 */
export declare const CableOrSatelliteService: Class;
/**
 * CafeOrCoffeeShop
 *
 * A cafe or coffee shop.
 *
 * https://schema.org/CafeOrCoffeeShop
 */
export declare const CafeOrCoffeeShop: Class;
/**
 * Campground
 *
 * A camping site, campsite, or [[Campground]] is a place used for overnight stay in the outdoors, typically containing individual [[CampingPitch]] locations. \n\n
 * In British English a campsite is an area, usually divided into a number of pitches, where people can camp overnight using tents or camper vans or caravans; this British English use of the word is synonymous with the American English expression campground. In American English the term campsite generally means an area where an individual, family, group, or military unit can pitch a tent or park a camper; a campground may contain many campsites (source: Wikipedia, see [https://en.wikipedia.org/wiki/Campsite](https://en.wikipedia.org/wiki/Campsite)).\n\n
 *
 * See also the dedicated [document on the use of schema.org for marking up hotels and other forms of accommodations](/docs/hotels.html).
 *
 *
 * https://schema.org/Campground
 */
export declare const Campground: Class;
/**
 * CampingPitch
 *
 * A [[CampingPitch]] is an individual place for overnight stay in the outdoors, typically being part of a larger camping site, or [[Campground]].\n\n
 * In British English a campsite, or campground, is an area, usually divided into a number of pitches, where people can camp overnight using tents or camper vans or caravans; this British English use of the word is synonymous with the American English expression campground. In American English the term campsite generally means an area where an individual, family, group, or military unit can pitch a tent or park a camper; a campground may contain many campsites.
 * (Source: Wikipedia, see [https://en.wikipedia.org/wiki/Campsite](https://en.wikipedia.org/wiki/Campsite).)\n\n
 * See also the dedicated [document on the use of schema.org for marking up hotels and other forms of accommodations](/docs/hotels.html).
 *
 *
 * https://schema.org/CampingPitch
 */
export declare const CampingPitch: Class;
/**
 * Canal
 *
 * A canal, like the Panama Canal.
 *
 * https://schema.org/Canal
 */
export declare const Canal: Class;
/**
 * CancelAction
 *
 * The act of asserting that a future event/action is no longer going to happen.\n\nRelated actions:\n\n* [[ConfirmAction]]: The antonym of CancelAction.
 *
 * https://schema.org/CancelAction
 */
export declare const CancelAction: Class;
/**
 * Car
 *
 * A car is a wheeled, self-powered motor vehicle used for transportation.
 *
 * https://schema.org/Car
 */
export declare const Car: Class;
/**
 * CarUsageType
 *
 * A value indicating a special usage of a car, e.g. commercial rental, driving school, or as a taxi.
 *
 * https://schema.org/CarUsageType
 */
export declare const CarUsageType: Class;
/**
 * Casino
 *
 * A casino.
 *
 * https://schema.org/Casino
 */
export declare const Casino: Class;
/**
 * CategoryCode
 *
 * A Category Code.
 *
 * https://schema.org/CategoryCode
 */
export declare const CategoryCode: Class;
/**
 * CategoryCodeSet
 *
 * A set of Category Code values.
 *
 * https://schema.org/CategoryCodeSet
 */
export declare const CategoryCodeSet: Class;
/**
 * CatholicChurch
 *
 * A Catholic church.
 *
 * https://schema.org/CatholicChurch
 */
export declare const CatholicChurch: Class;
/**
 * Cemetery
 *
 * A graveyard.
 *
 * https://schema.org/Cemetery
 */
export declare const Cemetery: Class;
/**
 * Chapter
 *
 * One of the sections into which a book is divided. A chapter usually has a section number or a name.
 *
 * https://schema.org/Chapter
 */
export declare const Chapter: Class;
/**
 * CheckAction
 *
 * An agent inspects, determines, investigates, inquires, or examines an object's accuracy, quality, condition, or state.
 *
 * https://schema.org/CheckAction
 */
export declare const CheckAction: Class;
/**
 * CheckInAction
 *
 * The act of an agent communicating (service provider, social media, etc) their arrival by registering/confirming for a previously reserved service (e.g. flight check-in) or at a place (e.g. hotel), possibly resulting in a result (boarding pass, etc).\n\nRelated actions:\n\n* [[CheckOutAction]]: The antonym of CheckInAction.\n* [[ArriveAction]]: Unlike ArriveAction, CheckInAction implies that the agent is informing/confirming the start of a previously reserved service.\n* [[ConfirmAction]]: Unlike ConfirmAction, CheckInAction implies that the agent is informing/confirming the *start* of a previously reserved service rather than its validity/existence.
 *
 * https://schema.org/CheckInAction
 */
export declare const CheckInAction: Class;
/**
 * CheckOutAction
 *
 * The act of an agent communicating (service provider, social media, etc) their departure of a previously reserved service (e.g. flight check-in) or place (e.g. hotel).\n\nRelated actions:\n\n* [[CheckInAction]]: The antonym of CheckOutAction.\n* [[DepartAction]]: Unlike DepartAction, CheckOutAction implies that the agent is informing/confirming the end of a previously reserved service.\n* [[CancelAction]]: Unlike CancelAction, CheckOutAction implies that the agent is informing/confirming the end of a previously reserved service.
 *
 * https://schema.org/CheckOutAction
 */
export declare const CheckOutAction: Class;
/**
 * CheckoutPage
 *
 * Web page type: Checkout page.
 *
 * https://schema.org/CheckoutPage
 */
export declare const CheckoutPage: Class;
/**
 * ChemicalSubstance
 *
 * A chemical substance is 'a portion of matter of constant composition, composed of molecular entities of the same type or of different types' (source: [ChEBI:59999](https://www.ebi.ac.uk/chebi/searchId.do?chebiId=59999)).
 *
 * https://schema.org/ChemicalSubstance
 */
export declare const ChemicalSubstance: Class;
/**
 * ChildCare
 *
 * A Childcare center.
 *
 * https://schema.org/ChildCare
 */
export declare const ChildCare: Class;
/**
 * ChildrensEvent
 *
 * Event type: Children's event.
 *
 * https://schema.org/ChildrensEvent
 */
export declare const ChildrensEvent: Class;
/**
 * ChooseAction
 *
 * The act of expressing a preference from a set of options or a large or unbounded set of choices/options.
 *
 * https://schema.org/ChooseAction
 */
export declare const ChooseAction: Class;
/**
 * Church
 *
 * A church.
 *
 * https://schema.org/Church
 */
export declare const Church: Class;
/**
 * City
 *
 * A city or town.
 *
 * https://schema.org/City
 */
export declare const City: Class;
/**
 * CityHall
 *
 * A city hall.
 *
 * https://schema.org/CityHall
 */
export declare const CityHall: Class;
/**
 * CivicStructure
 *
 * A public structure, such as a town hall or concert hall.
 *
 * https://schema.org/CivicStructure
 */
export declare const CivicStructure: Class;
/**
 * Claim
 *
 * A [[Claim]] in Schema.org represents a specific, factually-oriented claim that could be the [[itemReviewed]] in a [[ClaimReview]]. The content of a claim can be summarized with the [[text]] property. Variations on well known claims can have their common identity indicated via [[sameAs]] links, and summarized with a [[name]]. Ideally, a [[Claim]] description includes enough contextual information to minimize the risk of ambiguity or inclarity. In practice, many claims are better understood in the context in which they appear or the interpretations provided by claim reviews.
 *
 *   Beyond [[ClaimReview]], the Claim type can be associated with related creative works - for example a [[ScholarlyArticle]] or [[Question]] might be [[about]] some [[Claim]].
 *
 *   At this time, Schema.org does not define any types of relationship between claims. This is a natural area for future exploration.
 *
 *
 * https://schema.org/Claim
 */
export declare const Claim: Class;
/**
 * ClaimReview
 *
 * A fact-checking review of claims made (or reported) in some creative work (referenced via itemReviewed).
 *
 * https://schema.org/ClaimReview
 */
export declare const ClaimReview: Class;
/**
 * Class
 *
 * A class, also often called a 'Type'; equivalent to rdfs:Class.
 *
 * https://schema.org/Class
 */
export declare const Class: Class;
/**
 * Clip
 *
 * A short TV or radio program or a segment/part of a program.
 *
 * https://schema.org/Clip
 */
export declare const Clip: Class;
/**
 * ClothingStore
 *
 * A clothing store.
 *
 * https://schema.org/ClothingStore
 */
export declare const ClothingStore: Class;
/**
 * Code
 *
 * Computer programming source code. Example: Full (compile ready) solutions, code snippet samples, scripts, templates.
 *
 * https://schema.org/Code
 */
export declare const Code: Class;
/**
 * Collection
 *
 * A collection of items, e.g. creative works or products.
 *
 * https://schema.org/Collection
 */
export declare const Collection: Class;
/**
 * CollectionPage
 *
 * Web page type: Collection page.
 *
 * https://schema.org/CollectionPage
 */
export declare const CollectionPage: Class;
/**
 * CollegeOrUniversity
 *
 * A college, university, or other third-level educational institution.
 *
 * https://schema.org/CollegeOrUniversity
 */
export declare const CollegeOrUniversity: Class;
/**
 * ComedyClub
 *
 * A comedy club.
 *
 * https://schema.org/ComedyClub
 */
export declare const ComedyClub: Class;
/**
 * ComedyEvent
 *
 * Event type: Comedy event.
 *
 * https://schema.org/ComedyEvent
 */
export declare const ComedyEvent: Class;
/**
 * ComicCoverArt
 *
 * The artwork on the cover of a comic.
 *
 * https://schema.org/ComicCoverArt
 */
export declare const ComicCoverArt: Class;
/**
 * ComicIssue
 *
 * Individual comic issues are serially published as
 *     	part of a larger series. For the sake of consistency, even one-shot issues
 *     	belong to a series comprised of a single issue. All comic issues can be
 *     	uniquely identified by: the combination of the name and volume number of the
 *     	series to which the issue belongs; the issue number; and the variant
 *     	description of the issue (if any).
 *
 * https://schema.org/ComicIssue
 */
export declare const ComicIssue: Class;
/**
 * ComicSeries
 *
 * A sequential publication of comic stories under a
 *     	unifying title, for example "The Amazing Spider-Man" or "Groo the
 *     	Wanderer".
 *
 * https://schema.org/ComicSeries
 */
export declare const ComicSeries: Class;
/**
 * ComicStory
 *
 * The term "story" is any indivisible, re-printable
 *     	unit of a comic, including the interior stories, covers, and backmatter. Most
 *     	comics have at least two stories: a cover (ComicCoverArt) and an interior story.
 *
 * https://schema.org/ComicStory
 */
export declare const ComicStory: Class;
/**
 * Comment
 *
 * A comment on an item - for example, a comment on a blog post. The comment's content is expressed via the [[text]] property, and its topic via [[about]], properties shared with all CreativeWorks.
 *
 * https://schema.org/Comment
 */
export declare const Comment: Class;
/**
 * CommentAction
 *
 * The act of generating a comment about a subject.
 *
 * https://schema.org/CommentAction
 */
export declare const CommentAction: Class;
/**
 * CommunicateAction
 *
 * The act of conveying information to another person via a communication medium (instrument) such as speech, email, or telephone conversation.
 *
 * https://schema.org/CommunicateAction
 */
export declare const CommunicateAction: Class;
/**
 * CompleteDataFeed
 *
 * A [[CompleteDataFeed]] is a [[DataFeed]] whose standard representation includes content for every item currently in the feed.
 *
 * This is the equivalent of Atom's element as defined in Feed Paging and Archiving [RFC 5005](https://tools.ietf.org/html/rfc5005), for example (and as defined for Atom), when using data from a feed that represents a collection of items that varies over time (e.g. "Top Twenty Records") there is no need to have newer entries mixed in alongside older, obsolete entries. By marking this feed as a CompleteDataFeed, old entries can be safely discarded when the feed is refreshed, since we can assume the feed has provided descriptions for all current items.
 *
 * https://schema.org/CompleteDataFeed
 */
export declare const CompleteDataFeed: Class;
/**
 * CompoundPriceSpecification
 *
 * A compound price specification is one that bundles multiple prices that all apply in combination for different dimensions of consumption. Use the name property of the attached unit price specification for indicating the dimension of a price component (e.g. "electricity" or "final cleaning").
 *
 * https://schema.org/CompoundPriceSpecification
 */
export declare const CompoundPriceSpecification: Class;
/**
 * ComputerLanguage
 *
 * This type covers computer programming languages such as Scheme and Lisp, as well as other language-like computer representations. Natural languages are best represented with the [[Language]] type.
 *
 * https://schema.org/ComputerLanguage
 */
export declare const ComputerLanguage: Class;
/**
 * ComputerStore
 *
 * A computer store.
 *
 * https://schema.org/ComputerStore
 */
export declare const ComputerStore: Class;
/**
 * ConfirmAction
 *
 * The act of notifying someone that a future event/action is going to happen as expected.\n\nRelated actions:\n\n* [[CancelAction]]: The antonym of ConfirmAction.
 *
 * https://schema.org/ConfirmAction
 */
export declare const ConfirmAction: Class;
/**
 * Consortium
 *
 * A Consortium is a membership [[Organization]] whose members are typically Organizations.
 *
 * https://schema.org/Consortium
 */
export declare const Consortium: Class;
/**
 * ConstraintNode
 *
 * The ConstraintNode type is provided to support usecases in which a node in a structured data graph is described with properties which appear to describe a single entity, but are being used in a situation where they serve a more abstract purpose. A [[ConstraintNode]] can be described using [[constraintProperty]] and [[numConstraints]]. These constraint properties can serve a
 *     variety of purposes, and their values may sometimes be understood to indicate sets of possible values rather than single, exact and specific values.
 *
 * https://schema.org/ConstraintNode
 */
export declare const ConstraintNode: Class;
/**
 * ConsumeAction
 *
 * The act of ingesting information/resources/food.
 *
 * https://schema.org/ConsumeAction
 */
export declare const ConsumeAction: Class;
/**
 * ContactPage
 *
 * Web page type: Contact page.
 *
 * https://schema.org/ContactPage
 */
export declare const ContactPage: Class;
/**
 * ContactPoint
 *
 * A contact point&#x2014;for example, a Customer Complaints department.
 *
 * https://schema.org/ContactPoint
 */
export declare const ContactPoint: Class;
/**
 * ContactPointOption
 *
 * Enumerated options related to a ContactPoint.
 *
 * https://schema.org/ContactPointOption
 */
export declare const ContactPointOption: Class;
/**
 * Continent
 *
 * One of the continents (for example, Europe or Africa).
 *
 * https://schema.org/Continent
 */
export declare const Continent: Class;
/**
 * ControlAction
 *
 * An agent controls a device or application.
 *
 * https://schema.org/ControlAction
 */
export declare const ControlAction: Class;
/**
 * ConvenienceStore
 *
 * A convenience store.
 *
 * https://schema.org/ConvenienceStore
 */
export declare const ConvenienceStore: Class;
/**
 * Conversation
 *
 * One or more messages between organizations or people on a particular topic. Individual messages can be linked to the conversation with isPartOf or hasPart properties.
 *
 * https://schema.org/Conversation
 */
export declare const Conversation: Class;
/**
 * CookAction
 *
 * The act of producing/preparing food.
 *
 * https://schema.org/CookAction
 */
export declare const CookAction: Class;
/**
 * Corporation
 *
 * Organization: A business corporation.
 *
 * https://schema.org/Corporation
 */
export declare const Corporation: Class;
/**
 * CorrectionComment
 *
 * A [[comment]] that corrects [[CreativeWork]].
 *
 * https://schema.org/CorrectionComment
 */
export declare const CorrectionComment: Class;
/**
 * Country
 *
 * A country.
 *
 * https://schema.org/Country
 */
export declare const Country: Class;
/**
 * Course
 *
 * A description of an educational course which may be offered as distinct instances which take place at different times or take place at different locations, or be offered through different media or modes of study. An educational course is a sequence of one or more educational events and/or creative works which aims to build knowledge, competence or ability of learners.
 *
 * https://schema.org/Course
 */
export declare const Course: Class;
/**
 * CourseInstance
 *
 * An instance of a [[Course]] which is distinct from other instances because it is offered at a different time or location or through different media or modes of study or to a specific section of students.
 *
 * https://schema.org/CourseInstance
 */
export declare const CourseInstance: Class;
/**
 * Courthouse
 *
 * A courthouse.
 *
 * https://schema.org/Courthouse
 */
export declare const Courthouse: Class;
/**
 * CoverArt
 *
 * The artwork on the outer surface of a CreativeWork.
 *
 * https://schema.org/CoverArt
 */
export declare const CoverArt: Class;
/**
 * CovidTestingFacility
 *
 * A CovidTestingFacility is a [[MedicalClinic]] where testing for the COVID-19 Coronavirus
 *       disease is available. If the facility is being made available from an established [[Pharmacy]], [[Hotel]], or other
 *       non-medical organization, multiple types can be listed. This makes it easier to re-use existing schema.org information
 *       about that place, e.g. contact info, address, opening hours. Note that in an emergency, such information may not always be reliable.
 *
 *
 * https://schema.org/CovidTestingFacility
 */
export declare const CovidTestingFacility: Class;
/**
 * CreateAction
 *
 * The act of deliberately creating/producing/generating/building a result out of the agent.
 *
 * https://schema.org/CreateAction
 */
export declare const CreateAction: Class;
/**
 * CreativeWork
 *
 * The most generic kind of creative work, including books, movies, photographs, software programs, etc.
 *
 * https://schema.org/CreativeWork
 */
export declare const CreativeWork: Class;
/**
 * CreativeWorkSeason
 *
 * A media season, e.g. TV, radio, video game etc.
 *
 * https://schema.org/CreativeWorkSeason
 */
export declare const CreativeWorkSeason: Class;
/**
 * CreativeWorkSeries
 *
 * A CreativeWorkSeries in schema.org is a group of related items, typically but not necessarily of the same kind. CreativeWorkSeries are usually organized into some order, often chronological. Unlike [[ItemList]] which is a general purpose data structure for lists of things, the emphasis with CreativeWorkSeries is on published materials (written e.g. books and periodicals, or media such as TV, radio and games).\n\nSpecific subtypes are available for describing [[TVSeries]], [[RadioSeries]], [[MovieSeries]], [[BookSeries]], [[Periodical]] and [[VideoGameSeries]]. In each case, the [[hasPart]] / [[isPartOf]] properties can be used to relate the CreativeWorkSeries to its parts. The general CreativeWorkSeries type serves largely just to organize these more specific and practical subtypes.\n\nIt is common for properties applicable to an item from the series to be usefully applied to the containing group. Schema.org attempts to anticipate some of these cases, but publishers should be free to apply properties of the series parts to the series as a whole wherever they seem appropriate.
 *
 *
 * https://schema.org/CreativeWorkSeries
 */
export declare const CreativeWorkSeries: Class;
/**
 * CreditCard
 *
 * A card payment method of a particular brand or name.  Used to mark up a particular payment method and/or the financial product/service that supplies the card account.\n\nCommonly used values:\n\n* http://purl.org/goodrelations/v1#AmericanExpress\n* http://purl.org/goodrelations/v1#DinersClub\n* http://purl.org/goodrelations/v1#Discover\n* http://purl.org/goodrelations/v1#JCB\n* http://purl.org/goodrelations/v1#MasterCard\n* http://purl.org/goodrelations/v1#VISA
 *
 *
 * https://schema.org/CreditCard
 */
export declare const CreditCard: Class;
/**
 * Crematorium
 *
 * A crematorium.
 *
 * https://schema.org/Crematorium
 */
export declare const Crematorium: Class;
/**
 * CriticReview
 *
 * A [[CriticReview]] is a more specialized form of Review written or published by a source that is recognized for its reviewing activities. These can include online columns, travel and food guides, TV and radio shows, blogs and other independent Web sites. [[CriticReview]]s are typically more in-depth and professionally written. For simpler, casually written user/visitor/viewer/customer reviews, it is more appropriate to use the [[UserReview]] type. Review aggregator sites such as Metacritic already separate out the site's user reviews from selected critic reviews that originate from third-party sources.
 *
 * https://schema.org/CriticReview
 */
export declare const CriticReview: Class;
/**
 * CssSelectorType
 *
 * Text representing a CSS selector.
 *
 * https://schema.org/CssSelectorType
 */
export declare const CssSelectorType: Class;
/**
 * CurrencyConversionService
 *
 * A service to convert funds from one currency to another currency.
 *
 * https://schema.org/CurrencyConversionService
 */
export declare const CurrencyConversionService: Class;
/**
 * DDxElement
 *
 * An alternative, closely-related condition typically considered later in the differential diagnosis process along with the signs that are used to distinguish it.
 *
 * https://schema.org/DDxElement
 */
export declare const DDxElement: Class;
/**
 * DanceEvent
 *
 * Event type: A social dance.
 *
 * https://schema.org/DanceEvent
 */
export declare const DanceEvent: Class;
/**
 * DanceGroup
 *
 * A dance group&#x2014;for example, the Alvin Ailey Dance Theater or Riverdance.
 *
 * https://schema.org/DanceGroup
 */
export declare const DanceGroup: Class;
/**
 * DataCatalog
 *
 * A collection of datasets.
 *
 * https://schema.org/DataCatalog
 */
export declare const DataCatalog: Class;
/**
 * DataDownload
 *
 * All or part of a [[Dataset]] in downloadable form.
 *
 * https://schema.org/DataDownload
 */
export declare const DataDownload: Class;
/**
 * DataFeed
 *
 * A single feed providing structured information about one or more entities or topics.
 *
 * https://schema.org/DataFeed
 */
export declare const DataFeed: Class;
/**
 * DataFeedItem
 *
 * A single item within a larger data feed.
 *
 * https://schema.org/DataFeedItem
 */
export declare const DataFeedItem: Class;
/**
 * DataType
 *
 * The basic data types such as Integers, Strings, etc.
 *
 * https://schema.org/DataType
 */
export declare const DataType: Class;
/**
 * Dataset
 *
 * A body of structured information describing some topic(s) of interest.
 *
 * https://schema.org/Dataset
 */
export declare const Dataset: Class;
/**
 * Date
 *
 * A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
 * Note that `Date` is a reserved Javascript keyword, and is therefore suffixed by `__workaround`.
 * For a list of reserved keywords, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Keywords.
 *
 * https://schema.org/Date
 */
export declare const Date__workaround: Class;
/**
 * DateTime
 *
 * A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
 *
 * https://schema.org/DateTime
 */
export declare const DateTime: Class;
/**
 * DatedMoneySpecification
 *
 * A DatedMoneySpecification represents monetary values with optional start and end dates. For example, this could represent an employee's salary over a specific period of time. __Note:__ This type has been superseded by [[MonetaryAmount]], use of that type is recommended.
 *
 * https://schema.org/DatedMoneySpecification
 */
export declare const DatedMoneySpecification: Class;
/**
 * DayOfWeek
 *
 * The day of the week, e.g. used to specify to which day the opening hours of an OpeningHoursSpecification refer.
 *
 * Originally, URLs from [GoodRelations](http://purl.org/goodrelations/v1) were used (for [[Monday]], [[Tuesday]], [[Wednesday]], [[Thursday]], [[Friday]], [[Saturday]], [[Sunday]] plus a special entry for [[PublicHolidays]]); these have now been integrated directly into schema.org.
 *
 *
 * https://schema.org/DayOfWeek
 */
export declare const DayOfWeek: Class;
/**
 * DaySpa
 *
 * A day spa.
 *
 * https://schema.org/DaySpa
 */
export declare const DaySpa: Class;
/**
 * DeactivateAction
 *
 * The act of stopping or deactivating a device or application (e.g. stopping a timer or turning off a flashlight).
 *
 * https://schema.org/DeactivateAction
 */
export declare const DeactivateAction: Class;
/**
 * DefenceEstablishment
 *
 * A defence establishment, such as an army or navy base.
 *
 * https://schema.org/DefenceEstablishment
 */
export declare const DefenceEstablishment: Class;
/**
 * DefinedRegion
 *
 * A DefinedRegion is a geographic area defined by potentially arbitrary (rather than political, administrative or natural geographical) criteria. Properties are provided for defining a region by reference to sets of postal codes.
 *
 * Examples: a delivery destination when shopping. Region where regional pricing is configured.
 *
 * Requirement 1:
 * Country: US
 * States: "NY", "CA"
 *
 * Requirement 2:
 * Country: US
 * PostalCode Set: { [94000-94585], [97000, 97999], [13000, 13599]}
 * { [12345, 12345], [78945, 78945], }
 * Region = state, canton, prefecture, autonomous community...
 *
 *
 * https://schema.org/DefinedRegion
 */
export declare const DefinedRegion: Class;
/**
 * DefinedTerm
 *
 * A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
 *
 * https://schema.org/DefinedTerm
 */
export declare const DefinedTerm: Class;
/**
 * DefinedTermSet
 *
 * A set of defined terms, for example a set of categories or a classification scheme, a glossary, dictionary or enumeration.
 *
 * https://schema.org/DefinedTermSet
 */
export declare const DefinedTermSet: Class;
/**
 * DeleteAction
 *
 * The act of editing a recipient by removing one of its objects.
 *
 * https://schema.org/DeleteAction
 */
export declare const DeleteAction: Class;
/**
 * DeliveryChargeSpecification
 *
 * The price for the delivery of an offer using a particular delivery method.
 *
 * https://schema.org/DeliveryChargeSpecification
 */
export declare const DeliveryChargeSpecification: Class;
/**
 * DeliveryEvent
 *
 * An event involving the delivery of an item.
 *
 * https://schema.org/DeliveryEvent
 */
export declare const DeliveryEvent: Class;
/**
 * DeliveryMethod
 *
 * A delivery method is a standardized procedure for transferring the product or service to the destination of fulfillment chosen by the customer. Delivery methods are characterized by the means of transportation used, and by the organization or group that is the contracting party for the sending organization or person.\n\nCommonly used values:\n\n* http://purl.org/goodrelations/v1#DeliveryModeDirectDownload\n* http://purl.org/goodrelations/v1#DeliveryModeFreight\n* http://purl.org/goodrelations/v1#DeliveryModeMail\n* http://purl.org/goodrelations/v1#DeliveryModeOwnFleet\n* http://purl.org/goodrelations/v1#DeliveryModePickUp\n* http://purl.org/goodrelations/v1#DHL\n* http://purl.org/goodrelations/v1#FederalExpress\n* http://purl.org/goodrelations/v1#UPS
 *
 *
 * https://schema.org/DeliveryMethod
 */
export declare const DeliveryMethod: Class;
/**
 * DeliveryTimeSettings
 *
 * A DeliveryTimeSettings represents re-usable pieces of shipping information, relating to timing. It is designed for publication on an URL that may be referenced via the [[shippingSettingsLink]] property of an [[OfferShippingDetails]]. Several occurrences can be published, distinguished (and identified/referenced) by their different values for [[transitTimeLabel]].
 *
 * https://schema.org/DeliveryTimeSettings
 */
export declare const DeliveryTimeSettings: Class;
/**
 * Demand
 *
 * A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
 *
 * https://schema.org/Demand
 */
export declare const Demand: Class;
/**
 * Dentist
 *
 * A dentist.
 *
 * https://schema.org/Dentist
 */
export declare const Dentist: Class;
/**
 * DepartAction
 *
 * The act of  departing from a place. An agent departs from a fromLocation for a destination, optionally with participants.
 *
 * https://schema.org/DepartAction
 */
export declare const DepartAction: Class;
/**
 * DepartmentStore
 *
 * A department store.
 *
 * https://schema.org/DepartmentStore
 */
export declare const DepartmentStore: Class;
/**
 * DepositAccount
 *
 * A type of Bank Account with a main purpose of depositing funds to gain interest or other benefits.
 *
 * https://schema.org/DepositAccount
 */
export declare const DepositAccount: Class;
/**
 * DiagnosticLab
 *
 * A medical laboratory that offers on-site or off-site diagnostic services.
 *
 * https://schema.org/DiagnosticLab
 */
export declare const DiagnosticLab: Class;
/**
 * DiagnosticProcedure
 *
 * A medical procedure intended primarily for diagnostic, as opposed to therapeutic, purposes.
 *
 * https://schema.org/DiagnosticProcedure
 */
export declare const DiagnosticProcedure: Class;
/**
 * Diet
 *
 * A strategy of regulating the intake of food to achieve or maintain a specific health-related goal.
 *
 * https://schema.org/Diet
 */
export declare const Diet: Class;
/**
 * DietarySupplement
 *
 * A product taken by mouth that contains a dietary ingredient intended to supplement the diet. Dietary ingredients may include vitamins, minerals, herbs or other botanicals, amino acids, and substances such as enzymes, organ tissues, glandulars and metabolites.
 *
 * https://schema.org/DietarySupplement
 */
export declare const DietarySupplement: Class;
/**
 * DigitalDocument
 *
 * An electronic file or document.
 *
 * https://schema.org/DigitalDocument
 */
export declare const DigitalDocument: Class;
/**
 * DigitalDocumentPermission
 *
 * A permission for a particular person or group to access a particular file.
 *
 * https://schema.org/DigitalDocumentPermission
 */
export declare const DigitalDocumentPermission: Class;
/**
 * DigitalDocumentPermissionType
 *
 * A type of permission which can be granted for accessing a digital document.
 *
 * https://schema.org/DigitalDocumentPermissionType
 */
export declare const DigitalDocumentPermissionType: Class;
/**
 * DigitalPlatformEnumeration
 *
 * Enumerates some common technology platforms, for use with properties such as [[actionPlatform]]. It is not supposed to be comprehensive - when a suitable code is not enumerated here, textual or URL values can be used instead. These codes are at a fairly high level and do not deal with versioning and other nuance. Additional codes can be suggested [in github](https://github.com/schemaorg/schemaorg/issues/3057).
 *
 * https://schema.org/DigitalPlatformEnumeration
 */
export declare const DigitalPlatformEnumeration: Class;
/**
 * DisagreeAction
 *
 * The act of expressing a difference of opinion with the object. An agent disagrees to/about an object (a proposition, topic or theme) with participants.
 *
 * https://schema.org/DisagreeAction
 */
export declare const DisagreeAction: Class;
/**
 * DiscoverAction
 *
 * The act of discovering/finding an object.
 *
 * https://schema.org/DiscoverAction
 */
export declare const DiscoverAction: Class;
/**
 * DiscussionForumPosting
 *
 * A posting to a discussion forum.
 *
 * https://schema.org/DiscussionForumPosting
 */
export declare const DiscussionForumPosting: Class;
/**
 * DislikeAction
 *
 * The act of expressing a negative sentiment about the object. An agent dislikes an object (a proposition, topic or theme) with participants.
 *
 * https://schema.org/DislikeAction
 */
export declare const DislikeAction: Class;
/**
 * Distance
 *
 * Properties that take Distances as values are of the form '&lt;Number&gt; &lt;Length unit of measure&gt;'. E.g., '7 ft'.
 *
 * https://schema.org/Distance
 */
export declare const Distance: Class;
/**
 * Distillery
 *
 * A distillery.
 *
 * https://schema.org/Distillery
 */
export declare const Distillery: Class;
/**
 * DonateAction
 *
 * The act of providing goods, services, or money without compensation, often for philanthropic reasons.
 *
 * https://schema.org/DonateAction
 */
export declare const DonateAction: Class;
/**
 * DoseSchedule
 *
 * A specific dosing schedule for a drug or supplement.
 *
 * https://schema.org/DoseSchedule
 */
export declare const DoseSchedule: Class;
/**
 * DownloadAction
 *
 * The act of downloading an object.
 *
 * https://schema.org/DownloadAction
 */
export declare const DownloadAction: Class;
/**
 * DrawAction
 *
 * The act of producing a visual/graphical representation of an object, typically with a pen/pencil and paper as instruments.
 *
 * https://schema.org/DrawAction
 */
export declare const DrawAction: Class;
/**
 * Drawing
 *
 * A picture or diagram made with a pencil, pen, or crayon rather than paint.
 *
 * https://schema.org/Drawing
 */
export declare const Drawing: Class;
/**
 * DrinkAction
 *
 * The act of swallowing liquids.
 *
 * https://schema.org/DrinkAction
 */
export declare const DrinkAction: Class;
/**
 * DriveWheelConfigurationValue
 *
 * A value indicating which roadwheels will receive torque.
 *
 * https://schema.org/DriveWheelConfigurationValue
 */
export declare const DriveWheelConfigurationValue: Class;
/**
 * Drug
 *
 * A chemical or biologic substance, used as a medical therapy, that has a physiological effect on an organism. Here the term drug is used interchangeably with the term medicine although clinical knowledge makes a clear difference between them.
 *
 * https://schema.org/Drug
 */
export declare const Drug: Class;
/**
 * DrugClass
 *
 * A class of medical drugs, e.g., statins. Classes can represent general pharmacological class, common mechanisms of action, common physiological effects, etc.
 *
 * https://schema.org/DrugClass
 */
export declare const DrugClass: Class;
/**
 * DrugCost
 *
 * The cost per unit of a medical drug. Note that this type is not meant to represent the price in an offer of a drug for sale; see the Offer type for that. This type will typically be used to tag wholesale or average retail cost of a drug, or maximum reimbursable cost. Costs of medical drugs vary widely depending on how and where they are paid for, so while this type captures some of the variables, costs should be used with caution by consumers of this schema's markup.
 *
 * https://schema.org/DrugCost
 */
export declare const DrugCost: Class;
/**
 * DrugCostCategory
 *
 * Enumerated categories of medical drug costs.
 *
 * https://schema.org/DrugCostCategory
 */
export declare const DrugCostCategory: Class;
/**
 * DrugLegalStatus
 *
 * The legal availability status of a medical drug.
 *
 * https://schema.org/DrugLegalStatus
 */
export declare const DrugLegalStatus: Class;
/**
 * DrugPregnancyCategory
 *
 * Categories that represent an assessment of the risk of fetal injury due to a drug or pharmaceutical used as directed by the mother during pregnancy.
 *
 * https://schema.org/DrugPregnancyCategory
 */
export declare const DrugPregnancyCategory: Class;
/**
 * DrugPrescriptionStatus
 *
 * Indicates whether this drug is available by prescription or over-the-counter.
 *
 * https://schema.org/DrugPrescriptionStatus
 */
export declare const DrugPrescriptionStatus: Class;
/**
 * DrugStrength
 *
 * A specific strength in which a medical drug is available in a specific country.
 *
 * https://schema.org/DrugStrength
 */
export declare const DrugStrength: Class;
/**
 * DryCleaningOrLaundry
 *
 * A dry-cleaning business.
 *
 * https://schema.org/DryCleaningOrLaundry
 */
export declare const DryCleaningOrLaundry: Class;
/**
 * Duration
 *
 * Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
 *
 * https://schema.org/Duration
 */
export declare const Duration: Class;
/**
 * EUEnergyEfficiencyEnumeration
 *
 * Enumerates the EU energy efficiency classes A-G as well as A+, A++, and A+++ as defined in EU directive 2017/1369.
 *
 * https://schema.org/EUEnergyEfficiencyEnumeration
 */
export declare const EUEnergyEfficiencyEnumeration: Class;
/**
 * EatAction
 *
 * The act of swallowing solid objects.
 *
 * https://schema.org/EatAction
 */
export declare const EatAction: Class;
/**
 * EducationEvent
 *
 * Event type: Education event.
 *
 * https://schema.org/EducationEvent
 */
export declare const EducationEvent: Class;
/**
 * EducationalAudience
 *
 * An EducationalAudience.
 *
 * https://schema.org/EducationalAudience
 */
export declare const EducationalAudience: Class;
/**
 * EducationalOccupationalCredential
 *
 * An educational or occupational credential. A diploma, academic degree, certification, qualification, badge, etc., that may be awarded to a person or other entity that meets the requirements defined by the credentialer.
 *
 * https://schema.org/EducationalOccupationalCredential
 */
export declare const EducationalOccupationalCredential: Class;
/**
 * EducationalOccupationalProgram
 *
 * A program offered by an institution which determines the learning progress to achieve an outcome, usually a credential like a degree or certificate. This would define a discrete set of opportunities (e.g., job, courses) that together constitute a program with a clear start, end, set of requirements, and transition to a new occupational opportunity (e.g., a job), or sometimes a higher educational opportunity (e.g., an advanced degree).
 *
 * https://schema.org/EducationalOccupationalProgram
 */
export declare const EducationalOccupationalProgram: Class;
/**
 * EducationalOrganization
 *
 * An educational organization.
 *
 * https://schema.org/EducationalOrganization
 */
export declare const EducationalOrganization: Class;
/**
 * Electrician
 *
 * An electrician.
 *
 * https://schema.org/Electrician
 */
export declare const Electrician: Class;
/**
 * ElectronicsStore
 *
 * An electronics store.
 *
 * https://schema.org/ElectronicsStore
 */
export declare const ElectronicsStore: Class;
/**
 * ElementarySchool
 *
 * An elementary school.
 *
 * https://schema.org/ElementarySchool
 */
export declare const ElementarySchool: Class;
/**
 * EmailMessage
 *
 * An email message.
 *
 * https://schema.org/EmailMessage
 */
export declare const EmailMessage: Class;
/**
 * Embassy
 *
 * An embassy.
 *
 * https://schema.org/Embassy
 */
export declare const Embassy: Class;
/**
 * EmergencyService
 *
 * An emergency service, such as a fire station or ER.
 *
 * https://schema.org/EmergencyService
 */
export declare const EmergencyService: Class;
/**
 * EmployeeRole
 *
 * A subclass of OrganizationRole used to describe employee relationships.
 *
 * https://schema.org/EmployeeRole
 */
export declare const EmployeeRole: Class;
/**
 * EmployerAggregateRating
 *
 * An aggregate rating of an Organization related to its role as an employer.
 *
 * https://schema.org/EmployerAggregateRating
 */
export declare const EmployerAggregateRating: Class;
/**
 * EmployerReview
 *
 * An [[EmployerReview]] is a review of an [[Organization]] regarding its role as an employer, written by a current or former employee of that organization.
 *
 * https://schema.org/EmployerReview
 */
export declare const EmployerReview: Class;
/**
 * EmploymentAgency
 *
 * An employment agency.
 *
 * https://schema.org/EmploymentAgency
 */
export declare const EmploymentAgency: Class;
/**
 * EndorseAction
 *
 * An agent approves/certifies/likes/supports/sanctions an object.
 *
 * https://schema.org/EndorseAction
 */
export declare const EndorseAction: Class;
/**
 * EndorsementRating
 *
 * An EndorsementRating is a rating that expresses some level of endorsement, for example inclusion in a "critic's pick" blog, a
 * "Like" or "+1" on a social network. It can be considered the [[result]] of an [[EndorseAction]] in which the [[object]] of the action is rated positively by
 * some [[agent]]. As is common elsewhere in schema.org, it is sometimes more useful to describe the results of such an action without explicitly describing the [[Action]].
 *
 * An [[EndorsementRating]] may be part of a numeric scale or organized system, but this is not required: having an explicit type for indicating a positive,
 * endorsement rating is particularly useful in the absence of numeric scales as it helps consumers understand that the rating is broadly positive.
 *
 *
 * https://schema.org/EndorsementRating
 */
export declare const EndorsementRating: Class;
/**
 * Energy
 *
 * Properties that take Energy as values are of the form '&lt;Number&gt; &lt;Energy unit of measure&gt;'.
 *
 * https://schema.org/Energy
 */
export declare const Energy: Class;
/**
 * EnergyConsumptionDetails
 *
 * EnergyConsumptionDetails represents information related to the energy efficiency of a product that consumes energy. The information that can be provided is based on international regulations such as for example [EU directive 2017/1369](https://eur-lex.europa.eu/eli/reg/2017/1369/oj) for energy labeling and the [Energy labeling rule](https://www.ftc.gov/enforcement/rules/rulemaking-regulatory-reform-proceedings/energy-water-use-labeling-consumer) under the Energy Policy and Conservation Act (EPCA) in the US.
 *
 * https://schema.org/EnergyConsumptionDetails
 */
export declare const EnergyConsumptionDetails: Class;
/**
 * EnergyEfficiencyEnumeration
 *
 * Enumerates energy efficiency levels (also known as "classes" or "ratings") and certifications that are part of several international energy efficiency standards.
 *
 * https://schema.org/EnergyEfficiencyEnumeration
 */
export declare const EnergyEfficiencyEnumeration: Class;
/**
 * EnergyStarEnergyEfficiencyEnumeration
 *
 * Used to indicate whether a product is EnergyStar certified.
 *
 * https://schema.org/EnergyStarEnergyEfficiencyEnumeration
 */
export declare const EnergyStarEnergyEfficiencyEnumeration: Class;
/**
 * EngineSpecification
 *
 * Information about the engine of the vehicle. A vehicle can have multiple engines represented by multiple engine specification entities.
 *
 * https://schema.org/EngineSpecification
 */
export declare const EngineSpecification: Class;
/**
 * EntertainmentBusiness
 *
 * A business providing entertainment.
 *
 * https://schema.org/EntertainmentBusiness
 */
export declare const EntertainmentBusiness: Class;
/**
 * EntryPoint
 *
 * An entry point, within some Web-based protocol.
 *
 * https://schema.org/EntryPoint
 */
export declare const EntryPoint: Class;
/**
 * Enumeration
 *
 * Lists or enumerations—for example, a list of cuisines or music genres, etc.
 *
 * https://schema.org/Enumeration
 */
export declare const Enumeration: Class;
/**
 * Episode
 *
 * A media episode (e.g. TV, radio, video game) which can be part of a series or season.
 *
 * https://schema.org/Episode
 */
export declare const Episode: Class;
/**
 * Event
 *
 * An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
 *
 * https://schema.org/Event
 */
export declare const Event: Class;
/**
 * EventAttendanceModeEnumeration
 *
 * An EventAttendanceModeEnumeration value is one of potentially several modes of organising an event, relating to whether it is online or offline.
 *
 * https://schema.org/EventAttendanceModeEnumeration
 */
export declare const EventAttendanceModeEnumeration: Class;
/**
 * EventReservation
 *
 * A reservation for an event like a concert, sporting event, or lecture.\n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use [[Offer]].
 *
 * https://schema.org/EventReservation
 */
export declare const EventReservation: Class;
/**
 * EventSeries
 *
 * A series of [[Event]]s. Included events can relate with the series using the [[superEvent]] property.
 *
 * An EventSeries is a collection of events that share some unifying characteristic. For example, "The Olympic Games" is a series, which
 * is repeated regularly. The "2012 London Olympics" can be presented both as an [[Event]] in the series "Olympic Games", and as an
 * [[EventSeries]] that included a number of sporting competitions as Events.
 *
 * The nature of the association between the events in an [[EventSeries]] can vary, but typical examples could
 * include a thematic event series (e.g. topical meetups or classes), or a series of regular events that share a location, attendee group and/or organizers.
 *
 * EventSeries has been defined as a kind of Event to make it easy for publishers to use it in an Event context without
 * worrying about which kinds of series are really event-like enough to call an Event. In general an EventSeries
 * may seem more Event-like when the period of time is compact and when aspects such as location are fixed, but
 * it may also sometimes prove useful to describe a longer-term series as an Event.
 *
 *
 * https://schema.org/EventSeries
 */
export declare const EventSeries: Class;
/**
 * EventStatusType
 *
 * EventStatusType is an enumeration type whose instances represent several states that an Event may be in.
 *
 * https://schema.org/EventStatusType
 */
export declare const EventStatusType: Class;
/**
 * EventVenue
 *
 * An event venue.
 *
 * https://schema.org/EventVenue
 */
export declare const EventVenue: Class;
/**
 * ExchangeRateSpecification
 *
 * A structured value representing exchange rate.
 *
 * https://schema.org/ExchangeRateSpecification
 */
export declare const ExchangeRateSpecification: Class;
/**
 * ExerciseAction
 *
 * The act of participating in exertive activity for the purposes of improving health and fitness.
 *
 * https://schema.org/ExerciseAction
 */
export declare const ExerciseAction: Class;
/**
 * ExerciseGym
 *
 * A gym.
 *
 * https://schema.org/ExerciseGym
 */
export declare const ExerciseGym: Class;
/**
 * ExercisePlan
 *
 * Fitness-related activity designed for a specific health-related purpose, including defined exercise routines as well as activity prescribed by a clinician.
 *
 * https://schema.org/ExercisePlan
 */
export declare const ExercisePlan: Class;
/**
 * ExhibitionEvent
 *
 * Event type: Exhibition event, e.g. at a museum, library, archive, tradeshow, ...
 *
 * https://schema.org/ExhibitionEvent
 */
export declare const ExhibitionEvent: Class;
/**
 * FAQPage
 *
 * A [[FAQPage]] is a [[WebPage]] presenting one or more "[Frequently asked questions](https://en.wikipedia.org/wiki/FAQ)" (see also [[QAPage]]).
 *
 * https://schema.org/FAQPage
 */
export declare const FAQPage: Class;
/**
 * FMRadioChannel
 *
 * A radio channel that uses FM.
 *
 * https://schema.org/FMRadioChannel
 */
export declare const FMRadioChannel: Class;
/**
 * FastFoodRestaurant
 *
 * A fast-food restaurant.
 *
 * https://schema.org/FastFoodRestaurant
 */
export declare const FastFoodRestaurant: Class;
/**
 * Festival
 *
 * Event type: Festival.
 *
 * https://schema.org/Festival
 */
export declare const Festival: Class;
/**
 * FilmAction
 *
 * The act of capturing sound and moving images on film, video, or digitally.
 *
 * https://schema.org/FilmAction
 */
export declare const FilmAction: Class;
/**
 * FinancialProduct
 *
 * A product provided to consumers and businesses by financial institutions such as banks, insurance companies, brokerage firms, consumer finance companies, and investment companies which comprise the financial services industry.
 *
 * https://schema.org/FinancialProduct
 */
export declare const FinancialProduct: Class;
/**
 * FinancialService
 *
 * Financial services business.
 *
 * https://schema.org/FinancialService
 */
export declare const FinancialService: Class;
/**
 * FindAction
 *
 * The act of finding an object.\n\nRelated actions:\n\n* [[SearchAction]]: FindAction is generally lead by a SearchAction, but not necessarily.
 *
 * https://schema.org/FindAction
 */
export declare const FindAction: Class;
/**
 * FireStation
 *
 * A fire station. With firemen.
 *
 * https://schema.org/FireStation
 */
export declare const FireStation: Class;
/**
 * Flight
 *
 * An airline flight.
 *
 * https://schema.org/Flight
 */
export declare const Flight: Class;
/**
 * FlightReservation
 *
 * A reservation for air travel.\n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use [[Offer]].
 *
 * https://schema.org/FlightReservation
 */
export declare const FlightReservation: Class;
/**
 * Float
 *
 * Data type: Floating number.
 *
 * https://schema.org/Float
 */
export declare const Float: Class;
/**
 * FloorPlan
 *
 * A FloorPlan is an explicit representation of a collection of similar accommodations, allowing the provision of common information (room counts, sizes, layout diagrams) and offers for rental or sale. In typical use, some [[ApartmentComplex]] has an [[accommodationFloorPlan]] which is a [[FloorPlan]].  A FloorPlan is always in the context of a particular place, either a larger [[ApartmentComplex]] or a single [[Apartment]]. The visual/spatial aspects of a floor plan (i.e. room layout, [see wikipedia](https://en.wikipedia.org/wiki/Floor_plan)) can be indicated using [[image]].
 *
 * https://schema.org/FloorPlan
 */
export declare const FloorPlan: Class;
/**
 * Florist
 *
 * A florist.
 *
 * https://schema.org/Florist
 */
export declare const Florist: Class;
/**
 * FollowAction
 *
 * The act of forming a personal connection with someone/something (object) unidirectionally/asymmetrically to get updates polled from.\n\nRelated actions:\n\n* [[BefriendAction]]: Unlike BefriendAction, FollowAction implies that the connection is *not* necessarily reciprocal.\n* [[SubscribeAction]]: Unlike SubscribeAction, FollowAction implies that the follower acts as an active agent constantly/actively polling for updates.\n* [[RegisterAction]]: Unlike RegisterAction, FollowAction implies that the agent is interested in continuing receiving updates from the object.\n* [[JoinAction]]: Unlike JoinAction, FollowAction implies that the agent is interested in getting updates from the object.\n* [[TrackAction]]: Unlike TrackAction, FollowAction refers to the polling of updates of all aspects of animate objects rather than the location of inanimate objects (e.g. you track a package, but you don't follow it).
 *
 * https://schema.org/FollowAction
 */
export declare const FollowAction: Class;
/**
 * FoodEstablishment
 *
 * A food-related business.
 *
 * https://schema.org/FoodEstablishment
 */
export declare const FoodEstablishment: Class;
/**
 * FoodEstablishmentReservation
 *
 * A reservation to dine at a food-related business.\n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations.
 *
 * https://schema.org/FoodEstablishmentReservation
 */
export declare const FoodEstablishmentReservation: Class;
/**
 * FoodEvent
 *
 * Event type: Food event.
 *
 * https://schema.org/FoodEvent
 */
export declare const FoodEvent: Class;
/**
 * FoodService
 *
 * A food service, like breakfast, lunch, or dinner.
 *
 * https://schema.org/FoodService
 */
export declare const FoodService: Class;
/**
 * FundingAgency
 *
 * A FundingAgency is an organization that implements one or more [[FundingScheme]]s and manages
 *     the granting process (via [[Grant]]s, typically [[MonetaryGrant]]s).
 *     A funding agency is not always required for grant funding, e.g. philanthropic giving, corporate sponsorship etc.
 *
 * Examples of funding agencies include ERC, REA, NIH, Bill and Melinda Gates Foundation, ...
 *
 *
 * https://schema.org/FundingAgency
 */
export declare const FundingAgency: Class;
/**
 * FundingScheme
 *
 * A FundingScheme combines organizational, project and policy aspects of grant-based funding
 *     that sets guidelines, principles and mechanisms to support other kinds of projects and activities.
 *     Funding is typically organized via [[Grant]] funding. Examples of funding schemes: Swiss Priority Programmes (SPPs); EU Framework 7 (FP7); Horizon 2020; the NIH-R01 Grant Program; Wellcome institutional strategic support fund. For large scale public sector funding, the management and administration of grant awards is often handled by other, dedicated, organizations - [[FundingAgency]]s such as ERC, REA, ...
 *
 * https://schema.org/FundingScheme
 */
export declare const FundingScheme: Class;
/**
 * FurnitureStore
 *
 * A furniture store.
 *
 * https://schema.org/FurnitureStore
 */
export declare const FurnitureStore: Class;
/**
 * Game
 *
 * The Game type represents things which are games. These are typically rule-governed recreational activities, e.g. role-playing games in which players assume the role of characters in a fictional setting.
 *
 * https://schema.org/Game
 */
export declare const Game: Class;
/**
 * GameAvailabilityEnumeration
 *
 * For a [[VideoGame]], such as used with a [[PlayGameAction]], an enumeration of the kind of game availability offered.
 *
 * https://schema.org/GameAvailabilityEnumeration
 */
export declare const GameAvailabilityEnumeration: Class;
/**
 * GamePlayMode
 *
 * Indicates whether this game is multi-player, co-op or single-player.
 *
 * https://schema.org/GamePlayMode
 */
export declare const GamePlayMode: Class;
/**
 * GameServer
 *
 * Server that provides game interaction in a multiplayer game.
 *
 * https://schema.org/GameServer
 */
export declare const GameServer: Class;
/**
 * GameServerStatus
 *
 * Status of a game server.
 *
 * https://schema.org/GameServerStatus
 */
export declare const GameServerStatus: Class;
/**
 * GardenStore
 *
 * A garden store.
 *
 * https://schema.org/GardenStore
 */
export declare const GardenStore: Class;
/**
 * GasStation
 *
 * A gas station.
 *
 * https://schema.org/GasStation
 */
export declare const GasStation: Class;
/**
 * GatedResidenceCommunity
 *
 * Residence type: Gated community.
 *
 * https://schema.org/GatedResidenceCommunity
 */
export declare const GatedResidenceCommunity: Class;
/**
 * GenderType
 *
 * An enumeration of genders.
 *
 * https://schema.org/GenderType
 */
export declare const GenderType: Class;
/**
 * Gene
 *
 * A discrete unit of inheritance which affects one or more biological traits (Source: [https://en.wikipedia.org/wiki/Gene](https://en.wikipedia.org/wiki/Gene)). Examples include FOXP2 (Forkhead box protein P2), SCARNA21 (small Cajal body-specific RNA 21), A- (agouti genotype).
 *
 * https://schema.org/Gene
 */
export declare const Gene: Class;
/**
 * GeneralContractor
 *
 * A general contractor.
 *
 * https://schema.org/GeneralContractor
 */
export declare const GeneralContractor: Class;
/**
 * GeoCircle
 *
 * A GeoCircle is a GeoShape representing a circular geographic area. As it is a GeoShape
 *           it provides the simple textual property 'circle', but also allows the combination of postalCode alongside geoRadius.
 *           The center of the circle can be indicated via the 'geoMidpoint' property, or more approximately using 'address', 'postalCode'.
 *
 *
 * https://schema.org/GeoCircle
 */
export declare const GeoCircle: Class;
/**
 * GeoCoordinates
 *
 * The geographic coordinates of a place or event.
 *
 * https://schema.org/GeoCoordinates
 */
export declare const GeoCoordinates: Class;
/**
 * GeoShape
 *
 * The geographic shape of a place. A GeoShape can be described using several properties whose values are based on latitude/longitude pairs. Either whitespace or commas can be used to separate latitude and longitude; whitespace should be used when writing a list of several such points.
 *
 * https://schema.org/GeoShape
 */
export declare const GeoShape: Class;
/**
 * GeospatialGeometry
 *
 * (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
 *
 * https://schema.org/GeospatialGeometry
 */
export declare const GeospatialGeometry: Class;
/**
 * GiveAction
 *
 * The act of transferring ownership of an object to a destination. Reciprocal of TakeAction.\n\nRelated actions:\n\n* [[TakeAction]]: Reciprocal of GiveAction.\n* [[SendAction]]: Unlike SendAction, GiveAction implies that ownership is being transferred (e.g. I may send my laptop to you, but that doesn't mean I'm giving it to you).
 *
 * https://schema.org/GiveAction
 */
export declare const GiveAction: Class;
/**
 * GolfCourse
 *
 * A golf course.
 *
 * https://schema.org/GolfCourse
 */
export declare const GolfCourse: Class;
/**
 * GovernmentBenefitsType
 *
 * GovernmentBenefitsType enumerates several kinds of government benefits to support the COVID-19 situation. Note that this structure may not capture all benefits offered.
 *
 * https://schema.org/GovernmentBenefitsType
 */
export declare const GovernmentBenefitsType: Class;
/**
 * GovernmentBuilding
 *
 * A government building.
 *
 * https://schema.org/GovernmentBuilding
 */
export declare const GovernmentBuilding: Class;
/**
 * GovernmentOffice
 *
 * A government office&#x2014;for example, an IRS or DMV office.
 *
 * https://schema.org/GovernmentOffice
 */
export declare const GovernmentOffice: Class;
/**
 * GovernmentOrganization
 *
 * A governmental organization or agency.
 *
 * https://schema.org/GovernmentOrganization
 */
export declare const GovernmentOrganization: Class;
/**
 * GovernmentPermit
 *
 * A permit issued by a government agency.
 *
 * https://schema.org/GovernmentPermit
 */
export declare const GovernmentPermit: Class;
/**
 * GovernmentService
 *
 * A service provided by a government organization, e.g. food stamps, veterans benefits, etc.
 *
 * https://schema.org/GovernmentService
 */
export declare const GovernmentService: Class;
/**
 * Grant
 *
 * A grant, typically financial or otherwise quantifiable, of resources. Typically a [[funder]] sponsors some [[MonetaryAmount]] to an [[Organization]] or [[Person]],
 *     sometimes not necessarily via a dedicated or long-lived [[Project]], resulting in one or more outputs, or [[fundedItem]]s. For financial sponsorship, indicate the [[funder]] of a [[MonetaryGrant]]. For non-financial support, indicate [[sponsor]] of [[Grant]]s of resources (e.g. office space).
 *
 * Grants support  activities directed towards some agreed collective goals, often but not always organized as [[Project]]s. Long-lived projects are sometimes sponsored by a variety of grants over time, but it is also common for a project to be associated with a single grant.
 *
 * The amount of a [[Grant]] is represented using [[amount]] as a [[MonetaryAmount]].
 *
 *
 * https://schema.org/Grant
 */
export declare const Grant: Class;
/**
 * GroceryStore
 *
 * A grocery store.
 *
 * https://schema.org/GroceryStore
 */
export declare const GroceryStore: Class;
/**
 * Guide
 *
 * [[Guide]] is a page or article that recommends specific products or services, or aspects of a thing for a user to consider. A [[Guide]] may represent a Buying Guide and detail aspects of products or services for a user to consider. A [[Guide]] may represent a Product Guide and recommend specific products or services. A [[Guide]] may represent a Ranked List and recommend specific products or services with ranking.
 *
 * https://schema.org/Guide
 */
export declare const Guide: Class;
/**
 * HVACBusiness
 *
 * A business that provides Heating, Ventilation and Air Conditioning services.
 *
 * https://schema.org/HVACBusiness
 */
export declare const HVACBusiness: Class;
/**
 * Hackathon
 *
 * A [hackathon](https://en.wikipedia.org/wiki/Hackathon) event.
 *
 * https://schema.org/Hackathon
 */
export declare const Hackathon: Class;
/**
 * HairSalon
 *
 * A hair salon.
 *
 * https://schema.org/HairSalon
 */
export declare const HairSalon: Class;
/**
 * HardwareStore
 *
 * A hardware store.
 *
 * https://schema.org/HardwareStore
 */
export declare const HardwareStore: Class;
/**
 * HealthAndBeautyBusiness
 *
 * Health and beauty.
 *
 * https://schema.org/HealthAndBeautyBusiness
 */
export declare const HealthAndBeautyBusiness: Class;
/**
 * HealthAspectEnumeration
 *
 * HealthAspectEnumeration enumerates several aspects of health content online, each of which might be described using [[hasHealthAspect]] and [[HealthTopicContent]].
 *
 * https://schema.org/HealthAspectEnumeration
 */
export declare const HealthAspectEnumeration: Class;
/**
 * HealthClub
 *
 * A health club.
 *
 * https://schema.org/HealthClub
 */
export declare const HealthClub: Class;
/**
 * HealthInsurancePlan
 *
 * A US-style health insurance plan, including PPOs, EPOs, and HMOs.
 *
 * https://schema.org/HealthInsurancePlan
 */
export declare const HealthInsurancePlan: Class;
/**
 * HealthPlanCostSharingSpecification
 *
 * A description of costs to the patient under a given network or formulary.
 *
 * https://schema.org/HealthPlanCostSharingSpecification
 */
export declare const HealthPlanCostSharingSpecification: Class;
/**
 * HealthPlanFormulary
 *
 * For a given health insurance plan, the specification for costs and coverage of prescription drugs.
 *
 * https://schema.org/HealthPlanFormulary
 */
export declare const HealthPlanFormulary: Class;
/**
 * HealthPlanNetwork
 *
 * A US-style health insurance plan network.
 *
 * https://schema.org/HealthPlanNetwork
 */
export declare const HealthPlanNetwork: Class;
/**
 * HealthTopicContent
 *
 * [[HealthTopicContent]] is [[WebContent]] that is about some aspect of a health topic, e.g. a condition, its symptoms or treatments. Such content may be comprised of several parts or sections and use different types of media. Multiple instances of [[WebContent]] (and hence [[HealthTopicContent]]) can be related using [[hasPart]] / [[isPartOf]] where there is some kind of content hierarchy, and their content described with [[about]] and [[mentions]] e.g. building upon the existing [[MedicalCondition]] vocabulary.
 *
 *
 * https://schema.org/HealthTopicContent
 */
export declare const HealthTopicContent: Class;
/**
 * HighSchool
 *
 * A high school.
 *
 * https://schema.org/HighSchool
 */
export declare const HighSchool: Class;
/**
 * HinduTemple
 *
 * A Hindu temple.
 *
 * https://schema.org/HinduTemple
 */
export declare const HinduTemple: Class;
/**
 * HobbyShop
 *
 * A store that sells materials useful or necessary for various hobbies.
 *
 * https://schema.org/HobbyShop
 */
export declare const HobbyShop: Class;
/**
 * HomeAndConstructionBusiness
 *
 * A construction business.\n\nA HomeAndConstructionBusiness is a [[LocalBusiness]] that provides services around homes and buildings.\n\nAs a [[LocalBusiness]] it can be described as a [[provider]] of one or more [[Service]]\(s).
 *
 * https://schema.org/HomeAndConstructionBusiness
 */
export declare const HomeAndConstructionBusiness: Class;
/**
 * HomeGoodsStore
 *
 * A home goods store.
 *
 * https://schema.org/HomeGoodsStore
 */
export declare const HomeGoodsStore: Class;
/**
 * Hospital
 *
 * A hospital.
 *
 * https://schema.org/Hospital
 */
export declare const Hospital: Class;
/**
 * Hostel
 *
 * A hostel - cheap accommodation, often in shared dormitories.
 * <br /><br />
 * See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
 *
 *
 * https://schema.org/Hostel
 */
export declare const Hostel: Class;
/**
 * Hotel
 *
 * A hotel is an establishment that provides lodging paid on a short-term basis (source: Wikipedia, the free encyclopedia, see http://en.wikipedia.org/wiki/Hotel).
 * <br /><br />
 * See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
 *
 *
 * https://schema.org/Hotel
 */
export declare const Hotel: Class;
/**
 * HotelRoom
 *
 * A hotel room is a single room in a hotel.
 * <br /><br />
 * See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
 *
 *
 * https://schema.org/HotelRoom
 */
export declare const HotelRoom: Class;
/**
 * House
 *
 * A house is a building or structure that has the ability to be occupied for habitation by humans or other creatures (source: Wikipedia, the free encyclopedia, see <a href="http://en.wikipedia.org/wiki/House">http://en.wikipedia.org/wiki/House</a>).
 *
 * https://schema.org/House
 */
export declare const House: Class;
/**
 * HousePainter
 *
 * A house painting service.
 *
 * https://schema.org/HousePainter
 */
export declare const HousePainter: Class;
/**
 * HowTo
 *
 * Instructions that explain how to achieve a result by performing a sequence of steps.
 *
 * https://schema.org/HowTo
 */
export declare const HowTo: Class;
/**
 * HowToDirection
 *
 * A direction indicating a single action to do in the instructions for how to achieve a result.
 *
 * https://schema.org/HowToDirection
 */
export declare const HowToDirection: Class;
/**
 * HowToItem
 *
 * An item used as either a tool or supply when performing the instructions for how to achieve a result.
 *
 * https://schema.org/HowToItem
 */
export declare const HowToItem: Class;
/**
 * HowToSection
 *
 * A sub-grouping of steps in the instructions for how to achieve a result (e.g. steps for making a pie crust within a pie recipe).
 *
 * https://schema.org/HowToSection
 */
export declare const HowToSection: Class;
/**
 * HowToStep
 *
 * A step in the instructions for how to achieve a result. It is an ordered list with HowToDirection and/or HowToTip items.
 *
 * https://schema.org/HowToStep
 */
export declare const HowToStep: Class;
/**
 * HowToSupply
 *
 * A supply consumed when performing the instructions for how to achieve a result.
 *
 * https://schema.org/HowToSupply
 */
export declare const HowToSupply: Class;
/**
 * HowToTip
 *
 * An explanation in the instructions for how to achieve a result. It provides supplementary information about a technique, supply, author's preference, etc. It can explain what could be done, or what should not be done, but doesn't specify what should be done (see HowToDirection).
 *
 * https://schema.org/HowToTip
 */
export declare const HowToTip: Class;
/**
 * HowToTool
 *
 * A tool used (but not consumed) when performing instructions for how to achieve a result.
 *
 * https://schema.org/HowToTool
 */
export declare const HowToTool: Class;
/**
 * HyperToc
 *
 * A HyperToc represents a hypertext table of contents for complex media objects, such as [[VideoObject]], [[AudioObject]]. Items in the table of contents are indicated using the [[tocEntry]] property, and typed [[HyperTocEntry]]. For cases where the same larger work is split into multiple files, [[associatedMedia]] can be used on individual [[HyperTocEntry]] items.
 *
 * https://schema.org/HyperToc
 */
export declare const HyperToc: Class;
/**
 * HyperTocEntry
 *
 * A HyperToEntry is an item within a [[HyperToc]], which represents a hypertext table of contents for complex media objects, such as [[VideoObject]], [[AudioObject]]. The media object itself is indicated using [[associatedMedia]]. Each section of interest within that content can be described with a [[HyperTocEntry]], with associated [[startOffset]] and [[endOffset]]. When several entries are all from the same file, [[associatedMedia]] is used on the overarching [[HyperTocEntry]]; if the content has been split into multiple files, they can be referenced using [[associatedMedia]] on each [[HyperTocEntry]].
 *
 * https://schema.org/HyperTocEntry
 */
export declare const HyperTocEntry: Class;
/**
 * IceCreamShop
 *
 * An ice cream shop.
 *
 * https://schema.org/IceCreamShop
 */
export declare const IceCreamShop: Class;
/**
 * IgnoreAction
 *
 * The act of intentionally disregarding the object. An agent ignores an object.
 *
 * https://schema.org/IgnoreAction
 */
export declare const IgnoreAction: Class;
/**
 * ImageGallery
 *
 * Web page type: Image gallery page.
 *
 * https://schema.org/ImageGallery
 */
export declare const ImageGallery: Class;
/**
 * ImageObject
 *
 * An image file.
 *
 * https://schema.org/ImageObject
 */
export declare const ImageObject: Class;
/**
 * ImageObjectSnapshot
 *
 * A specific and exact (byte-for-byte) version of an [[ImageObject]]. Two byte-for-byte identical files, for the purposes of this type, considered identical. If they have different embedded metadata (e.g. XMP, EXIF) the files will differ. Different external facts about the files, e.g. creator or dateCreated that aren't represented in their actual content, do not affect this notion of identity.
 *
 * https://schema.org/ImageObjectSnapshot
 */
export declare const ImageObjectSnapshot: Class;
/**
 * ImagingTest
 *
 * Any medical imaging modality typically used for diagnostic purposes.
 *
 * https://schema.org/ImagingTest
 */
export declare const ImagingTest: Class;
/**
 * IndividualProduct
 *
 * A single, identifiable product instance (e.g. a laptop with a particular serial number).
 *
 * https://schema.org/IndividualProduct
 */
export declare const IndividualProduct: Class;
/**
 * InfectiousAgentClass
 *
 * Classes of agents or pathogens that transmit infectious diseases. Enumerated type.
 *
 * https://schema.org/InfectiousAgentClass
 */
export declare const InfectiousAgentClass: Class;
/**
 * InfectiousDisease
 *
 * An infectious disease is a clinically evident human disease resulting from the presence of pathogenic microbial agents, like pathogenic viruses, pathogenic bacteria, fungi, protozoa, multicellular parasites, and prions. To be considered an infectious disease, such pathogens are known to be able to cause this disease.
 *
 * https://schema.org/InfectiousDisease
 */
export declare const InfectiousDisease: Class;
/**
 * InformAction
 *
 * The act of notifying someone of information pertinent to them, with no expectation of a response.
 *
 * https://schema.org/InformAction
 */
export declare const InformAction: Class;
/**
 * InsertAction
 *
 * The act of adding at a specific location in an ordered collection.
 *
 * https://schema.org/InsertAction
 */
export declare const InsertAction: Class;
/**
 * InstallAction
 *
 * The act of installing an application.
 *
 * https://schema.org/InstallAction
 */
export declare const InstallAction: Class;
/**
 * InsuranceAgency
 *
 * An Insurance agency.
 *
 * https://schema.org/InsuranceAgency
 */
export declare const InsuranceAgency: Class;
/**
 * Intangible
 *
 * A utility class that serves as the umbrella for a number of 'intangible' things such as quantities, structured values, etc.
 *
 * https://schema.org/Intangible
 */
export declare const Intangible: Class;
/**
 * Integer
 *
 * Data type: Integer.
 *
 * https://schema.org/Integer
 */
export declare const Integer: Class;
/**
 * InteractAction
 *
 * The act of interacting with another person or organization.
 *
 * https://schema.org/InteractAction
 */
export declare const InteractAction: Class;
/**
 * InteractionCounter
 *
 * A summary of how users have interacted with this CreativeWork. In most cases, authors will use a subtype to specify the specific type of interaction.
 *
 * https://schema.org/InteractionCounter
 */
export declare const InteractionCounter: Class;
/**
 * InternetCafe
 *
 * An internet cafe.
 *
 * https://schema.org/InternetCafe
 */
export declare const InternetCafe: Class;
/**
 * InvestmentFund
 *
 * A company or fund that gathers capital from a number of investors to create a pool of money that is then re-invested into stocks, bonds and other assets.
 *
 * https://schema.org/InvestmentFund
 */
export declare const InvestmentFund: Class;
/**
 * InvestmentOrDeposit
 *
 * A type of financial product that typically requires the client to transfer funds to a financial service in return for potential beneficial financial return.
 *
 * https://schema.org/InvestmentOrDeposit
 */
export declare const InvestmentOrDeposit: Class;
/**
 * InviteAction
 *
 * The act of asking someone to attend an event. Reciprocal of RsvpAction.
 *
 * https://schema.org/InviteAction
 */
export declare const InviteAction: Class;
/**
 * Invoice
 *
 * A statement of the money due for goods or services; a bill.
 *
 * https://schema.org/Invoice
 */
export declare const Invoice: Class;
/**
 * ItemAvailability
 *
 * A list of possible product availability options.
 *
 * https://schema.org/ItemAvailability
 */
export declare const ItemAvailability: Class;
/**
 * ItemList
 *
 * A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting.
 *
 * https://schema.org/ItemList
 */
export declare const ItemList: Class;
/**
 * ItemListOrderType
 *
 * Enumerated for values for itemListOrder for indicating how an ordered ItemList is organized.
 *
 * https://schema.org/ItemListOrderType
 */
export declare const ItemListOrderType: Class;
/**
 * ItemPage
 *
 * A page devoted to a single item, such as a particular product or hotel.
 *
 * https://schema.org/ItemPage
 */
export declare const ItemPage: Class;
/**
 * JewelryStore
 *
 * A jewelry store.
 *
 * https://schema.org/JewelryStore
 */
export declare const JewelryStore: Class;
/**
 * JobPosting
 *
 * A listing that describes a job opening in a certain organization.
 *
 * https://schema.org/JobPosting
 */
export declare const JobPosting: Class;
/**
 * JoinAction
 *
 * An agent joins an event/group with participants/friends at a location.\n\nRelated actions:\n\n* [[RegisterAction]]: Unlike RegisterAction, JoinAction refers to joining a group/team of people.\n* [[SubscribeAction]]: Unlike SubscribeAction, JoinAction does not imply that you'll be receiving updates.\n* [[FollowAction]]: Unlike FollowAction, JoinAction does not imply that you'll be polling for updates.
 *
 * https://schema.org/JoinAction
 */
export declare const JoinAction: Class;
/**
 * Joint
 *
 * The anatomical location at which two or more bones make contact.
 *
 * https://schema.org/Joint
 */
export declare const Joint: Class;
/**
 * LakeBodyOfWater
 *
 * A lake (for example, Lake Pontrachain).
 *
 * https://schema.org/LakeBodyOfWater
 */
export declare const LakeBodyOfWater: Class;
/**
 * Landform
 *
 * A landform or physical feature.  Landform elements include mountains, plains, lakes, rivers, seascape and oceanic waterbody interface features such as bays, peninsulas, seas and so forth, including sub-aqueous terrain features such as submersed mountain ranges, volcanoes, and the great ocean basins.
 *
 * https://schema.org/Landform
 */
export declare const Landform: Class;
/**
 * LandmarksOrHistoricalBuildings
 *
 * An historical landmark or building.
 *
 * https://schema.org/LandmarksOrHistoricalBuildings
 */
export declare const LandmarksOrHistoricalBuildings: Class;
/**
 * Language
 *
 * Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) can be used via the [[alternateName]] property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using [[ComputerLanguage]].
 *
 * https://schema.org/Language
 */
export declare const Language: Class;
/**
 * LearningResource
 *
 * The LearningResource type can be used to indicate [[CreativeWork]]s (whether physical or digital) that have a particular and explicit orientation towards learning, education, skill acquisition, and other educational purposes.
 *
 * [[LearningResource]] is expected to be used as an addition to a primary type such as [[Book]], [[VideoObject]], [[Product]] etc.
 *
 * [[EducationEvent]] serves a similar purpose for event-like things (e.g. a [[Trip]]). A [[LearningResource]] may be created as a result of an [[EducationEvent]], for example by recording one.
 *
 * https://schema.org/LearningResource
 */
export declare const LearningResource: Class;
/**
 * LeaveAction
 *
 * An agent leaves an event / group with participants/friends at a location.\n\nRelated actions:\n\n* [[JoinAction]]: The antonym of LeaveAction.\n* [[UnRegisterAction]]: Unlike UnRegisterAction, LeaveAction implies leaving a group/team of people rather than a service.
 *
 * https://schema.org/LeaveAction
 */
export declare const LeaveAction: Class;
/**
 * LegalForceStatus
 *
 * A list of possible statuses for the legal force of a legislation.
 *
 * https://schema.org/LegalForceStatus
 */
export declare const LegalForceStatus: Class;
/**
 * LegalService
 *
 * A LegalService is a business that provides legally-oriented services, advice and representation, e.g. law firms.\n\nAs a [[LocalBusiness]] it can be described as a [[provider]] of one or more [[Service]]\(s).
 *
 * https://schema.org/LegalService
 */
export declare const LegalService: Class;
/**
 * LegalValueLevel
 *
 * A list of possible levels for the legal validity of a legislation.
 *
 * https://schema.org/LegalValueLevel
 */
export declare const LegalValueLevel: Class;
/**
 * Legislation
 *
 * A legal document such as an act, decree, bill, etc. (enforceable or not) or a component of a legal act (like an article).
 *
 * https://schema.org/Legislation
 */
export declare const Legislation: Class;
/**
 * LegislationObject
 *
 * A specific object or file containing a Legislation. Note that the same Legislation can be published in multiple files. For example, a digitally signed PDF, a plain PDF and an HTML version.
 *
 * https://schema.org/LegislationObject
 */
export declare const LegislationObject: Class;
/**
 * LegislativeBuilding
 *
 * A legislative building&#x2014;for example, the state capitol.
 *
 * https://schema.org/LegislativeBuilding
 */
export declare const LegislativeBuilding: Class;
/**
 * LendAction
 *
 * The act of providing an object under an agreement that it will be returned at a later date. Reciprocal of BorrowAction.\n\nRelated actions:\n\n* [[BorrowAction]]: Reciprocal of LendAction.
 *
 * https://schema.org/LendAction
 */
export declare const LendAction: Class;
/**
 * Library
 *
 * A library.
 *
 * https://schema.org/Library
 */
export declare const Library: Class;
/**
 * LibrarySystem
 *
 * A [[LibrarySystem]] is a collaborative system amongst several libraries.
 *
 * https://schema.org/LibrarySystem
 */
export declare const LibrarySystem: Class;
/**
 * LifestyleModification
 *
 * A process of care involving exercise, changes to diet, fitness routines, and other lifestyle changes aimed at improving a health condition.
 *
 * https://schema.org/LifestyleModification
 */
export declare const LifestyleModification: Class;
/**
 * Ligament
 *
 * A short band of tough, flexible, fibrous connective tissue that functions to connect multiple bones, cartilages, and structurally support joints.
 *
 * https://schema.org/Ligament
 */
export declare const Ligament: Class;
/**
 * LikeAction
 *
 * The act of expressing a positive sentiment about the object. An agent likes an object (a proposition, topic or theme) with participants.
 *
 * https://schema.org/LikeAction
 */
export declare const LikeAction: Class;
/**
 * LinkRole
 *
 * A Role that represents a Web link, e.g. as expressed via the 'url' property. Its linkRelationship property can indicate URL-based and plain textual link types, e.g. those in IANA link registry or others such as 'amphtml'. This structure provides a placeholder where details from HTML's link element can be represented outside of HTML, e.g. in JSON-LD feeds.
 *
 * https://schema.org/LinkRole
 */
export declare const LinkRole: Class;
/**
 * LiquorStore
 *
 * A shop that sells alcoholic drinks such as wine, beer, whisky and other spirits.
 *
 * https://schema.org/LiquorStore
 */
export declare const LiquorStore: Class;
/**
 * ListItem
 *
 * An list item, e.g. a step in a checklist or how-to description.
 *
 * https://schema.org/ListItem
 */
export declare const ListItem: Class;
/**
 * ListenAction
 *
 * The act of consuming audio content.
 *
 * https://schema.org/ListenAction
 */
export declare const ListenAction: Class;
/**
 * LiteraryEvent
 *
 * Event type: Literary event.
 *
 * https://schema.org/LiteraryEvent
 */
export declare const LiteraryEvent: Class;
/**
 * LiveBlogPosting
 *
 * A [[LiveBlogPosting]] is a [[BlogPosting]] intended to provide a rolling textual coverage of an ongoing event through continuous updates.
 *
 * https://schema.org/LiveBlogPosting
 */
export declare const LiveBlogPosting: Class;
/**
 * LoanOrCredit
 *
 * A financial product for the loaning of an amount of money, or line of credit, under agreed terms and charges.
 *
 * https://schema.org/LoanOrCredit
 */
export declare const LoanOrCredit: Class;
/**
 * LocalBusiness
 *
 * A particular physical business or branch of an organization. Examples of LocalBusiness include a restaurant, a particular branch of a restaurant chain, a branch of a bank, a medical practice, a club, a bowling alley, etc.
 *
 * https://schema.org/LocalBusiness
 */
export declare const LocalBusiness: Class;
/**
 * LocationFeatureSpecification
 *
 * Specifies a location feature by providing a structured value representing a feature of an accommodation as a property-value pair of varying degrees of formality.
 *
 * https://schema.org/LocationFeatureSpecification
 */
export declare const LocationFeatureSpecification: Class;
/**
 * Locksmith
 *
 * A locksmith.
 *
 * https://schema.org/Locksmith
 */
export declare const Locksmith: Class;
/**
 * LodgingBusiness
 *
 * A lodging business, such as a motel, hotel, or inn.
 *
 * https://schema.org/LodgingBusiness
 */
export declare const LodgingBusiness: Class;
/**
 * LodgingReservation
 *
 * A reservation for lodging at a hotel, motel, inn, etc.\n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations.
 *
 * https://schema.org/LodgingReservation
 */
export declare const LodgingReservation: Class;
/**
 * LoseAction
 *
 * The act of being defeated in a competitive activity.
 *
 * https://schema.org/LoseAction
 */
export declare const LoseAction: Class;
/**
 * LymphaticVessel
 *
 * A type of blood vessel that specifically carries lymph fluid unidirectionally toward the heart.
 *
 * https://schema.org/LymphaticVessel
 */
export declare const LymphaticVessel: Class;
/**
 * Manuscript
 *
 * A book, document, or piece of music written by hand rather than typed or printed.
 *
 * https://schema.org/Manuscript
 */
export declare const Manuscript: Class;
/**
 * Map
 *
 * A map.
 * Note that `Map` is a reserved Javascript keyword, and is therefore suffixed by `__workaround`.
 * For a list of reserved keywords, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Keywords.
 *
 * https://schema.org/Map
 */
export declare const Map__workaround: Class;
/**
 * MapCategoryType
 *
 * An enumeration of several kinds of Map.
 *
 * https://schema.org/MapCategoryType
 */
export declare const MapCategoryType: Class;
/**
 * MarryAction
 *
 * The act of marrying a person.
 *
 * https://schema.org/MarryAction
 */
export declare const MarryAction: Class;
/**
 * Mass
 *
 * Properties that take Mass as values are of the form '&lt;Number&gt; &lt;Mass unit of measure&gt;'. E.g., '7 kg'.
 *
 * https://schema.org/Mass
 */
export declare const Mass: Class;
/**
 * MathSolver
 *
 * A math solver which is capable of solving a subset of mathematical problems.
 *
 * https://schema.org/MathSolver
 */
export declare const MathSolver: Class;
/**
 * MaximumDoseSchedule
 *
 * The maximum dosing schedule considered safe for a drug or supplement as recommended by an authority or by the drug/supplement's manufacturer. Capture the recommending authority in the recognizingAuthority property of MedicalEntity.
 *
 * https://schema.org/MaximumDoseSchedule
 */
export declare const MaximumDoseSchedule: Class;
/**
 * MeasurementMethodEnum
 *
 * Enumeration(s) for use with [[measurementMethod]].
 *
 * https://schema.org/MeasurementMethodEnum
 */
export declare const MeasurementMethodEnum: Class;
/**
 * MeasurementTypeEnumeration
 *
 * Enumeration of common measurement types (or dimensions), for example "chest" for a person, "inseam" for pants, "gauge" for screws, or "wheel" for bicycles.
 *
 * https://schema.org/MeasurementTypeEnumeration
 */
export declare const MeasurementTypeEnumeration: Class;
/**
 * MediaGallery
 *
 * Web page type: Media gallery page. A mixed-media page that can contain media such as images, videos, and other multimedia.
 *
 * https://schema.org/MediaGallery
 */
export declare const MediaGallery: Class;
/**
 * MediaManipulationRatingEnumeration
 *
 *  Codes for use with the [[mediaAuthenticityCategory]] property, indicating the authenticity of a media object (in the context of how it was published or shared). In general these codes are not mutually exclusive, although some combinations (such as 'original' versus 'transformed', 'edited' and 'staged') would be contradictory if applied in the same [[MediaReview]]. Note that the application of these codes is with regard to a piece of media shared or published in a particular context.
 *
 * https://schema.org/MediaManipulationRatingEnumeration
 */
export declare const MediaManipulationRatingEnumeration: Class;
/**
 * MediaObject
 *
 * A media object, such as an image, video, audio, or text object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
 *
 * https://schema.org/MediaObject
 */
export declare const MediaObject: Class;
/**
 * MediaReview
 *
 * A [[MediaReview]] is a more specialized form of Review dedicated to the evaluation of media content online, typically in the context of fact-checking and misinformation.
 *     For more general reviews of media in the broader sense, use [[UserReview]], [[CriticReview]] or other [[Review]] types. This definition is
 *     a work in progress. While the [[MediaManipulationRatingEnumeration]] list reflects significant community review amongst fact-checkers and others working
 *     to combat misinformation, the specific structures for representing media objects, their versions and publication context, are still evolving. Similarly, best practices for the relationship between [[MediaReview]] and [[ClaimReview]] markup have not yet been finalized.
 *
 * https://schema.org/MediaReview
 */
export declare const MediaReview: Class;
/**
 * MediaReviewItem
 *
 * Represents an item or group of closely related items treated as a unit for the sake of evaluation in a [[MediaReview]]. Authorship etc. apply to the items rather than to the curation/grouping or reviewing party.
 *
 * https://schema.org/MediaReviewItem
 */
export declare const MediaReviewItem: Class;
/**
 * MediaSubscription
 *
 * A subscription which allows a user to access media including audio, video, books, etc.
 *
 * https://schema.org/MediaSubscription
 */
export declare const MediaSubscription: Class;
/**
 * MedicalAudience
 *
 * Target audiences for medical web pages.
 *
 * https://schema.org/MedicalAudience
 */
export declare const MedicalAudience: Class;
/**
 * MedicalAudienceType
 *
 * Target audiences types for medical web pages. Enumerated type.
 *
 * https://schema.org/MedicalAudienceType
 */
export declare const MedicalAudienceType: Class;
/**
 * MedicalBusiness
 *
 * A particular physical or virtual business of an organization for medical purposes. Examples of MedicalBusiness include different businesses run by health professionals.
 *
 * https://schema.org/MedicalBusiness
 */
export declare const MedicalBusiness: Class;
/**
 * MedicalCause
 *
 * The causative agent(s) that are responsible for the pathophysiologic process that eventually results in a medical condition, symptom or sign. In this schema, unless otherwise specified this is meant to be the proximate cause of the medical condition, symptom or sign. The proximate cause is defined as the causative agent that most directly results in the medical condition, symptom or sign. For example, the HIV virus could be considered a cause of AIDS. Or in a diagnostic context, if a patient fell and sustained a hip fracture and two days later sustained a pulmonary embolism which eventuated in a cardiac arrest, the cause of the cardiac arrest (the proximate cause) would be the pulmonary embolism and not the fall. Medical causes can include cardiovascular, chemical, dermatologic, endocrine, environmental, gastroenterologic, genetic, hematologic, gynecologic, iatrogenic, infectious, musculoskeletal, neurologic, nutritional, obstetric, oncologic, otolaryngologic, pharmacologic, psychiatric, pulmonary, renal, rheumatologic, toxic, traumatic, or urologic causes; medical conditions can be causes as well.
 *
 * https://schema.org/MedicalCause
 */
export declare const MedicalCause: Class;
/**
 * MedicalClinic
 *
 * A facility, often associated with a hospital or medical school, that is devoted to the specific diagnosis and/or healthcare. Previously limited to outpatients but with evolution it may be open to inpatients as well.
 *
 * https://schema.org/MedicalClinic
 */
export declare const MedicalClinic: Class;
/**
 * MedicalCode
 *
 * A code for a medical entity.
 *
 * https://schema.org/MedicalCode
 */
export declare const MedicalCode: Class;
/**
 * MedicalCondition
 *
 * Any condition of the human body that affects the normal functioning of a person, whether physically or mentally. Includes diseases, injuries, disabilities, disorders, syndromes, etc.
 *
 * https://schema.org/MedicalCondition
 */
export declare const MedicalCondition: Class;
/**
 * MedicalConditionStage
 *
 * A stage of a medical condition, such as 'Stage IIIa'.
 *
 * https://schema.org/MedicalConditionStage
 */
export declare const MedicalConditionStage: Class;
/**
 * MedicalContraindication
 *
 * A condition or factor that serves as a reason to withhold a certain medical therapy. Contraindications can be absolute (there are no reasonable circumstances for undertaking a course of action) or relative (the patient is at higher risk of complications, but these risks may be outweighed by other considerations or mitigated by other measures).
 *
 * https://schema.org/MedicalContraindication
 */
export declare const MedicalContraindication: Class;
/**
 * MedicalDevice
 *
 * Any object used in a medical capacity, such as to diagnose or treat a patient.
 *
 * https://schema.org/MedicalDevice
 */
export declare const MedicalDevice: Class;
/**
 * MedicalDevicePurpose
 *
 * Categories of medical devices, organized by the purpose or intended use of the device.
 *
 * https://schema.org/MedicalDevicePurpose
 */
export declare const MedicalDevicePurpose: Class;
/**
 * MedicalEntity
 *
 * The most generic type of entity related to health and the practice of medicine.
 *
 * https://schema.org/MedicalEntity
 */
export declare const MedicalEntity: Class;
/**
 * MedicalEnumeration
 *
 * Enumerations related to health and the practice of medicine: A concept that is used to attribute a quality to another concept, as a qualifier, a collection of items or a listing of all of the elements of a set in medicine practice.
 *
 * https://schema.org/MedicalEnumeration
 */
export declare const MedicalEnumeration: Class;
/**
 * MedicalEvidenceLevel
 *
 * Level of evidence for a medical guideline. Enumerated type.
 *
 * https://schema.org/MedicalEvidenceLevel
 */
export declare const MedicalEvidenceLevel: Class;
/**
 * MedicalGuideline
 *
 * Any recommendation made by a standard society (e.g. ACC/AHA) or consensus statement that denotes how to diagnose and treat a particular condition. Note: this type should be used to tag the actual guideline recommendation; if the guideline recommendation occurs in a larger scholarly article, use MedicalScholarlyArticle to tag the overall article, not this type. Note also: the organization making the recommendation should be captured in the recognizingAuthority base property of MedicalEntity.
 *
 * https://schema.org/MedicalGuideline
 */
export declare const MedicalGuideline: Class;
/**
 * MedicalGuidelineContraindication
 *
 * A guideline contraindication that designates a process as harmful and where quality of the data supporting the contraindication is sound.
 *
 * https://schema.org/MedicalGuidelineContraindication
 */
export declare const MedicalGuidelineContraindication: Class;
/**
 * MedicalGuidelineRecommendation
 *
 * A guideline recommendation that is regarded as efficacious and where quality of the data supporting the recommendation is sound.
 *
 * https://schema.org/MedicalGuidelineRecommendation
 */
export declare const MedicalGuidelineRecommendation: Class;
/**
 * MedicalImagingTechnique
 *
 * Any medical imaging modality typically used for diagnostic purposes. Enumerated type.
 *
 * https://schema.org/MedicalImagingTechnique
 */
export declare const MedicalImagingTechnique: Class;
/**
 * MedicalIndication
 *
 * A condition or factor that indicates use of a medical therapy, including signs, symptoms, risk factors, anatomical states, etc.
 *
 * https://schema.org/MedicalIndication
 */
export declare const MedicalIndication: Class;
/**
 * MedicalIntangible
 *
 * A utility class that serves as the umbrella for a number of 'intangible' things in the medical space.
 *
 * https://schema.org/MedicalIntangible
 */
export declare const MedicalIntangible: Class;
/**
 * MedicalObservationalStudy
 *
 * An observational study is a type of medical study that attempts to infer the possible effect of a treatment through observation of a cohort of subjects over a period of time. In an observational study, the assignment of subjects into treatment groups versus control groups is outside the control of the investigator. This is in contrast with controlled studies, such as the randomized controlled trials represented by MedicalTrial, where each subject is randomly assigned to a treatment group or a control group before the start of the treatment.
 *
 * https://schema.org/MedicalObservationalStudy
 */
export declare const MedicalObservationalStudy: Class;
/**
 * MedicalObservationalStudyDesign
 *
 * Design models for observational medical studies. Enumerated type.
 *
 * https://schema.org/MedicalObservationalStudyDesign
 */
export declare const MedicalObservationalStudyDesign: Class;
/**
 * MedicalOrganization
 *
 * A medical organization (physical or not), such as hospital, institution or clinic.
 *
 * https://schema.org/MedicalOrganization
 */
export declare const MedicalOrganization: Class;
/**
 * MedicalProcedure
 *
 * A process of care used in either a diagnostic, therapeutic, preventive or palliative capacity that relies on invasive (surgical), non-invasive, or other techniques.
 *
 * https://schema.org/MedicalProcedure
 */
export declare const MedicalProcedure: Class;
/**
 * MedicalProcedureType
 *
 * An enumeration that describes different types of medical procedures.
 *
 * https://schema.org/MedicalProcedureType
 */
export declare const MedicalProcedureType: Class;
/**
 * MedicalRiskCalculator
 *
 * A complex mathematical calculation requiring an online calculator, used to assess prognosis. Note: use the url property of Thing to record any URLs for online calculators.
 *
 * https://schema.org/MedicalRiskCalculator
 */
export declare const MedicalRiskCalculator: Class;
/**
 * MedicalRiskEstimator
 *
 * Any rule set or interactive tool for estimating the risk of developing a complication or condition.
 *
 * https://schema.org/MedicalRiskEstimator
 */
export declare const MedicalRiskEstimator: Class;
/**
 * MedicalRiskFactor
 *
 * A risk factor is anything that increases a person's likelihood of developing or contracting a disease, medical condition, or complication.
 *
 * https://schema.org/MedicalRiskFactor
 */
export declare const MedicalRiskFactor: Class;
/**
 * MedicalRiskScore
 *
 * A simple system that adds up the number of risk factors to yield a score that is associated with prognosis, e.g. CHAD score, TIMI risk score.
 *
 * https://schema.org/MedicalRiskScore
 */
export declare const MedicalRiskScore: Class;
/**
 * MedicalScholarlyArticle
 *
 * A scholarly article in the medical domain.
 *
 * https://schema.org/MedicalScholarlyArticle
 */
export declare const MedicalScholarlyArticle: Class;
/**
 * MedicalSign
 *
 * Any physical manifestation of a person's medical condition discoverable by objective diagnostic tests or physical examination.
 *
 * https://schema.org/MedicalSign
 */
export declare const MedicalSign: Class;
/**
 * MedicalSignOrSymptom
 *
 * Any feature associated or not with a medical condition. In medicine a symptom is generally subjective while a sign is objective.
 *
 * https://schema.org/MedicalSignOrSymptom
 */
export declare const MedicalSignOrSymptom: Class;
/**
 * MedicalSpecialty
 *
 * Any specific branch of medical science or practice. Medical specialities include clinical specialties that pertain to particular organ systems and their respective disease states, as well as allied health specialties. Enumerated type.
 *
 * https://schema.org/MedicalSpecialty
 */
export declare const MedicalSpecialty: Class;
/**
 * MedicalStudy
 *
 * A medical study is an umbrella type covering all kinds of research studies relating to human medicine or health, including observational studies and interventional trials and registries, randomized, controlled or not. When the specific type of study is known, use one of the extensions of this type, such as MedicalTrial or MedicalObservationalStudy. Also, note that this type should be used to mark up data that describes the study itself; to tag an article that publishes the results of a study, use MedicalScholarlyArticle. Note: use the code property of MedicalEntity to store study IDs, e.g. clinicaltrials.gov ID.
 *
 * https://schema.org/MedicalStudy
 */
export declare const MedicalStudy: Class;
/**
 * MedicalStudyStatus
 *
 * The status of a medical study. Enumerated type.
 *
 * https://schema.org/MedicalStudyStatus
 */
export declare const MedicalStudyStatus: Class;
/**
 * MedicalSymptom
 *
 * Any complaint sensed and expressed by the patient (therefore defined as subjective)  like stomachache, lower-back pain, or fatigue.
 *
 * https://schema.org/MedicalSymptom
 */
export declare const MedicalSymptom: Class;
/**
 * MedicalTest
 *
 * Any medical test, typically performed for diagnostic purposes.
 *
 * https://schema.org/MedicalTest
 */
export declare const MedicalTest: Class;
/**
 * MedicalTestPanel
 *
 * Any collection of tests commonly ordered together.
 *
 * https://schema.org/MedicalTestPanel
 */
export declare const MedicalTestPanel: Class;
/**
 * MedicalTherapy
 *
 * Any medical intervention designed to prevent, treat, and cure human diseases and medical conditions, including both curative and palliative therapies. Medical therapies are typically processes of care relying upon pharmacotherapy, behavioral therapy, supportive therapy (with fluid or nutrition for example), or detoxification (e.g. hemodialysis) aimed at improving or preventing a health condition.
 *
 * https://schema.org/MedicalTherapy
 */
export declare const MedicalTherapy: Class;
/**
 * MedicalTrial
 *
 * A medical trial is a type of medical study that uses a scientific process to compare the safety and efficacy of medical therapies or medical procedures. In general, medical trials are controlled and subjects are allocated at random to the different treatment and/or control groups.
 *
 * https://schema.org/MedicalTrial
 */
export declare const MedicalTrial: Class;
/**
 * MedicalTrialDesign
 *
 * Design models for medical trials. Enumerated type.
 *
 * https://schema.org/MedicalTrialDesign
 */
export declare const MedicalTrialDesign: Class;
/**
 * MedicalWebPage
 *
 * A web page that provides medical information.
 *
 * https://schema.org/MedicalWebPage
 */
export declare const MedicalWebPage: Class;
/**
 * MedicineSystem
 *
 * Systems of medical practice.
 *
 * https://schema.org/MedicineSystem
 */
export declare const MedicineSystem: Class;
/**
 * MeetingRoom
 *
 * A meeting room, conference room, or conference hall is a room provided for singular events such as business conferences and meetings (source: Wikipedia, the free encyclopedia, see <a href="http://en.wikipedia.org/wiki/Conference_hall">http://en.wikipedia.org/wiki/Conference_hall</a>).
 * <br /><br />
 * See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
 *
 *
 * https://schema.org/MeetingRoom
 */
export declare const MeetingRoom: Class;
/**
 * MensClothingStore
 *
 * A men's clothing store.
 *
 * https://schema.org/MensClothingStore
 */
export declare const MensClothingStore: Class;
/**
 * Menu
 *
 * A structured representation of food or drink items available from a FoodEstablishment.
 *
 * https://schema.org/Menu
 */
export declare const Menu: Class;
/**
 * MenuItem
 *
 * A food or drink item listed in a menu or menu section.
 *
 * https://schema.org/MenuItem
 */
export declare const MenuItem: Class;
/**
 * MenuSection
 *
 * A sub-grouping of food or drink items in a menu. E.g. courses (such as 'Dinner', 'Breakfast', etc.), specific type of dishes (such as 'Meat', 'Vegan', 'Drinks', etc.), or some other classification made by the menu provider.
 *
 * https://schema.org/MenuSection
 */
export declare const MenuSection: Class;
/**
 * MerchantReturnEnumeration
 *
 * Enumerates several kinds of product return policies.
 *
 * https://schema.org/MerchantReturnEnumeration
 */
export declare const MerchantReturnEnumeration: Class;
/**
 * MerchantReturnPolicy
 *
 * A MerchantReturnPolicy provides information about product return policies associated with an [[Organization]], [[Product]], or [[Offer]].
 *
 * https://schema.org/MerchantReturnPolicy
 */
export declare const MerchantReturnPolicy: Class;
/**
 * MerchantReturnPolicySeasonalOverride
 *
 * A seasonal override of a return policy, for example used for holidays.
 *
 * https://schema.org/MerchantReturnPolicySeasonalOverride
 */
export declare const MerchantReturnPolicySeasonalOverride: Class;
/**
 * Message
 *
 * A single message from a sender to one or more organizations or people.
 *
 * https://schema.org/Message
 */
export declare const Message: Class;
/**
 * MiddleSchool
 *
 * A middle school (typically for children aged around 11-14, although this varies somewhat).
 *
 * https://schema.org/MiddleSchool
 */
export declare const MiddleSchool: Class;
/**
 * MobileApplication
 *
 * A software application designed specifically to work well on a mobile device such as a telephone.
 *
 * https://schema.org/MobileApplication
 */
export declare const MobileApplication: Class;
/**
 * MobilePhoneStore
 *
 * A store that sells mobile phones and related accessories.
 *
 * https://schema.org/MobilePhoneStore
 */
export declare const MobilePhoneStore: Class;
/**
 * MolecularEntity
 *
 * Any constitutionally or isotopically distinct atom, molecule, ion, ion pair, radical, radical ion, complex, conformer etc., identifiable as a separately distinguishable entity.
 *
 * https://schema.org/MolecularEntity
 */
export declare const MolecularEntity: Class;
/**
 * MonetaryAmount
 *
 * A monetary value or range. This type can be used to describe an amount of money such as $50 USD, or a range as in describing a bank account being suitable for a balance between £1,000 and £1,000,000 GBP, or the value of a salary, etc. It is recommended to use [[PriceSpecification]] Types to describe the price of an Offer, Invoice, etc.
 *
 * https://schema.org/MonetaryAmount
 */
export declare const MonetaryAmount: Class;
/**
 * MonetaryAmountDistribution
 *
 * A statistical distribution of monetary amounts.
 *
 * https://schema.org/MonetaryAmountDistribution
 */
export declare const MonetaryAmountDistribution: Class;
/**
 * MonetaryGrant
 *
 * A monetary grant.
 *
 * https://schema.org/MonetaryGrant
 */
export declare const MonetaryGrant: Class;
/**
 * MoneyTransfer
 *
 * The act of transferring money from one place to another place. This may occur electronically or physically.
 *
 * https://schema.org/MoneyTransfer
 */
export declare const MoneyTransfer: Class;
/**
 * MortgageLoan
 *
 * A loan in which property or real estate is used as collateral. (A loan securitized against some real estate.)
 *
 * https://schema.org/MortgageLoan
 */
export declare const MortgageLoan: Class;
/**
 * Mosque
 *
 * A mosque.
 *
 * https://schema.org/Mosque
 */
export declare const Mosque: Class;
/**
 * Motel
 *
 * A motel.
 * <br /><br />
 * See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
 *
 *
 * https://schema.org/Motel
 */
export declare const Motel: Class;
/**
 * Motorcycle
 *
 * A motorcycle or motorbike is a single-track, two-wheeled motor vehicle.
 *
 * https://schema.org/Motorcycle
 */
export declare const Motorcycle: Class;
/**
 * MotorcycleDealer
 *
 * A motorcycle dealer.
 *
 * https://schema.org/MotorcycleDealer
 */
export declare const MotorcycleDealer: Class;
/**
 * MotorcycleRepair
 *
 * A motorcycle repair shop.
 *
 * https://schema.org/MotorcycleRepair
 */
export declare const MotorcycleRepair: Class;
/**
 * MotorizedBicycle
 *
 * A motorized bicycle is a bicycle with an attached motor used to power the vehicle, or to assist with pedaling.
 *
 * https://schema.org/MotorizedBicycle
 */
export declare const MotorizedBicycle: Class;
/**
 * Mountain
 *
 * A mountain, like Mount Whitney or Mount Everest.
 *
 * https://schema.org/Mountain
 */
export declare const Mountain: Class;
/**
 * MoveAction
 *
 * The act of an agent relocating to a place.\n\nRelated actions:\n\n* [[TransferAction]]: Unlike TransferAction, the subject of the move is a living Person or Organization rather than an inanimate object.
 *
 * https://schema.org/MoveAction
 */
export declare const MoveAction: Class;
/**
 * Movie
 *
 * A movie.
 *
 * https://schema.org/Movie
 */
export declare const Movie: Class;
/**
 * MovieClip
 *
 * A short segment/part of a movie.
 *
 * https://schema.org/MovieClip
 */
export declare const MovieClip: Class;
/**
 * MovieRentalStore
 *
 * A movie rental store.
 *
 * https://schema.org/MovieRentalStore
 */
export declare const MovieRentalStore: Class;
/**
 * MovieSeries
 *
 * A series of movies. Included movies can be indicated with the hasPart property.
 *
 * https://schema.org/MovieSeries
 */
export declare const MovieSeries: Class;
/**
 * MovieTheater
 *
 * A movie theater.
 *
 * https://schema.org/MovieTheater
 */
export declare const MovieTheater: Class;
/**
 * MovingCompany
 *
 * A moving company.
 *
 * https://schema.org/MovingCompany
 */
export declare const MovingCompany: Class;
/**
 * Muscle
 *
 * A muscle is an anatomical structure consisting of a contractile form of tissue that animals use to effect movement.
 *
 * https://schema.org/Muscle
 */
export declare const Muscle: Class;
/**
 * Museum
 *
 * A museum.
 *
 * https://schema.org/Museum
 */
export declare const Museum: Class;
/**
 * MusicAlbum
 *
 * A collection of music tracks.
 *
 * https://schema.org/MusicAlbum
 */
export declare const MusicAlbum: Class;
/**
 * MusicAlbumProductionType
 *
 * Classification of the album by its type of content: soundtrack, live album, studio album, etc.
 *
 * https://schema.org/MusicAlbumProductionType
 */
export declare const MusicAlbumProductionType: Class;
/**
 * MusicAlbumReleaseType
 *
 * The kind of release which this album is: single, EP or album.
 *
 * https://schema.org/MusicAlbumReleaseType
 */
export declare const MusicAlbumReleaseType: Class;
/**
 * MusicComposition
 *
 * A musical composition.
 *
 * https://schema.org/MusicComposition
 */
export declare const MusicComposition: Class;
/**
 * MusicEvent
 *
 * Event type: Music event.
 *
 * https://schema.org/MusicEvent
 */
export declare const MusicEvent: Class;
/**
 * MusicGroup
 *
 * A musical group, such as a band, an orchestra, or a choir. Can also be a solo musician.
 *
 * https://schema.org/MusicGroup
 */
export declare const MusicGroup: Class;
/**
 * MusicPlaylist
 *
 * A collection of music tracks in playlist form.
 *
 * https://schema.org/MusicPlaylist
 */
export declare const MusicPlaylist: Class;
/**
 * MusicRecording
 *
 * A music recording (track), usually a single song.
 *
 * https://schema.org/MusicRecording
 */
export declare const MusicRecording: Class;
/**
 * MusicRelease
 *
 * A MusicRelease is a specific release of a music album.
 *
 * https://schema.org/MusicRelease
 */
export declare const MusicRelease: Class;
/**
 * MusicReleaseFormatType
 *
 * Format of this release (the type of recording media used, i.e. compact disc, digital media, LP, etc.).
 *
 * https://schema.org/MusicReleaseFormatType
 */
export declare const MusicReleaseFormatType: Class;
/**
 * MusicStore
 *
 * A music store.
 *
 * https://schema.org/MusicStore
 */
export declare const MusicStore: Class;
/**
 * MusicVenue
 *
 * A music venue.
 *
 * https://schema.org/MusicVenue
 */
export declare const MusicVenue: Class;
/**
 * MusicVideoObject
 *
 * A music video file.
 *
 * https://schema.org/MusicVideoObject
 */
export declare const MusicVideoObject: Class;
/**
 * NGO
 *
 * Organization: Non-governmental Organization.
 *
 * https://schema.org/NGO
 */
export declare const NGO: Class;
/**
 * NLNonprofitType
 *
 * NLNonprofitType: Non-profit organization type originating from the Netherlands.
 *
 * https://schema.org/NLNonprofitType
 */
export declare const NLNonprofitType: Class;
/**
 * NailSalon
 *
 * A nail salon.
 *
 * https://schema.org/NailSalon
 */
export declare const NailSalon: Class;
/**
 * Nerve
 *
 * A common pathway for the electrochemical nerve impulses that are transmitted along each of the axons.
 *
 * https://schema.org/Nerve
 */
export declare const Nerve: Class;
/**
 * NewsArticle
 *
 * A NewsArticle is an article whose content reports news, or provides background context and supporting materials for understanding the news.
 *
 * A more detailed overview of [schema.org News markup](/docs/news.html) is also available.
 *
 *
 * https://schema.org/NewsArticle
 */
export declare const NewsArticle: Class;
/**
 * NewsMediaOrganization
 *
 * A News/Media organization such as a newspaper or TV station.
 *
 * https://schema.org/NewsMediaOrganization
 */
export declare const NewsMediaOrganization: Class;
/**
 * Newspaper
 *
 * A publication containing information about varied topics that are pertinent to general information, a geographic area, or a specific subject matter (i.e. business, culture, education). Often published daily.
 *
 * https://schema.org/Newspaper
 */
export declare const Newspaper: Class;
/**
 * NightClub
 *
 * A nightclub or discotheque.
 *
 * https://schema.org/NightClub
 */
export declare const NightClub: Class;
/**
 * NonprofitType
 *
 * NonprofitType enumerates several kinds of official non-profit types of which a non-profit organization can be.
 *
 * https://schema.org/NonprofitType
 */
export declare const NonprofitType: Class;
/**
 * Notary
 *
 * A notary.
 *
 * https://schema.org/Notary
 */
export declare const Notary: Class;
/**
 * NoteDigitalDocument
 *
 * A file containing a note, primarily for the author.
 *
 * https://schema.org/NoteDigitalDocument
 */
export declare const NoteDigitalDocument: Class;
/**
 * Number
 *
 * Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
 * Note that `Number` is a reserved Javascript keyword, and is therefore suffixed by `__workaround`.
 * For a list of reserved keywords, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Keywords.
 *
 * https://schema.org/Number
 */
export declare const Number__workaround: Class;
/**
 * NutritionInformation
 *
 * Nutritional information about the recipe.
 *
 * https://schema.org/NutritionInformation
 */
export declare const NutritionInformation: Class;
/**
 * Observation
 *
 * Instances of the class [[Observation]] are used to specify observations about an entity at a particular time. The principal properties of an [[Observation]] are [[observationAbout]], [[measuredProperty]], [[statType]], [[value] and [[observationDate]]  and [[measuredProperty]]. Some but not all Observations represent a [[QuantitativeValue]]. Quantitative observations can be about a [[StatisticalVariable]], which is an abstract specification about which we can make observations that are grounded at a particular location and time.
 *
 * Observations can also encode a subset of simple RDF-like statements (its observationAbout, a StatisticalVariable, defining the measuredPoperty; its observationAbout property indicating the entity the statement is about, and [[value]] )
 *
 * In the context of a quantitative knowledge graph, typical properties could include [[measuredProperty]], [[observationAbout]], [[observationDate]], [[value]], [[unitCode]], [[unitText]], [[measurementMethod]].
 *
 *
 * https://schema.org/Observation
 */
export declare const Observation: Class;
/**
 * Occupation
 *
 * A profession, may involve prolonged training and/or a formal qualification.
 *
 * https://schema.org/Occupation
 */
export declare const Occupation: Class;
/**
 * OccupationalExperienceRequirements
 *
 * Indicates employment-related experience requirements, e.g. [[monthsOfExperience]].
 *
 * https://schema.org/OccupationalExperienceRequirements
 */
export declare const OccupationalExperienceRequirements: Class;
/**
 * OccupationalTherapy
 *
 * A treatment of people with physical, emotional, or social problems, using purposeful activity to help them overcome or learn to deal with their problems.
 *
 * https://schema.org/OccupationalTherapy
 */
export declare const OccupationalTherapy: Class;
/**
 * OceanBodyOfWater
 *
 * An ocean (for example, the Pacific).
 *
 * https://schema.org/OceanBodyOfWater
 */
export declare const OceanBodyOfWater: Class;
/**
 * Offer
 *
 * An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
 *
 * https://schema.org/Offer
 */
export declare const Offer: Class;
/**
 * OfferCatalog
 *
 * An OfferCatalog is an ItemList that contains related Offers and/or further OfferCatalogs that are offeredBy the same provider.
 *
 * https://schema.org/OfferCatalog
 */
export declare const OfferCatalog: Class;
/**
 * OfferForLease
 *
 * An [[OfferForLease]] in Schema.org represents an [[Offer]] to lease out something, i.e. an [[Offer]] whose
 *   [[businessFunction]] is [lease out](http://purl.org/goodrelations/v1#LeaseOut.). See [Good Relations](https://en.wikipedia.org/wiki/GoodRelations) for
 *   background on the underlying concepts.
 *
 *
 * https://schema.org/OfferForLease
 */
export declare const OfferForLease: Class;
/**
 * OfferForPurchase
 *
 * An [[OfferForPurchase]] in Schema.org represents an [[Offer]] to sell something, i.e. an [[Offer]] whose
 *   [[businessFunction]] is [sell](http://purl.org/goodrelations/v1#Sell.). See [Good Relations](https://en.wikipedia.org/wiki/GoodRelations) for
 *   background on the underlying concepts.
 *
 *
 * https://schema.org/OfferForPurchase
 */
export declare const OfferForPurchase: Class;
/**
 * OfferItemCondition
 *
 * A list of possible conditions for the item.
 *
 * https://schema.org/OfferItemCondition
 */
export declare const OfferItemCondition: Class;
/**
 * OfferShippingDetails
 *
 * OfferShippingDetails represents information about shipping destinations.
 *
 * Multiple of these entities can be used to represent different shipping rates for different destinations:
 *
 * One entity for Alaska/Hawaii. A different one for continental US. A different one for all France.
 *
 * Multiple of these entities can be used to represent different shipping costs and delivery times.
 *
 * Two entities that are identical but differ in rate and time:
 *
 * E.g. Cheaper and slower: $5 in 5-7 days
 * or Fast and expensive: $15 in 1-2 days.
 *
 * https://schema.org/OfferShippingDetails
 */
export declare const OfferShippingDetails: Class;
/**
 * OfficeEquipmentStore
 *
 * An office equipment store.
 *
 * https://schema.org/OfficeEquipmentStore
 */
export declare const OfficeEquipmentStore: Class;
/**
 * OnDemandEvent
 *
 * A publication event, e.g. catch-up TV or radio podcast, during which a program is available on-demand.
 *
 * https://schema.org/OnDemandEvent
 */
export declare const OnDemandEvent: Class;
/**
 * OnlineBusiness
 *
 * A particular online business, either standalone or the online part of a broader organization. Examples include an eCommerce site, an online travel booking site, an online learning site, an online logistics and shipping provider, an online (virtual) doctor, etc.
 *
 * https://schema.org/OnlineBusiness
 */
export declare const OnlineBusiness: Class;
/**
 * OnlineStore
 *
 * An eCommerce site.
 *
 * https://schema.org/OnlineStore
 */
export declare const OnlineStore: Class;
/**
 * OpeningHoursSpecification
 *
 * A structured value providing information about the opening hours of a place or a certain service inside a place.\n\n
 * The place is __open__ if the [[opens]] property is specified, and __closed__ otherwise.\n\nIf the value for the [[closes]] property is less than the value for the [[opens]] property then the hour range is assumed to span over the next day.
 *
 *
 * https://schema.org/OpeningHoursSpecification
 */
export declare const OpeningHoursSpecification: Class;
/**
 * OpinionNewsArticle
 *
 * An [[OpinionNewsArticle]] is a [[NewsArticle]] that primarily expresses opinions rather than journalistic reporting of news and events. For example, a [[NewsArticle]] consisting of a column or [[Blog]]/[[BlogPosting]] entry in the Opinions section of a news publication.
 *
 * https://schema.org/OpinionNewsArticle
 */
export declare const OpinionNewsArticle: Class;
/**
 * Optician
 *
 * A store that sells reading glasses and similar devices for improving vision.
 *
 * https://schema.org/Optician
 */
export declare const Optician: Class;
/**
 * Order
 *
 * An order is a confirmation of a transaction (a receipt), which can contain multiple line items, each represented by an Offer that has been accepted by the customer.
 *
 * https://schema.org/Order
 */
export declare const Order: Class;
/**
 * OrderAction
 *
 * An agent orders an object/product/service to be delivered/sent.
 *
 * https://schema.org/OrderAction
 */
export declare const OrderAction: Class;
/**
 * OrderItem
 *
 * An order item is a line of an order. It includes the quantity and shipping details of a bought offer.
 *
 * https://schema.org/OrderItem
 */
export declare const OrderItem: Class;
/**
 * OrderStatus
 *
 * Enumerated status values for Order.
 *
 * https://schema.org/OrderStatus
 */
export declare const OrderStatus: Class;
/**
 * Organization
 *
 * An organization such as a school, NGO, corporation, club, etc.
 *
 * https://schema.org/Organization
 */
export declare const Organization: Class;
/**
 * OrganizationRole
 *
 * A subclass of Role used to describe roles within organizations.
 *
 * https://schema.org/OrganizationRole
 */
export declare const OrganizationRole: Class;
/**
 * OrganizeAction
 *
 * The act of manipulating/administering/supervising/controlling one or more objects.
 *
 * https://schema.org/OrganizeAction
 */
export declare const OrganizeAction: Class;
/**
 * OutletStore
 *
 * An outlet store.
 *
 * https://schema.org/OutletStore
 */
export declare const OutletStore: Class;
/**
 * OwnershipInfo
 *
 * A structured value providing information about when a certain organization or person owned a certain product.
 *
 * https://schema.org/OwnershipInfo
 */
export declare const OwnershipInfo: Class;
/**
 * PaintAction
 *
 * The act of producing a painting, typically with paint and canvas as instruments.
 *
 * https://schema.org/PaintAction
 */
export declare const PaintAction: Class;
/**
 * Painting
 *
 * A painting.
 *
 * https://schema.org/Painting
 */
export declare const Painting: Class;
/**
 * PalliativeProcedure
 *
 * A medical procedure intended primarily for palliative purposes, aimed at relieving the symptoms of an underlying health condition.
 *
 * https://schema.org/PalliativeProcedure
 */
export declare const PalliativeProcedure: Class;
/**
 * ParcelDelivery
 *
 * The delivery of a parcel either via the postal service or a commercial service.
 *
 * https://schema.org/ParcelDelivery
 */
export declare const ParcelDelivery: Class;
/**
 * ParentAudience
 *
 * A set of characteristics describing parents, who can be interested in viewing some content.
 *
 * https://schema.org/ParentAudience
 */
export declare const ParentAudience: Class;
/**
 * Park
 *
 * A park.
 *
 * https://schema.org/Park
 */
export declare const Park: Class;
/**
 * ParkingFacility
 *
 * A parking lot or other parking facility.
 *
 * https://schema.org/ParkingFacility
 */
export declare const ParkingFacility: Class;
/**
 * PathologyTest
 *
 * A medical test performed by a laboratory that typically involves examination of a tissue sample by a pathologist.
 *
 * https://schema.org/PathologyTest
 */
export declare const PathologyTest: Class;
/**
 * Patient
 *
 * A patient is any person recipient of health care services.
 *
 * https://schema.org/Patient
 */
export declare const Patient: Class;
/**
 * PawnShop
 *
 * A shop that will buy, or lend money against the security of, personal possessions.
 *
 * https://schema.org/PawnShop
 */
export declare const PawnShop: Class;
/**
 * PayAction
 *
 * An agent pays a price to a participant.
 *
 * https://schema.org/PayAction
 */
export declare const PayAction: Class;
/**
 * PaymentCard
 *
 * A payment method using a credit, debit, store or other card to associate the payment with an account.
 *
 * https://schema.org/PaymentCard
 */
export declare const PaymentCard: Class;
/**
 * PaymentChargeSpecification
 *
 * The costs of settling the payment using a particular payment method.
 *
 * https://schema.org/PaymentChargeSpecification
 */
export declare const PaymentChargeSpecification: Class;
/**
 * PaymentMethod
 *
 * A payment method is a standardized procedure for transferring the monetary amount for a purchase. Payment methods are characterized by the legal and technical structures used, and by the organization or group carrying out the transaction.\n\nCommonly used values:\n\n* http://purl.org/goodrelations/v1#ByBankTransferInAdvance\n* http://purl.org/goodrelations/v1#ByInvoice\n* http://purl.org/goodrelations/v1#Cash\n* http://purl.org/goodrelations/v1#CheckInAdvance\n* http://purl.org/goodrelations/v1#COD\n* http://purl.org/goodrelations/v1#DirectDebit\n* http://purl.org/goodrelations/v1#GoogleCheckout\n* http://purl.org/goodrelations/v1#PayPal\n* http://purl.org/goodrelations/v1#PaySwarm
 *
 *
 * https://schema.org/PaymentMethod
 */
export declare const PaymentMethod: Class;
/**
 * PaymentService
 *
 * A Service to transfer funds from a person or organization to a beneficiary person or organization.
 *
 * https://schema.org/PaymentService
 */
export declare const PaymentService: Class;
/**
 * PaymentStatusType
 *
 * A specific payment status. For example, PaymentDue, PaymentComplete, etc.
 *
 * https://schema.org/PaymentStatusType
 */
export declare const PaymentStatusType: Class;
/**
 * PeopleAudience
 *
 * A set of characteristics belonging to people, e.g. who compose an item's target audience.
 *
 * https://schema.org/PeopleAudience
 */
export declare const PeopleAudience: Class;
/**
 * PerformAction
 *
 * The act of participating in performance arts.
 *
 * https://schema.org/PerformAction
 */
export declare const PerformAction: Class;
/**
 * PerformanceRole
 *
 * A PerformanceRole is a Role that some entity places with regard to a theatrical performance, e.g. in a Movie, TVSeries etc.
 *
 * https://schema.org/PerformanceRole
 */
export declare const PerformanceRole: Class;
/**
 * PerformingArtsTheater
 *
 * A theater or other performing art center.
 *
 * https://schema.org/PerformingArtsTheater
 */
export declare const PerformingArtsTheater: Class;
/**
 * PerformingGroup
 *
 * A performance group, such as a band, an orchestra, or a circus.
 *
 * https://schema.org/PerformingGroup
 */
export declare const PerformingGroup: Class;
/**
 * Periodical
 *
 * A publication in any medium issued in successive parts bearing numerical or chronological designations and intended to continue indefinitely, such as a magazine, scholarly journal, or newspaper.\n\nSee also [blog post](http://blog.schema.org/2014/09/schemaorg-support-for-bibliographic_2.html).
 *
 * https://schema.org/Periodical
 */
export declare const Periodical: Class;
/**
 * Permit
 *
 * A permit issued by an organization, e.g. a parking pass.
 *
 * https://schema.org/Permit
 */
export declare const Permit: Class;
/**
 * Person
 *
 * A person (alive, dead, undead, or fictional).
 *
 * https://schema.org/Person
 */
export declare const Person: Class;
/**
 * PetStore
 *
 * A pet store.
 *
 * https://schema.org/PetStore
 */
export declare const PetStore: Class;
/**
 * Pharmacy
 *
 * A pharmacy or drugstore.
 *
 * https://schema.org/Pharmacy
 */
export declare const Pharmacy: Class;
/**
 * Photograph
 *
 * A photograph.
 *
 * https://schema.org/Photograph
 */
export declare const Photograph: Class;
/**
 * PhotographAction
 *
 * The act of capturing still images of objects using a camera.
 *
 * https://schema.org/PhotographAction
 */
export declare const PhotographAction: Class;
/**
 * PhysicalActivity
 *
 * Any bodily activity that enhances or maintains physical fitness and overall health and wellness. Includes activity that is part of daily living and routine, structured exercise, and exercise prescribed as part of a medical treatment or recovery plan.
 *
 * https://schema.org/PhysicalActivity
 */
export declare const PhysicalActivity: Class;
/**
 * PhysicalActivityCategory
 *
 * Categories of physical activity, organized by physiologic classification.
 *
 * https://schema.org/PhysicalActivityCategory
 */
export declare const PhysicalActivityCategory: Class;
/**
 * PhysicalExam
 *
 * A type of physical examination of a patient performed by a physician.
 *
 * https://schema.org/PhysicalExam
 */
export declare const PhysicalExam: Class;
/**
 * PhysicalTherapy
 *
 * A process of progressive physical care and rehabilitation aimed at improving a health condition.
 *
 * https://schema.org/PhysicalTherapy
 */
export declare const PhysicalTherapy: Class;
/**
 * Physician
 *
 * A doctor's office.
 *
 * https://schema.org/Physician
 */
export declare const Physician: Class;
/**
 * Place
 *
 * Entities that have a somewhat fixed, physical extension.
 *
 * https://schema.org/Place
 */
export declare const Place: Class;
/**
 * PlaceOfWorship
 *
 * Place of worship, such as a church, synagogue, or mosque.
 *
 * https://schema.org/PlaceOfWorship
 */
export declare const PlaceOfWorship: Class;
/**
 * PlanAction
 *
 * The act of planning the execution of an event/task/action/reservation/plan to a future date.
 *
 * https://schema.org/PlanAction
 */
export declare const PlanAction: Class;
/**
 * Play
 *
 * A play is a form of literature, usually consisting of dialogue between characters, intended for theatrical performance rather than just reading. Note: A performance of a Play would be a [[TheaterEvent]] or [[BroadcastEvent]] - the *Play* being the [[workPerformed]].
 *
 * https://schema.org/Play
 */
export declare const Play: Class;
/**
 * PlayAction
 *
 * The act of playing/exercising/training/performing for enjoyment, leisure, recreation, competition or exercise.\n\nRelated actions:\n\n* [[ListenAction]]: Unlike ListenAction (which is under ConsumeAction), PlayAction refers to performing for an audience or at an event, rather than consuming music.\n* [[WatchAction]]: Unlike WatchAction (which is under ConsumeAction), PlayAction refers to showing/displaying for an audience or at an event, rather than consuming visual content.
 *
 * https://schema.org/PlayAction
 */
export declare const PlayAction: Class;
/**
 * PlayGameAction
 *
 * The act of playing a video game.
 *
 * https://schema.org/PlayGameAction
 */
export declare const PlayGameAction: Class;
/**
 * Playground
 *
 * A playground.
 *
 * https://schema.org/Playground
 */
export declare const Playground: Class;
/**
 * Plumber
 *
 * A plumbing service.
 *
 * https://schema.org/Plumber
 */
export declare const Plumber: Class;
/**
 * PodcastEpisode
 *
 * A single episode of a podcast series.
 *
 * https://schema.org/PodcastEpisode
 */
export declare const PodcastEpisode: Class;
/**
 * PodcastSeason
 *
 * A single season of a podcast. Many podcasts do not break down into separate seasons. In that case, PodcastSeries should be used.
 *
 * https://schema.org/PodcastSeason
 */
export declare const PodcastSeason: Class;
/**
 * PodcastSeries
 *
 * A podcast is an episodic series of digital audio or video files which a user can download and listen to.
 *
 * https://schema.org/PodcastSeries
 */
export declare const PodcastSeries: Class;
/**
 * PoliceStation
 *
 * A police station.
 *
 * https://schema.org/PoliceStation
 */
export declare const PoliceStation: Class;
/**
 * PoliticalParty
 *
 * Organization: Political Party.
 *
 * https://schema.org/PoliticalParty
 */
export declare const PoliticalParty: Class;
/**
 * Pond
 *
 * A pond.
 *
 * https://schema.org/Pond
 */
export declare const Pond: Class;
/**
 * PostOffice
 *
 * A post office.
 *
 * https://schema.org/PostOffice
 */
export declare const PostOffice: Class;
/**
 * PostalAddress
 *
 * The mailing address.
 *
 * https://schema.org/PostalAddress
 */
export declare const PostalAddress: Class;
/**
 * PostalCodeRangeSpecification
 *
 * Indicates a range of postal codes, usually defined as the set of valid codes between [[postalCodeBegin]] and [[postalCodeEnd]], inclusively.
 *
 * https://schema.org/PostalCodeRangeSpecification
 */
export declare const PostalCodeRangeSpecification: Class;
/**
 * Poster
 *
 * A large, usually printed placard, bill, or announcement, often illustrated, that is posted to advertise or publicize something.
 *
 * https://schema.org/Poster
 */
export declare const Poster: Class;
/**
 * PreOrderAction
 *
 * An agent orders a (not yet released) object/product/service to be delivered/sent.
 *
 * https://schema.org/PreOrderAction
 */
export declare const PreOrderAction: Class;
/**
 * PrependAction
 *
 * The act of inserting at the beginning if an ordered collection.
 *
 * https://schema.org/PrependAction
 */
export declare const PrependAction: Class;
/**
 * Preschool
 *
 * A preschool.
 *
 * https://schema.org/Preschool
 */
export declare const Preschool: Class;
/**
 * PresentationDigitalDocument
 *
 * A file containing slides or used for a presentation.
 *
 * https://schema.org/PresentationDigitalDocument
 */
export declare const PresentationDigitalDocument: Class;
/**
 * PreventionIndication
 *
 * An indication for preventing an underlying condition, symptom, etc.
 *
 * https://schema.org/PreventionIndication
 */
export declare const PreventionIndication: Class;
/**
 * PriceComponentTypeEnumeration
 *
 * Enumerates different price components that together make up the total price for an offered product.
 *
 * https://schema.org/PriceComponentTypeEnumeration
 */
export declare const PriceComponentTypeEnumeration: Class;
/**
 * PriceSpecification
 *
 * A structured value representing a price or price range. Typically, only the subclasses of this type are used for markup. It is recommended to use [[MonetaryAmount]] to describe independent amounts of money such as a salary, credit card limits, etc.
 *
 * https://schema.org/PriceSpecification
 */
export declare const PriceSpecification: Class;
/**
 * PriceTypeEnumeration
 *
 * Enumerates different price types, for example list price, invoice price, and sale price.
 *
 * https://schema.org/PriceTypeEnumeration
 */
export declare const PriceTypeEnumeration: Class;
/**
 * Product
 *
 * Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
 *
 * https://schema.org/Product
 */
export declare const Product: Class;
/**
 * ProductCollection
 *
 * A set of products (either [[ProductGroup]]s or specific variants) that are listed together e.g. in an [[Offer]].
 *
 * https://schema.org/ProductCollection
 */
export declare const ProductCollection: Class;
/**
 * ProductGroup
 *
 * A ProductGroup represents a group of [[Product]]s that vary only in certain well-described ways, such as by [[size]], [[color]], [[material]] etc.
 *
 * While a ProductGroup itself is not directly offered for sale, the various varying products that it represents can be. The ProductGroup serves as a prototype or template, standing in for all of the products who have an [[isVariantOf]] relationship to it. As such, properties (including additional types) can be applied to the ProductGroup to represent characteristics shared by each of the (possibly very many) variants. Properties that reference a ProductGroup are not included in this mechanism; neither are the following specific properties [[variesBy]], [[hasVariant]], [[url]].
 *
 * https://schema.org/ProductGroup
 */
export declare const ProductGroup: Class;
/**
 * ProductModel
 *
 * A datasheet or vendor specification of a product (in the sense of a prototypical description).
 *
 * https://schema.org/ProductModel
 */
export declare const ProductModel: Class;
/**
 * ProductReturnEnumeration
 *
 * ProductReturnEnumeration enumerates several kinds of product return policy. Note that this structure may not capture all aspects of the policy.
 *
 * https://schema.org/ProductReturnEnumeration
 */
export declare const ProductReturnEnumeration: Class;
/**
 * ProductReturnPolicy
 *
 * A ProductReturnPolicy provides information about product return policies associated with an [[Organization]] or [[Product]].
 *
 * https://schema.org/ProductReturnPolicy
 */
export declare const ProductReturnPolicy: Class;
/**
 * ProfessionalService
 *
 * Original definition: "provider of professional services."\n\nThe general [[ProfessionalService]] type for local businesses was deprecated due to confusion with [[Service]]. For reference, the types that it included were: [[Dentist]],
 *         [[AccountingService]], [[Attorney]], [[Notary]], as well as types for several kinds of [[HomeAndConstructionBusiness]]: [[Electrician]], [[GeneralContractor]],
 *         [[HousePainter]], [[Locksmith]], [[Plumber]], [[RoofingContractor]]. [[LegalService]] was introduced as a more inclusive supertype of [[Attorney]].
 *
 * https://schema.org/ProfessionalService
 */
export declare const ProfessionalService: Class;
/**
 * ProfilePage
 *
 * Web page type: Profile page.
 *
 * https://schema.org/ProfilePage
 */
export declare const ProfilePage: Class;
/**
 * ProgramMembership
 *
 * Used to describe membership in a loyalty programs (e.g. "StarAliance"), traveler clubs (e.g. "AAA"), purchase clubs ("Safeway Club"), etc.
 *
 * https://schema.org/ProgramMembership
 */
export declare const ProgramMembership: Class;
/**
 * Project
 *
 * An enterprise (potentially individual but typically collaborative), planned to achieve a particular aim.
 * Use properties from [[Organization]], [[subOrganization]]/[[parentOrganization]] to indicate project sub-structures.
 *
 *
 * https://schema.org/Project
 */
export declare const Project: Class;
/**
 * PronounceableText
 *
 * Data type: PronounceableText.
 *
 * https://schema.org/PronounceableText
 */
export declare const PronounceableText: Class;
/**
 * Property
 *
 * A property, used to indicate attributes and relationships of some Thing; equivalent to rdf:Property.
 *
 * https://schema.org/Property
 */
export declare const Property: Class;
/**
 * PropertyValue
 *
 * A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.
 *
 *
 * https://schema.org/PropertyValue
 */
export declare const PropertyValue: Class;
/**
 * PropertyValueSpecification
 *
 * A Property value specification.
 *
 * https://schema.org/PropertyValueSpecification
 */
export declare const PropertyValueSpecification: Class;
/**
 * Protein
 *
 * Protein is here used in its widest possible definition, as classes of amino acid based molecules. Amyloid-beta Protein in human (UniProt P05067), eukaryota (e.g. an OrthoDB group) or even a single molecule that one can point to are all of type :Protein. A protein can thus be a subclass of another protein, e.g. :Protein as a UniProt record can have multiple isoforms inside it which would also be :Protein. They can be imagined, synthetic, hypothetical or naturally occurring.
 *
 * https://schema.org/Protein
 */
export declare const Protein: Class;
/**
 * PsychologicalTreatment
 *
 * A process of care relying upon counseling, dialogue and communication  aimed at improving a mental health condition without use of drugs.
 *
 * https://schema.org/PsychologicalTreatment
 */
export declare const PsychologicalTreatment: Class;
/**
 * PublicSwimmingPool
 *
 * A public swimming pool.
 *
 * https://schema.org/PublicSwimmingPool
 */
export declare const PublicSwimmingPool: Class;
/**
 * PublicToilet
 *
 * A public toilet is a room or small building containing one or more toilets (and possibly also urinals) which is available for use by the general public, or by customers or employees of certain businesses.
 *
 * https://schema.org/PublicToilet
 */
export declare const PublicToilet: Class;
/**
 * PublicationEvent
 *
 * A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type, e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
 *
 * https://schema.org/PublicationEvent
 */
export declare const PublicationEvent: Class;
/**
 * PublicationIssue
 *
 * A part of a successively published publication such as a periodical or publication volume, often numbered, usually containing a grouping of works such as articles.\n\nSee also [blog post](http://blog.schema.org/2014/09/schemaorg-support-for-bibliographic_2.html).
 *
 * https://schema.org/PublicationIssue
 */
export declare const PublicationIssue: Class;
/**
 * PublicationVolume
 *
 * A part of a successively published publication such as a periodical or multi-volume work, often numbered. It may represent a time span, such as a year.\n\nSee also [blog post](http://blog.schema.org/2014/09/schemaorg-support-for-bibliographic_2.html).
 *
 * https://schema.org/PublicationVolume
 */
export declare const PublicationVolume: Class;
/**
 * QAPage
 *
 * A QAPage is a WebPage focussed on a specific Question and its Answer(s), e.g. in a question answering site or documenting Frequently Asked Questions (FAQs).
 *
 * https://schema.org/QAPage
 */
export declare const QAPage: Class;
/**
 * QualitativeValue
 *
 * A predefined value for a product characteristic, e.g. the power cord plug type 'US' or the garment sizes 'S', 'M', 'L', and 'XL'.
 *
 * https://schema.org/QualitativeValue
 */
export declare const QualitativeValue: Class;
/**
 * QuantitativeValue
 *
 *  A point value or interval for product characteristics and other purposes.
 *
 * https://schema.org/QuantitativeValue
 */
export declare const QuantitativeValue: Class;
/**
 * QuantitativeValueDistribution
 *
 * A statistical distribution of values.
 *
 * https://schema.org/QuantitativeValueDistribution
 */
export declare const QuantitativeValueDistribution: Class;
/**
 * Quantity
 *
 * Quantities such as distance, time, mass, weight, etc. Particular instances of say Mass are entities like '3 kg' or '4 milligrams'.
 *
 * https://schema.org/Quantity
 */
export declare const Quantity: Class;
/**
 * Question
 *
 * A specific question - e.g. from a user seeking answers online, or collected in a Frequently Asked Questions (FAQ) document.
 *
 * https://schema.org/Question
 */
export declare const Question: Class;
/**
 * Quiz
 *
 * Quiz: A test of knowledge, skills and abilities.
 *
 * https://schema.org/Quiz
 */
export declare const Quiz: Class;
/**
 * Quotation
 *
 * A quotation. Often but not necessarily from some written work, attributable to a real world author and - if associated with a fictional character - to any fictional Person. Use [[isBasedOn]] to link to source/origin. The [[recordedIn]] property can be used to reference a Quotation from an [[Event]].
 *
 * https://schema.org/Quotation
 */
export declare const Quotation: Class;
/**
 * QuoteAction
 *
 * An agent quotes/estimates/appraises an object/product/service with a price at a location/store.
 *
 * https://schema.org/QuoteAction
 */
export declare const QuoteAction: Class;
/**
 * RVPark
 *
 * A place offering space for "Recreational Vehicles", Caravans, mobile homes and the like.
 *
 * https://schema.org/RVPark
 */
export declare const RVPark: Class;
/**
 * RadiationTherapy
 *
 * A process of care using radiation aimed at improving a health condition.
 *
 * https://schema.org/RadiationTherapy
 */
export declare const RadiationTherapy: Class;
/**
 * RadioBroadcastService
 *
 * A delivery service through which radio content is provided via broadcast over the air or online.
 *
 * https://schema.org/RadioBroadcastService
 */
export declare const RadioBroadcastService: Class;
/**
 * RadioChannel
 *
 * A unique instance of a radio BroadcastService on a CableOrSatelliteService lineup.
 *
 * https://schema.org/RadioChannel
 */
export declare const RadioChannel: Class;
/**
 * RadioClip
 *
 * A short radio program or a segment/part of a radio program.
 *
 * https://schema.org/RadioClip
 */
export declare const RadioClip: Class;
/**
 * RadioEpisode
 *
 * A radio episode which can be part of a series or season.
 *
 * https://schema.org/RadioEpisode
 */
export declare const RadioEpisode: Class;
/**
 * RadioSeason
 *
 * Season dedicated to radio broadcast and associated online delivery.
 *
 * https://schema.org/RadioSeason
 */
export declare const RadioSeason: Class;
/**
 * RadioSeries
 *
 * CreativeWorkSeries dedicated to radio broadcast and associated online delivery.
 *
 * https://schema.org/RadioSeries
 */
export declare const RadioSeries: Class;
/**
 * RadioStation
 *
 * A radio station.
 *
 * https://schema.org/RadioStation
 */
export declare const RadioStation: Class;
/**
 * Rating
 *
 * A rating is an evaluation on a numeric scale, such as 1 to 5 stars.
 *
 * https://schema.org/Rating
 */
export declare const Rating: Class;
/**
 * ReactAction
 *
 * The act of responding instinctively and emotionally to an object, expressing a sentiment.
 *
 * https://schema.org/ReactAction
 */
export declare const ReactAction: Class;
/**
 * ReadAction
 *
 * The act of consuming written content.
 *
 * https://schema.org/ReadAction
 */
export declare const ReadAction: Class;
/**
 * RealEstateAgent
 *
 * A real-estate agent.
 *
 * https://schema.org/RealEstateAgent
 */
export declare const RealEstateAgent: Class;
/**
 * RealEstateListing
 *
 * A [[RealEstateListing]] is a listing that describes one or more real-estate [[Offer]]s (whose [[businessFunction]] is typically to lease out, or to sell).
 *   The [[RealEstateListing]] type itself represents the overall listing, as manifested in some [[WebPage]].
 *
 *
 * https://schema.org/RealEstateListing
 */
export declare const RealEstateListing: Class;
/**
 * ReceiveAction
 *
 * The act of physically/electronically taking delivery of an object that has been transferred from an origin to a destination. Reciprocal of SendAction.\n\nRelated actions:\n\n* [[SendAction]]: The reciprocal of ReceiveAction.\n* [[TakeAction]]: Unlike TakeAction, ReceiveAction does not imply that the ownership has been transferred (e.g. I can receive a package, but it does not mean the package is now mine).
 *
 * https://schema.org/ReceiveAction
 */
export declare const ReceiveAction: Class;
/**
 * Recipe
 *
 * A recipe. For dietary restrictions covered by the recipe, a few common restrictions are enumerated via [[suitableForDiet]]. The [[keywords]] property can also be used to add more detail.
 *
 * https://schema.org/Recipe
 */
export declare const Recipe: Class;
/**
 * Recommendation
 *
 * [[Recommendation]] is a type of [[Review]] that suggests or proposes something as the best option or best course of action. Recommendations may be for products or services, or other concrete things, as in the case of a ranked list or product guide. A [[Guide]] may list multiple recommendations for different categories. For example, in a [[Guide]] about which TVs to buy, the author may have several [[Recommendation]]s.
 *
 * https://schema.org/Recommendation
 */
export declare const Recommendation: Class;
/**
 * RecommendedDoseSchedule
 *
 * A recommended dosing schedule for a drug or supplement as prescribed or recommended by an authority or by the drug/supplement's manufacturer. Capture the recommending authority in the recognizingAuthority property of MedicalEntity.
 *
 * https://schema.org/RecommendedDoseSchedule
 */
export declare const RecommendedDoseSchedule: Class;
/**
 * RecyclingCenter
 *
 * A recycling center.
 *
 * https://schema.org/RecyclingCenter
 */
export declare const RecyclingCenter: Class;
/**
 * RefundTypeEnumeration
 *
 * Enumerates several kinds of product return refund types.
 *
 * https://schema.org/RefundTypeEnumeration
 */
export declare const RefundTypeEnumeration: Class;
/**
 * RegisterAction
 *
 * The act of registering to be a user of a service, product or web page.\n\nRelated actions:\n\n* [[JoinAction]]: Unlike JoinAction, RegisterAction implies you are registering to be a user of a service, *not* a group/team of people.\n* [[FollowAction]]: Unlike FollowAction, RegisterAction doesn't imply that the agent is expecting to poll for updates from the object.\n* [[SubscribeAction]]: Unlike SubscribeAction, RegisterAction doesn't imply that the agent is expecting updates from the object.
 *
 * https://schema.org/RegisterAction
 */
export declare const RegisterAction: Class;
/**
 * RejectAction
 *
 * The act of rejecting to/adopting an object.\n\nRelated actions:\n\n* [[AcceptAction]]: The antonym of RejectAction.
 *
 * https://schema.org/RejectAction
 */
export declare const RejectAction: Class;
/**
 * RentAction
 *
 * The act of giving money in return for temporary use, but not ownership, of an object such as a vehicle or property. For example, an agent rents a property from a landlord in exchange for a periodic payment.
 *
 * https://schema.org/RentAction
 */
export declare const RentAction: Class;
/**
 * RentalCarReservation
 *
 * A reservation for a rental car.\n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations.
 *
 * https://schema.org/RentalCarReservation
 */
export declare const RentalCarReservation: Class;
/**
 * RepaymentSpecification
 *
 * A structured value representing repayment.
 *
 * https://schema.org/RepaymentSpecification
 */
export declare const RepaymentSpecification: Class;
/**
 * ReplaceAction
 *
 * The act of editing a recipient by replacing an old object with a new object.
 *
 * https://schema.org/ReplaceAction
 */
export declare const ReplaceAction: Class;
/**
 * ReplyAction
 *
 * The act of responding to a question/message asked/sent by the object. Related to [[AskAction]].\n\nRelated actions:\n\n* [[AskAction]]: Appears generally as an origin of a ReplyAction.
 *
 * https://schema.org/ReplyAction
 */
export declare const ReplyAction: Class;
/**
 * Report
 *
 * A Report generated by governmental or non-governmental organization.
 *
 * https://schema.org/Report
 */
export declare const Report: Class;
/**
 * ReportageNewsArticle
 *
 * The [[ReportageNewsArticle]] type is a subtype of [[NewsArticle]] representing
 *  news articles which are the result of journalistic news reporting conventions.
 *
 * In practice many news publishers produce a wide variety of article types, many of which might be considered a [[NewsArticle]] but not a [[ReportageNewsArticle]]. For example, opinion pieces, reviews, analysis, sponsored or satirical articles, or articles that combine several of these elements.
 *
 * The [[ReportageNewsArticle]] type is based on a stricter ideal for "news" as a work of journalism, with articles based on factual information either observed or verified by the author, or reported and verified from knowledgeable sources.  This often includes perspectives from multiple viewpoints on a particular issue (distinguishing news reports from public relations or propaganda).  News reports in the [[ReportageNewsArticle]] sense de-emphasize the opinion of the author, with commentary and value judgements typically expressed elsewhere.
 *
 * A [[ReportageNewsArticle]] which goes deeper into analysis can also be marked with an additional type of [[AnalysisNewsArticle]].
 *
 *
 * https://schema.org/ReportageNewsArticle
 */
export declare const ReportageNewsArticle: Class;
/**
 * ReportedDoseSchedule
 *
 * A patient-reported or observed dosing schedule for a drug or supplement.
 *
 * https://schema.org/ReportedDoseSchedule
 */
export declare const ReportedDoseSchedule: Class;
/**
 * ResearchOrganization
 *
 * A Research Organization (e.g. scientific institute, research company).
 *
 * https://schema.org/ResearchOrganization
 */
export declare const ResearchOrganization: Class;
/**
 * ResearchProject
 *
 * A Research project.
 *
 * https://schema.org/ResearchProject
 */
export declare const ResearchProject: Class;
/**
 * Researcher
 *
 * Researchers.
 *
 * https://schema.org/Researcher
 */
export declare const Researcher: Class;
/**
 * Reservation
 *
 * Describes a reservation for travel, dining or an event. Some reservations require tickets. \n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, restaurant reservations, flights, or rental cars, use [[Offer]].
 *
 * https://schema.org/Reservation
 */
export declare const Reservation: Class;
/**
 * ReservationPackage
 *
 * A group of multiple reservations with common values for all sub-reservations.
 *
 * https://schema.org/ReservationPackage
 */
export declare const ReservationPackage: Class;
/**
 * ReservationStatusType
 *
 * Enumerated status values for Reservation.
 *
 * https://schema.org/ReservationStatusType
 */
export declare const ReservationStatusType: Class;
/**
 * ReserveAction
 *
 * Reserving a concrete object.\n\nRelated actions:\n\n* [[ScheduleAction]]: Unlike ScheduleAction, ReserveAction reserves concrete objects (e.g. a table, a hotel) towards a time slot / spatial allocation.
 *
 * https://schema.org/ReserveAction
 */
export declare const ReserveAction: Class;
/**
 * Reservoir
 *
 * A reservoir of water, typically an artificially created lake, like the Lake Kariba reservoir.
 *
 * https://schema.org/Reservoir
 */
export declare const Reservoir: Class;
/**
 * Residence
 *
 * The place where a person lives.
 *
 * https://schema.org/Residence
 */
export declare const Residence: Class;
/**
 * Resort
 *
 * A resort is a place used for relaxation or recreation, attracting visitors for holidays or vacations. Resorts are places, towns or sometimes commercial establishments operated by a single company (source: Wikipedia, the free encyclopedia, see <a href="http://en.wikipedia.org/wiki/Resort">http://en.wikipedia.org/wiki/Resort</a>).
 * <br /><br />
 * See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
 *
 *
 * https://schema.org/Resort
 */
export declare const Resort: Class;
/**
 * Restaurant
 *
 * A restaurant.
 *
 * https://schema.org/Restaurant
 */
export declare const Restaurant: Class;
/**
 * RestrictedDiet
 *
 * A diet restricted to certain foods or preparations for cultural, religious, health or lifestyle reasons.
 *
 * https://schema.org/RestrictedDiet
 */
export declare const RestrictedDiet: Class;
/**
 * ResumeAction
 *
 * The act of resuming a device or application which was formerly paused (e.g. resume music playback or resume a timer).
 *
 * https://schema.org/ResumeAction
 */
export declare const ResumeAction: Class;
/**
 * ReturnAction
 *
 * The act of returning to the origin that which was previously received (concrete objects) or taken (ownership).
 *
 * https://schema.org/ReturnAction
 */
export declare const ReturnAction: Class;
/**
 * ReturnFeesEnumeration
 *
 * Enumerates several kinds of policies for product return fees.
 *
 * https://schema.org/ReturnFeesEnumeration
 */
export declare const ReturnFeesEnumeration: Class;
/**
 * ReturnLabelSourceEnumeration
 *
 * Enumerates several types of return labels for product returns.
 *
 * https://schema.org/ReturnLabelSourceEnumeration
 */
export declare const ReturnLabelSourceEnumeration: Class;
/**
 * ReturnMethodEnumeration
 *
 * Enumerates several types of product return methods.
 *
 * https://schema.org/ReturnMethodEnumeration
 */
export declare const ReturnMethodEnumeration: Class;
/**
 * Review
 *
 * A review of an item - for example, of a restaurant, movie, or store.
 *
 * https://schema.org/Review
 */
export declare const Review: Class;
/**
 * ReviewAction
 *
 * The act of producing a balanced opinion about the object for an audience. An agent reviews an object with participants resulting in a review.
 *
 * https://schema.org/ReviewAction
 */
export declare const ReviewAction: Class;
/**
 * ReviewNewsArticle
 *
 * A [[NewsArticle]] and [[CriticReview]] providing a professional critic's assessment of a service, product, performance, or artistic or literary work.
 *
 * https://schema.org/ReviewNewsArticle
 */
export declare const ReviewNewsArticle: Class;
/**
 * RiverBodyOfWater
 *
 * A river (for example, the broad majestic Shannon).
 *
 * https://schema.org/RiverBodyOfWater
 */
export declare const RiverBodyOfWater: Class;
/**
 * Role
 *
 * Represents additional information about a relationship or property. For example a Role can be used to say that a 'member' role linking some SportsTeam to a player occurred during a particular time period. Or that a Person's 'actor' role in a Movie was for some particular characterName. Such properties can be attached to a Role entity, which is then associated with the main entities using ordinary properties like 'member' or 'actor'.\n\nSee also [blog post](http://blog.schema.org/2014/06/introducing-role.html).
 *
 * https://schema.org/Role
 */
export declare const Role: Class;
/**
 * RoofingContractor
 *
 * A roofing contractor.
 *
 * https://schema.org/RoofingContractor
 */
export declare const RoofingContractor: Class;
/**
 * Room
 *
 * A room is a distinguishable space within a structure, usually separated from other spaces by interior walls (source: Wikipedia, the free encyclopedia, see <a href="http://en.wikipedia.org/wiki/Room">http://en.wikipedia.org/wiki/Room</a>).
 * <br /><br />
 * See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
 *
 *
 * https://schema.org/Room
 */
export declare const Room: Class;
/**
 * RsvpAction
 *
 * The act of notifying an event organizer as to whether you expect to attend the event.
 *
 * https://schema.org/RsvpAction
 */
export declare const RsvpAction: Class;
/**
 * RsvpResponseType
 *
 * RsvpResponseType is an enumeration type whose instances represent responding to an RSVP request.
 *
 * https://schema.org/RsvpResponseType
 */
export declare const RsvpResponseType: Class;
/**
 * SaleEvent
 *
 * Event type: Sales event.
 *
 * https://schema.org/SaleEvent
 */
export declare const SaleEvent: Class;
/**
 * SatiricalArticle
 *
 * An [[Article]] whose content is primarily [[satirical]](https://en.wikipedia.org/wiki/Satire) in nature, i.e. unlikely to be literally true. A satirical article is sometimes but not necessarily also a [[NewsArticle]]. [[ScholarlyArticle]]s are also sometimes satirized.
 *
 * https://schema.org/SatiricalArticle
 */
export declare const SatiricalArticle: Class;
/**
 * Schedule
 *
 * A schedule defines a repeating time period used to describe a regularly occurring [[Event]]. At a minimum a schedule will specify [[repeatFrequency]] which describes the interval between occurrences of the event. Additional information can be provided to specify the schedule more precisely.
 *       This includes identifying the day(s) of the week or month when the recurring event will take place, in addition to its start and end time. Schedules may also
 *       have start and end dates to indicate when they are active, e.g. to define a limited calendar of events.
 *
 * https://schema.org/Schedule
 */
export declare const Schedule: Class;
/**
 * ScheduleAction
 *
 * Scheduling future actions, events, or tasks.\n\nRelated actions:\n\n* [[ReserveAction]]: Unlike ReserveAction, ScheduleAction allocates future actions (e.g. an event, a task, etc) towards a time slot / spatial allocation.
 *
 * https://schema.org/ScheduleAction
 */
export declare const ScheduleAction: Class;
/**
 * ScholarlyArticle
 *
 * A scholarly article.
 *
 * https://schema.org/ScholarlyArticle
 */
export declare const ScholarlyArticle: Class;
/**
 * School
 *
 * A school.
 *
 * https://schema.org/School
 */
export declare const School: Class;
/**
 * SchoolDistrict
 *
 * A School District is an administrative area for the administration of schools.
 *
 * https://schema.org/SchoolDistrict
 */
export declare const SchoolDistrict: Class;
/**
 * ScreeningEvent
 *
 * A screening of a movie or other video.
 *
 * https://schema.org/ScreeningEvent
 */
export declare const ScreeningEvent: Class;
/**
 * Sculpture
 *
 * A piece of sculpture.
 *
 * https://schema.org/Sculpture
 */
export declare const Sculpture: Class;
/**
 * SeaBodyOfWater
 *
 * A sea (for example, the Caspian sea).
 *
 * https://schema.org/SeaBodyOfWater
 */
export declare const SeaBodyOfWater: Class;
/**
 * SearchAction
 *
 * The act of searching for an object.\n\nRelated actions:\n\n* [[FindAction]]: SearchAction generally leads to a FindAction, but not necessarily.
 *
 * https://schema.org/SearchAction
 */
export declare const SearchAction: Class;
/**
 * SearchRescueOrganization
 *
 * A Search and Rescue organization of some kind.
 *
 * https://schema.org/SearchRescueOrganization
 */
export declare const SearchRescueOrganization: Class;
/**
 * SearchResultsPage
 *
 * Web page type: Search results page.
 *
 * https://schema.org/SearchResultsPage
 */
export declare const SearchResultsPage: Class;
/**
 * Season
 *
 * A media season, e.g. TV, radio, video game etc.
 *
 * https://schema.org/Season
 */
export declare const Season: Class;
/**
 * Seat
 *
 * Used to describe a seat, such as a reserved seat in an event reservation.
 *
 * https://schema.org/Seat
 */
export declare const Seat: Class;
/**
 * SeekToAction
 *
 * This is the [[Action]] of navigating to a specific [[startOffset]] timestamp within a [[VideoObject]], typically represented with a URL template structure.
 *
 * https://schema.org/SeekToAction
 */
export declare const SeekToAction: Class;
/**
 * SelfStorage
 *
 * A self-storage facility.
 *
 * https://schema.org/SelfStorage
 */
export declare const SelfStorage: Class;
/**
 * SellAction
 *
 * The act of taking money from a buyer in exchange for goods or services rendered. An agent sells an object, product, or service to a buyer for a price. Reciprocal of BuyAction.
 *
 * https://schema.org/SellAction
 */
export declare const SellAction: Class;
/**
 * SendAction
 *
 * The act of physically/electronically dispatching an object for transfer from an origin to a destination. Related actions:\n\n* [[ReceiveAction]]: The reciprocal of SendAction.\n* [[GiveAction]]: Unlike GiveAction, SendAction does not imply the transfer of ownership (e.g. I can send you my laptop, but I'm not necessarily giving it to you).
 *
 * https://schema.org/SendAction
 */
export declare const SendAction: Class;
/**
 * Series
 *
 * A Series in schema.org is a group of related items, typically but not necessarily of the same kind. See also [[CreativeWorkSeries]], [[EventSeries]].
 *
 * https://schema.org/Series
 */
export declare const Series: Class;
/**
 * Service
 *
 * A service provided by an organization, e.g. delivery service, print services, etc.
 *
 * https://schema.org/Service
 */
export declare const Service: Class;
/**
 * ServiceChannel
 *
 * A means for accessing a service, e.g. a government office location, web site, or phone number.
 *
 * https://schema.org/ServiceChannel
 */
export declare const ServiceChannel: Class;
/**
 * ShareAction
 *
 * The act of distributing content to people for their amusement or edification.
 *
 * https://schema.org/ShareAction
 */
export declare const ShareAction: Class;
/**
 * SheetMusic
 *
 * Printed music, as opposed to performed or recorded music.
 *
 * https://schema.org/SheetMusic
 */
export declare const SheetMusic: Class;
/**
 * ShippingDeliveryTime
 *
 * ShippingDeliveryTime provides various pieces of information about delivery times for shipping.
 *
 * https://schema.org/ShippingDeliveryTime
 */
export declare const ShippingDeliveryTime: Class;
/**
 * ShippingRateSettings
 *
 * A ShippingRateSettings represents re-usable pieces of shipping information. It is designed for publication on an URL that may be referenced via the [[shippingSettingsLink]] property of an [[OfferShippingDetails]]. Several occurrences can be published, distinguished and matched (i.e. identified/referenced) by their different values for [[shippingLabel]].
 *
 * https://schema.org/ShippingRateSettings
 */
export declare const ShippingRateSettings: Class;
/**
 * ShoeStore
 *
 * A shoe store.
 *
 * https://schema.org/ShoeStore
 */
export declare const ShoeStore: Class;
/**
 * ShoppingCenter
 *
 * A shopping center or mall.
 *
 * https://schema.org/ShoppingCenter
 */
export declare const ShoppingCenter: Class;
/**
 * ShortStory
 *
 * Short story or tale. A brief work of literature, usually written in narrative prose.
 *
 * https://schema.org/ShortStory
 */
export declare const ShortStory: Class;
/**
 * SingleFamilyResidence
 *
 * Residence type: Single-family home.
 *
 * https://schema.org/SingleFamilyResidence
 */
export declare const SingleFamilyResidence: Class;
/**
 * SiteNavigationElement
 *
 * A navigation element of the page.
 *
 * https://schema.org/SiteNavigationElement
 */
export declare const SiteNavigationElement: Class;
/**
 * SizeGroupEnumeration
 *
 * Enumerates common size groups for various product categories.
 *
 * https://schema.org/SizeGroupEnumeration
 */
export declare const SizeGroupEnumeration: Class;
/**
 * SizeSpecification
 *
 * Size related properties of a product, typically a size code ([[name]]) and optionally a [[sizeSystem]], [[sizeGroup]], and product measurements ([[hasMeasurement]]). In addition, the intended audience can be defined through [[suggestedAge]], [[suggestedGender]], and suggested body measurements ([[suggestedMeasurement]]).
 *
 * https://schema.org/SizeSpecification
 */
export declare const SizeSpecification: Class;
/**
 * SizeSystemEnumeration
 *
 * Enumerates common size systems for different categories of products, for example "EN-13402" or "UK" for wearables or "Imperial" for screws.
 *
 * https://schema.org/SizeSystemEnumeration
 */
export declare const SizeSystemEnumeration: Class;
/**
 * SkiResort
 *
 * A ski resort.
 *
 * https://schema.org/SkiResort
 */
export declare const SkiResort: Class;
/**
 * SocialEvent
 *
 * Event type: Social event.
 *
 * https://schema.org/SocialEvent
 */
export declare const SocialEvent: Class;
/**
 * SocialMediaPosting
 *
 * A post to a social media platform, including blog posts, tweets, Facebook posts, etc.
 *
 * https://schema.org/SocialMediaPosting
 */
export declare const SocialMediaPosting: Class;
/**
 * SoftwareApplication
 *
 * A software application.
 *
 * https://schema.org/SoftwareApplication
 */
export declare const SoftwareApplication: Class;
/**
 * SoftwareSourceCode
 *
 * Computer programming source code. Example: Full (compile ready) solutions, code snippet samples, scripts, templates.
 *
 * https://schema.org/SoftwareSourceCode
 */
export declare const SoftwareSourceCode: Class;
/**
 * SolveMathAction
 *
 * The action that takes in a math expression and directs users to a page potentially capable of solving/simplifying that expression.
 *
 * https://schema.org/SolveMathAction
 */
export declare const SolveMathAction: Class;
/**
 * SomeProducts
 *
 * A placeholder for multiple similar products of the same kind.
 *
 * https://schema.org/SomeProducts
 */
export declare const SomeProducts: Class;
/**
 * SpeakableSpecification
 *
 * A SpeakableSpecification indicates (typically via [[xpath]] or [[cssSelector]]) sections of a document that are highlighted as particularly [[speakable]]. Instances of this type are expected to be used primarily as values of the [[speakable]] property.
 *
 * https://schema.org/SpeakableSpecification
 */
export declare const SpeakableSpecification: Class;
/**
 * SpecialAnnouncement
 *
 * A SpecialAnnouncement combines a simple date-stamped textual information update
 *       with contextualized Web links and other structured data.  It represents an information update made by a
 *       locally-oriented organization, for example schools, pharmacies, healthcare providers,  community groups, police,
 *       local government.
 *
 * For work in progress guidelines on Coronavirus-related markup see [this doc](https://docs.google.com/document/d/14ikaGCKxo50rRM7nvKSlbUpjyIk2WMQd3IkB1lItlrM/edit#).
 *
 * The motivating scenario for SpecialAnnouncement is the [Coronavirus pandemic](https://en.wikipedia.org/wiki/2019%E2%80%9320_coronavirus_pandemic), and the initial vocabulary is oriented to this urgent situation. Schema.org
 * expect to improve the markup iteratively as it is deployed and as feedback emerges from use. In addition to our
 * usual [Github entry](https://github.com/schemaorg/schemaorg/issues/2490), feedback comments can also be provided in [this document](https://docs.google.com/document/d/1fpdFFxk8s87CWwACs53SGkYv3aafSxz_DTtOQxMrBJQ/edit#).
 *
 *
 * While this schema is designed to communicate urgent crisis-related information, it is not the same as an emergency warning technology like [CAP](https://en.wikipedia.org/wiki/Common_Alerting_Protocol), although there may be overlaps. The intent is to cover
 * the kinds of everyday practical information being posted to existing websites during an emergency situation.
 *
 * Several kinds of information can be provided:
 *
 * We encourage the provision of "name", "text", "datePosted", "expires" (if appropriate), "category" and
 * "url" as a simple baseline. It is important to provide a value for "category" where possible, most ideally as a well known
 * URL from Wikipedia or Wikidata. In the case of the 2019-2020 Coronavirus pandemic, this should be "https://en.wikipedia.org/w/index.php?title=2019-20\_coronavirus\_pandemic" or "https://www.wikidata.org/wiki/Q81068910".
 *
 * For many of the possible properties, values can either be simple links or an inline description, depending on whether a summary is available. For a link, provide just the URL of the appropriate page as the property's value. For an inline description, use a [[WebContent]] type, and provide the url as a property of that, alongside at least a simple "[[text]]" summary of the page. It is
 * unlikely that a single SpecialAnnouncement will need all of the possible properties simultaneously.
 *
 * We expect that in many cases the page referenced might contain more specialized structured data, e.g. contact info, [[openingHours]], [[Event]], [[FAQPage]] etc. By linking to those pages from a [[SpecialAnnouncement]] you can help make it clearer that the events are related to the situation (e.g. Coronavirus) indicated by the [[category]] property of the [[SpecialAnnouncement]].
 *
 * Many [[SpecialAnnouncement]]s will relate to particular regions and to identifiable local organizations. Use [[spatialCoverage]] for the region, and [[announcementLocation]] to indicate specific [[LocalBusiness]]es and [[CivicStructure]]s. If the announcement affects both a particular region and a specific location (for example, a library closure that serves an entire region), use both [[spatialCoverage]] and [[announcementLocation]].
 *
 * The [[about]] property can be used to indicate entities that are the focus of the announcement. We now recommend using [[about]] only
 * for representing non-location entities (e.g. a [[Course]] or a [[RadioStation]]). For places, use [[announcementLocation]] and [[spatialCoverage]]. Consumers of this markup should be aware that the initial design encouraged the use of [[about]] for locations too.
 *
 * The basic content of [[SpecialAnnouncement]] is similar to that of an [RSS](https://en.wikipedia.org/wiki/RSS) or [Atom](https://en.wikipedia.org/wiki/Atom_(Web_standard)) feed. For publishers without such feeds, basic feed-like information can be shared by posting
 * [[SpecialAnnouncement]] updates in a page, e.g. using JSON-LD. For sites with Atom/RSS functionality, you can point to a feed
 * with the [[webFeed]] property. This can be a simple URL, or an inline [[DataFeed]] object, with [[encodingFormat]] providing
 * media type information, e.g. "application/rss+xml" or "application/atom+xml".
 *
 *
 * https://schema.org/SpecialAnnouncement
 */
export declare const SpecialAnnouncement: Class;
/**
 * Specialty
 *
 * Any branch of a field in which people typically develop specific expertise, usually after significant study, time, and effort.
 *
 * https://schema.org/Specialty
 */
export declare const Specialty: Class;
/**
 * SportingGoodsStore
 *
 * A sporting goods store.
 *
 * https://schema.org/SportingGoodsStore
 */
export declare const SportingGoodsStore: Class;
/**
 * SportsActivityLocation
 *
 * A sports location, such as a playing field.
 *
 * https://schema.org/SportsActivityLocation
 */
export declare const SportsActivityLocation: Class;
/**
 * SportsClub
 *
 * A sports club.
 *
 * https://schema.org/SportsClub
 */
export declare const SportsClub: Class;
/**
 * SportsEvent
 *
 * Event type: Sports event.
 *
 * https://schema.org/SportsEvent
 */
export declare const SportsEvent: Class;
/**
 * SportsOrganization
 *
 * Represents the collection of all sports organizations, including sports teams, governing bodies, and sports associations.
 *
 * https://schema.org/SportsOrganization
 */
export declare const SportsOrganization: Class;
/**
 * SportsTeam
 *
 * Organization: Sports team.
 *
 * https://schema.org/SportsTeam
 */
export declare const SportsTeam: Class;
/**
 * SpreadsheetDigitalDocument
 *
 * A spreadsheet file.
 *
 * https://schema.org/SpreadsheetDigitalDocument
 */
export declare const SpreadsheetDigitalDocument: Class;
/**
 * StadiumOrArena
 *
 * A stadium.
 *
 * https://schema.org/StadiumOrArena
 */
export declare const StadiumOrArena: Class;
/**
 * State
 *
 * A state or province of a country.
 *
 * https://schema.org/State
 */
export declare const State: Class;
/**
 * Statement
 *
 * A statement about something, for example a fun or interesting fact. If known, the main entity this statement is about can be indicated using mainEntity. For more formal claims (e.g. in Fact Checking), consider using [[Claim]] instead. Use the [[text]] property to capture the text of the statement.
 *
 * https://schema.org/Statement
 */
export declare const Statement: Class;
/**
 * StatisticalPopulation
 *
 * A StatisticalPopulation is a set of instances of a certain given type that satisfy some set of constraints. The property [[populationType]] is used to specify the type. Any property that can be used on instances of that type can appear on the statistical population. For example, a [[StatisticalPopulation]] representing all [[Person]]s with a [[homeLocation]] of East Podunk California would be described by applying the appropriate [[homeLocation]] and [[populationType]] properties to a [[StatisticalPopulation]] item that stands for that set of people.
 * The properties [[numConstraints]] and [[constraintProperty]] are used to specify which of the populations properties are used to specify the population. Note that the sense of "population" used here is the general sense of a statistical
 * population, and does not imply that the population consists of people. For example, a [[populationType]] of [[Event]] or [[NewsArticle]] could be used. See also [[Observation]], where a [[populationType]] such as [[Person]] or [[Event]] can be indicated directly. In most cases it may be better to use [[StatisticalVariable]] instead of [[StatisticalPopulation]].
 *
 * https://schema.org/StatisticalPopulation
 */
export declare const StatisticalPopulation: Class;
/**
 * StatisticalVariable
 *
 * [[StatisticalVariable]] represents any type of statistical metric that can be measured at a place and time. The usage pattern for [[StatisticalVariable]] is typically expressed using [[Observation]] with an explicit [[populationType]], which is a type, typically drawn from Schema.org. Each [[StatisticalVariable]] is marked as a [[ConstraintNode]], meaning that some properties (those listed using [[constraintProperty]]) serve in this setting solely to define the statistical variable rather than literally describe a specific person, place or thing. For example, a [[StatisticalVariable]] Median_Height_Person_Female representing the median height of women, could be written as follows: the population type is [[Person]]; the measuredProperty [[height]]; the [[statType]] [[median]]; the [[gender]] [[Female]]. It is important to note that there are many kinds of scientific quantitative observation which are not fully, perfectly or unambiguously described following this pattern, or with solely Schema.org terminology. The approach taken here is designed to allow partial, incremental or minimal description of [[StatisticalVariable]]s, and the use of detailed sets of entity and property IDs from external repositories. The [[measurementMethod]], [[unitCode]] and [[unitText]] properties can also be used to clarify the specific nature and notation of an observed measurement.
 *
 * https://schema.org/StatisticalVariable
 */
export declare const StatisticalVariable: Class;
/**
 * StatusEnumeration
 *
 * Lists or enumerations dealing with status types.
 *
 * https://schema.org/StatusEnumeration
 */
export declare const StatusEnumeration: Class;
/**
 * SteeringPositionValue
 *
 * A value indicating a steering position.
 *
 * https://schema.org/SteeringPositionValue
 */
export declare const SteeringPositionValue: Class;
/**
 * Store
 *
 * A retail good store.
 *
 * https://schema.org/Store
 */
export declare const Store: Class;
/**
 * StructuredValue
 *
 * Structured values are used when the value of a property has a more complex structure than simply being a textual value or a reference to another thing.
 *
 * https://schema.org/StructuredValue
 */
export declare const StructuredValue: Class;
/**
 * StupidType
 *
 * A StupidType for testing.
 *
 * https://schema.org/StupidType
 */
export declare const StupidType: Class;
/**
 * SubscribeAction
 *
 * The act of forming a personal connection with someone/something (object) unidirectionally/asymmetrically to get updates pushed to.\n\nRelated actions:\n\n* [[FollowAction]]: Unlike FollowAction, SubscribeAction implies that the subscriber acts as a passive agent being constantly/actively pushed for updates.\n* [[RegisterAction]]: Unlike RegisterAction, SubscribeAction implies that the agent is interested in continuing receiving updates from the object.\n* [[JoinAction]]: Unlike JoinAction, SubscribeAction implies that the agent is interested in continuing receiving updates from the object.
 *
 * https://schema.org/SubscribeAction
 */
export declare const SubscribeAction: Class;
/**
 * Substance
 *
 * Any matter of defined composition that has discrete existence, whose origin may be biological, mineral or chemical.
 *
 * https://schema.org/Substance
 */
export declare const Substance: Class;
/**
 * SubwayStation
 *
 * A subway station.
 *
 * https://schema.org/SubwayStation
 */
export declare const SubwayStation: Class;
/**
 * Suite
 *
 * A suite in a hotel or other public accommodation, denotes a class of luxury accommodations, the key feature of which is multiple rooms (source: Wikipedia, the free encyclopedia, see <a href="http://en.wikipedia.org/wiki/Suite_(hotel)">http://en.wikipedia.org/wiki/Suite_(hotel)</a>).
 * <br /><br />
 * See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
 *
 *
 * https://schema.org/Suite
 */
export declare const Suite: Class;
/**
 * SuperficialAnatomy
 *
 * Anatomical features that can be observed by sight (without dissection), including the form and proportions of the human body as well as surface landmarks that correspond to deeper subcutaneous structures. Superficial anatomy plays an important role in sports medicine, phlebotomy, and other medical specialties as underlying anatomical structures can be identified through surface palpation. For example, during back surgery, superficial anatomy can be used to palpate and count vertebrae to find the site of incision. Or in phlebotomy, superficial anatomy can be used to locate an underlying vein; for example, the median cubital vein can be located by palpating the borders of the cubital fossa (such as the epicondyles of the humerus) and then looking for the superficial signs of the vein, such as size, prominence, ability to refill after depression, and feel of surrounding tissue support. As another example, in a subluxation (dislocation) of the glenohumeral joint, the bony structure becomes pronounced with the deltoid muscle failing to cover the glenohumeral joint allowing the edges of the scapula to be superficially visible. Here, the superficial anatomy is the visible edges of the scapula, implying the underlying dislocation of the joint (the related anatomical structure).
 *
 * https://schema.org/SuperficialAnatomy
 */
export declare const SuperficialAnatomy: Class;
/**
 * SurgicalProcedure
 *
 * A medical procedure involving an incision with instruments; performed for diagnose, or therapeutic purposes.
 *
 * https://schema.org/SurgicalProcedure
 */
export declare const SurgicalProcedure: Class;
/**
 * SuspendAction
 *
 * The act of momentarily pausing a device or application (e.g. pause music playback or pause a timer).
 *
 * https://schema.org/SuspendAction
 */
export declare const SuspendAction: Class;
/**
 * Syllabus
 *
 * A syllabus that describes the material covered in a course, often with several such sections per [[Course]] so that a distinct [[timeRequired]] can be provided for that section of the [[Course]].
 *
 * https://schema.org/Syllabus
 */
export declare const Syllabus: Class;
/**
 * Synagogue
 *
 * A synagogue.
 *
 * https://schema.org/Synagogue
 */
export declare const Synagogue: Class;
/**
 * TVClip
 *
 * A short TV program or a segment/part of a TV program.
 *
 * https://schema.org/TVClip
 */
export declare const TVClip: Class;
/**
 * TVEpisode
 *
 * A TV episode which can be part of a series or season.
 *
 * https://schema.org/TVEpisode
 */
export declare const TVEpisode: Class;
/**
 * TVSeason
 *
 * Season dedicated to TV broadcast and associated online delivery.
 *
 * https://schema.org/TVSeason
 */
export declare const TVSeason: Class;
/**
 * TVSeries
 *
 * CreativeWorkSeries dedicated to TV broadcast and associated online delivery.
 *
 * https://schema.org/TVSeries
 */
export declare const TVSeries: Class;
/**
 * Table
 *
 * A table on a Web page.
 *
 * https://schema.org/Table
 */
export declare const Table: Class;
/**
 * TakeAction
 *
 * The act of gaining ownership of an object from an origin. Reciprocal of GiveAction.\n\nRelated actions:\n\n* [[GiveAction]]: The reciprocal of TakeAction.\n* [[ReceiveAction]]: Unlike ReceiveAction, TakeAction implies that ownership has been transferred.
 *
 * https://schema.org/TakeAction
 */
export declare const TakeAction: Class;
/**
 * TattooParlor
 *
 * A tattoo parlor.
 *
 * https://schema.org/TattooParlor
 */
export declare const TattooParlor: Class;
/**
 * Taxi
 *
 * A taxi.
 *
 * https://schema.org/Taxi
 */
export declare const Taxi: Class;
/**
 * TaxiReservation
 *
 * A reservation for a taxi.\n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use [[Offer]].
 *
 * https://schema.org/TaxiReservation
 */
export declare const TaxiReservation: Class;
/**
 * TaxiService
 *
 * A service for a vehicle for hire with a driver for local travel. Fares are usually calculated based on distance traveled.
 *
 * https://schema.org/TaxiService
 */
export declare const TaxiService: Class;
/**
 * TaxiStand
 *
 * A taxi stand.
 *
 * https://schema.org/TaxiStand
 */
export declare const TaxiStand: Class;
/**
 * Taxon
 *
 * A set of organisms asserted to represent a natural cohesive biological unit.
 *
 * https://schema.org/Taxon
 */
export declare const Taxon: Class;
/**
 * TechArticle
 *
 * A technical article - Example: How-to (task) topics, step-by-step, procedural troubleshooting, specifications, etc.
 *
 * https://schema.org/TechArticle
 */
export declare const TechArticle: Class;
/**
 * TelevisionChannel
 *
 * A unique instance of a television BroadcastService on a CableOrSatelliteService lineup.
 *
 * https://schema.org/TelevisionChannel
 */
export declare const TelevisionChannel: Class;
/**
 * TelevisionStation
 *
 * A television station.
 *
 * https://schema.org/TelevisionStation
 */
export declare const TelevisionStation: Class;
/**
 * TennisComplex
 *
 * A tennis complex.
 *
 * https://schema.org/TennisComplex
 */
export declare const TennisComplex: Class;
/**
 * Text
 *
 * Data type: Text.
 *
 * https://schema.org/Text
 */
export declare const Text: Class;
/**
 * TextDigitalDocument
 *
 * A file composed primarily of text.
 *
 * https://schema.org/TextDigitalDocument
 */
export declare const TextDigitalDocument: Class;
/**
 * TextObject
 *
 * A text file. The text can be unformatted or contain markup, html, etc.
 *
 * https://schema.org/TextObject
 */
export declare const TextObject: Class;
/**
 * TheaterEvent
 *
 * Event type: Theater performance.
 *
 * https://schema.org/TheaterEvent
 */
export declare const TheaterEvent: Class;
/**
 * TheaterGroup
 *
 * A theater group or company, for example, the Royal Shakespeare Company or Druid Theatre.
 *
 * https://schema.org/TheaterGroup
 */
export declare const TheaterGroup: Class;
/**
 * TherapeuticProcedure
 *
 * A medical procedure intended primarily for therapeutic purposes, aimed at improving a health condition.
 *
 * https://schema.org/TherapeuticProcedure
 */
export declare const TherapeuticProcedure: Class;
/**
 * Thesis
 *
 * A thesis or dissertation document submitted in support of candidature for an academic degree or professional qualification.
 *
 * https://schema.org/Thesis
 */
export declare const Thesis: Class;
/**
 * Thing
 *
 * The most generic type of item.
 *
 * https://schema.org/Thing
 */
export declare const Thing: Class;
/**
 * Ticket
 *
 * Used to describe a ticket to an event, a flight, a bus ride, etc.
 *
 * https://schema.org/Ticket
 */
export declare const Ticket: Class;
/**
 * TieAction
 *
 * The act of reaching a draw in a competitive activity.
 *
 * https://schema.org/TieAction
 */
export declare const TieAction: Class;
/**
 * Time
 *
 * A point in time recurring on multiple days in the form hh:mm:ss[Z|(+|-)hh:mm] (see [XML schema for details](http://www.w3.org/TR/xmlschema-2/#time)).
 *
 * https://schema.org/Time
 */
export declare const Time: Class;
/**
 * TipAction
 *
 * The act of giving money voluntarily to a beneficiary in recognition of services rendered.
 *
 * https://schema.org/TipAction
 */
export declare const TipAction: Class;
/**
 * TireShop
 *
 * A tire shop.
 *
 * https://schema.org/TireShop
 */
export declare const TireShop: Class;
/**
 * TouristAttraction
 *
 * A tourist attraction.  In principle any Thing can be a [[TouristAttraction]], from a [[Mountain]] and [[LandmarksOrHistoricalBuildings]] to a [[LocalBusiness]].  This Type can be used on its own to describe a general [[TouristAttraction]], or be used as an [[additionalType]] to add tourist attraction properties to any other type.  (See examples below)
 *
 * https://schema.org/TouristAttraction
 */
export declare const TouristAttraction: Class;
/**
 * TouristDestination
 *
 * A tourist destination. In principle any [[Place]] can be a [[TouristDestination]] from a [[City]], Region or [[Country]] to an [[AmusementPark]] or [[Hotel]]. This Type can be used on its own to describe a general [[TouristDestination]], or be used as an [[additionalType]] to add tourist relevant properties to any other [[Place]].  A [[TouristDestination]] is defined as a [[Place]] that contains, or is colocated with, one or more [[TouristAttraction]]s, often linked by a similar theme or interest to a particular [[touristType]]. The [UNWTO](http://www2.unwto.org/) defines Destination (main destination of a tourism trip) as the place visited that is central to the decision to take the trip.
 *   (See examples below.)
 *
 * https://schema.org/TouristDestination
 */
export declare const TouristDestination: Class;
/**
 * TouristInformationCenter
 *
 * A tourist information center.
 *
 * https://schema.org/TouristInformationCenter
 */
export declare const TouristInformationCenter: Class;
/**
 * TouristTrip
 *
 * A tourist trip. A created itinerary of visits to one or more places of interest ([[TouristAttraction]]/[[TouristDestination]]) often linked by a similar theme, geographic area, or interest to a particular [[touristType]]. The [UNWTO](http://www2.unwto.org/) defines tourism trip as the Trip taken by visitors.
 *   (See examples below.)
 *
 * https://schema.org/TouristTrip
 */
export declare const TouristTrip: Class;
/**
 * ToyStore
 *
 * A toy store.
 *
 * https://schema.org/ToyStore
 */
export declare const ToyStore: Class;
/**
 * TrackAction
 *
 * An agent tracks an object for updates.\n\nRelated actions:\n\n* [[FollowAction]]: Unlike FollowAction, TrackAction refers to the interest on the location of innanimates objects.\n* [[SubscribeAction]]: Unlike SubscribeAction, TrackAction refers to  the interest on the location of innanimate objects.
 *
 * https://schema.org/TrackAction
 */
export declare const TrackAction: Class;
/**
 * TradeAction
 *
 * The act of participating in an exchange of goods and services for monetary compensation. An agent trades an object, product or service with a participant in exchange for a one time or periodic payment.
 *
 * https://schema.org/TradeAction
 */
export declare const TradeAction: Class;
/**
 * TrainReservation
 *
 * A reservation for train travel.\n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use [[Offer]].
 *
 * https://schema.org/TrainReservation
 */
export declare const TrainReservation: Class;
/**
 * TrainStation
 *
 * A train station.
 *
 * https://schema.org/TrainStation
 */
export declare const TrainStation: Class;
/**
 * TrainTrip
 *
 * A trip on a commercial train line.
 *
 * https://schema.org/TrainTrip
 */
export declare const TrainTrip: Class;
/**
 * TransferAction
 *
 * The act of transferring/moving (abstract or concrete) animate or inanimate objects from one place to another.
 *
 * https://schema.org/TransferAction
 */
export declare const TransferAction: Class;
/**
 * TravelAction
 *
 * The act of traveling from a fromLocation to a destination by a specified mode of transport, optionally with participants.
 *
 * https://schema.org/TravelAction
 */
export declare const TravelAction: Class;
/**
 * TravelAgency
 *
 * A travel agency.
 *
 * https://schema.org/TravelAgency
 */
export declare const TravelAgency: Class;
/**
 * TreatmentIndication
 *
 * An indication for treating an underlying condition, symptom, etc.
 *
 * https://schema.org/TreatmentIndication
 */
export declare const TreatmentIndication: Class;
/**
 * Trip
 *
 * A trip or journey. An itinerary of visits to one or more places.
 *
 * https://schema.org/Trip
 */
export declare const Trip: Class;
/**
 * TypeAndQuantityNode
 *
 * A structured value indicating the quantity, unit of measurement, and business function of goods included in a bundle offer.
 *
 * https://schema.org/TypeAndQuantityNode
 */
export declare const TypeAndQuantityNode: Class;
/**
 * UKNonprofitType
 *
 * UKNonprofitType: Non-profit organization type originating from the United Kingdom.
 *
 * https://schema.org/UKNonprofitType
 */
export declare const UKNonprofitType: Class;
/**
 * URL
 *
 * Data type: URL.
 *
 * https://schema.org/URL
 */
export declare const URL: Class;
/**
 * USNonprofitType
 *
 * USNonprofitType: Non-profit organization type originating from the United States.
 *
 * https://schema.org/USNonprofitType
 */
export declare const USNonprofitType: Class;
/**
 * UnRegisterAction
 *
 * The act of un-registering from a service.\n\nRelated actions:\n\n* [[RegisterAction]]: antonym of UnRegisterAction.\n* [[LeaveAction]]: Unlike LeaveAction, UnRegisterAction implies that you are unregistering from a service you were previously registered, rather than leaving a team/group of people.
 *
 * https://schema.org/UnRegisterAction
 */
export declare const UnRegisterAction: Class;
/**
 * UnitPriceSpecification
 *
 * The price asked for a given offer by the respective organization or person.
 *
 * https://schema.org/UnitPriceSpecification
 */
export declare const UnitPriceSpecification: Class;
/**
 * UpdateAction
 *
 * The act of managing by changing/editing the state of the object.
 *
 * https://schema.org/UpdateAction
 */
export declare const UpdateAction: Class;
/**
 * UseAction
 *
 * The act of applying an object to its intended purpose.
 *
 * https://schema.org/UseAction
 */
export declare const UseAction: Class;
/**
 * UserBlocks
 *
 * UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].
 *
 * https://schema.org/UserBlocks
 */
export declare const UserBlocks: Class;
/**
 * UserCheckins
 *
 * UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].
 *
 * https://schema.org/UserCheckins
 */
export declare const UserCheckins: Class;
/**
 * UserComments
 *
 * UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].
 *
 * https://schema.org/UserComments
 */
export declare const UserComments: Class;
/**
 * UserDownloads
 *
 * UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].
 *
 * https://schema.org/UserDownloads
 */
export declare const UserDownloads: Class;
/**
 * UserInteraction
 *
 * UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].
 *
 * https://schema.org/UserInteraction
 */
export declare const UserInteraction: Class;
/**
 * UserLikes
 *
 * UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].
 *
 * https://schema.org/UserLikes
 */
export declare const UserLikes: Class;
/**
 * UserPageVisits
 *
 * UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].
 *
 * https://schema.org/UserPageVisits
 */
export declare const UserPageVisits: Class;
/**
 * UserPlays
 *
 * UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].
 *
 * https://schema.org/UserPlays
 */
export declare const UserPlays: Class;
/**
 * UserPlusOnes
 *
 * UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].
 *
 * https://schema.org/UserPlusOnes
 */
export declare const UserPlusOnes: Class;
/**
 * UserReview
 *
 * A review created by an end-user (e.g. consumer, purchaser, attendee etc.), in contrast with [[CriticReview]].
 *
 * https://schema.org/UserReview
 */
export declare const UserReview: Class;
/**
 * UserTweets
 *
 * UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].
 *
 * https://schema.org/UserTweets
 */
export declare const UserTweets: Class;
/**
 * VacationRental
 *
 * A kind of lodging business that focuses on renting single properties for limited time.
 *
 * https://schema.org/VacationRental
 */
export declare const VacationRental: Class;
/**
 * Vehicle
 *
 * A vehicle is a device that is designed or used to transport people or cargo over land, water, air, or through space.
 *
 * https://schema.org/Vehicle
 */
export declare const Vehicle: Class;
/**
 * Vein
 *
 * A type of blood vessel that specifically carries blood to the heart.
 *
 * https://schema.org/Vein
 */
export declare const Vein: Class;
/**
 * Vessel
 *
 * A component of the human body circulatory system comprised of an intricate network of hollow tubes that transport blood throughout the entire body.
 *
 * https://schema.org/Vessel
 */
export declare const Vessel: Class;
/**
 * VeterinaryCare
 *
 * A vet's office.
 *
 * https://schema.org/VeterinaryCare
 */
export declare const VeterinaryCare: Class;
/**
 * VideoGallery
 *
 * Web page type: Video gallery page.
 *
 * https://schema.org/VideoGallery
 */
export declare const VideoGallery: Class;
/**
 * VideoGame
 *
 * A video game is an electronic game that involves human interaction with a user interface to generate visual feedback on a video device.
 *
 * https://schema.org/VideoGame
 */
export declare const VideoGame: Class;
/**
 * VideoGameClip
 *
 * A short segment/part of a video game.
 *
 * https://schema.org/VideoGameClip
 */
export declare const VideoGameClip: Class;
/**
 * VideoGameSeries
 *
 * A video game series.
 *
 * https://schema.org/VideoGameSeries
 */
export declare const VideoGameSeries: Class;
/**
 * VideoObject
 *
 * A video file.
 *
 * https://schema.org/VideoObject
 */
export declare const VideoObject: Class;
/**
 * VideoObjectSnapshot
 *
 * A specific and exact (byte-for-byte) version of a [[VideoObject]]. Two byte-for-byte identical files, for the purposes of this type, considered identical. If they have different embedded metadata the files will differ. Different external facts about the files, e.g. creator or dateCreated that aren't represented in their actual content, do not affect this notion of identity.
 *
 * https://schema.org/VideoObjectSnapshot
 */
export declare const VideoObjectSnapshot: Class;
/**
 * ViewAction
 *
 * The act of consuming static visual content.
 *
 * https://schema.org/ViewAction
 */
export declare const ViewAction: Class;
/**
 * VirtualLocation
 *
 * An online or virtual location for attending events. For example, one may attend an online seminar or educational event. While a virtual location may be used as the location of an event, virtual locations should not be confused with physical locations in the real world.
 *
 * https://schema.org/VirtualLocation
 */
export declare const VirtualLocation: Class;
/**
 * VisualArtsEvent
 *
 * Event type: Visual arts event.
 *
 * https://schema.org/VisualArtsEvent
 */
export declare const VisualArtsEvent: Class;
/**
 * VisualArtwork
 *
 * A work of art that is primarily visual in character.
 *
 * https://schema.org/VisualArtwork
 */
export declare const VisualArtwork: Class;
/**
 * VitalSign
 *
 * Vital signs are measures of various physiological functions in order to assess the most basic body functions.
 *
 * https://schema.org/VitalSign
 */
export declare const VitalSign: Class;
/**
 * Volcano
 *
 * A volcano, like Fujisan.
 *
 * https://schema.org/Volcano
 */
export declare const Volcano: Class;
/**
 * VoteAction
 *
 * The act of expressing a preference from a fixed/finite/structured set of choices/options.
 *
 * https://schema.org/VoteAction
 */
export declare const VoteAction: Class;
/**
 * WPAdBlock
 *
 * An advertising section of the page.
 *
 * https://schema.org/WPAdBlock
 */
export declare const WPAdBlock: Class;
/**
 * WPFooter
 *
 * The footer section of the page.
 *
 * https://schema.org/WPFooter
 */
export declare const WPFooter: Class;
/**
 * WPHeader
 *
 * The header section of the page.
 *
 * https://schema.org/WPHeader
 */
export declare const WPHeader: Class;
/**
 * WPSideBar
 *
 * A sidebar section of the page.
 *
 * https://schema.org/WPSideBar
 */
export declare const WPSideBar: Class;
/**
 * WantAction
 *
 * The act of expressing a desire about the object. An agent wants an object.
 *
 * https://schema.org/WantAction
 */
export declare const WantAction: Class;
/**
 * WarrantyPromise
 *
 * A structured value representing the duration and scope of services that will be provided to a customer free of charge in case of a defect or malfunction of a product.
 *
 * https://schema.org/WarrantyPromise
 */
export declare const WarrantyPromise: Class;
/**
 * WarrantyScope
 *
 * A range of services that will be provided to a customer free of charge in case of a defect or malfunction of a product.\n\nCommonly used values:\n\n* http://purl.org/goodrelations/v1#Labor-BringIn\n* http://purl.org/goodrelations/v1#PartsAndLabor-BringIn\n* http://purl.org/goodrelations/v1#PartsAndLabor-PickUp
 *
 *
 * https://schema.org/WarrantyScope
 */
export declare const WarrantyScope: Class;
/**
 * WatchAction
 *
 * The act of consuming dynamic/moving visual content.
 *
 * https://schema.org/WatchAction
 */
export declare const WatchAction: Class;
/**
 * Waterfall
 *
 * A waterfall, like Niagara.
 *
 * https://schema.org/Waterfall
 */
export declare const Waterfall: Class;
/**
 * WearAction
 *
 * The act of dressing oneself in clothing.
 *
 * https://schema.org/WearAction
 */
export declare const WearAction: Class;
/**
 * WearableMeasurementTypeEnumeration
 *
 * Enumerates common types of measurement for wearables products.
 *
 * https://schema.org/WearableMeasurementTypeEnumeration
 */
export declare const WearableMeasurementTypeEnumeration: Class;
/**
 * WearableSizeGroupEnumeration
 *
 * Enumerates common size groups (also known as "size types") for wearable products.
 *
 * https://schema.org/WearableSizeGroupEnumeration
 */
export declare const WearableSizeGroupEnumeration: Class;
/**
 * WearableSizeSystemEnumeration
 *
 * Enumerates common size systems specific for wearable products
 *
 * https://schema.org/WearableSizeSystemEnumeration
 */
export declare const WearableSizeSystemEnumeration: Class;
/**
 * WebAPI
 *
 * An application programming interface accessible over Web/Internet technologies.
 *
 * https://schema.org/WebAPI
 */
export declare const WebAPI: Class;
/**
 * WebApplication
 *
 * Web applications.
 *
 * https://schema.org/WebApplication
 */
export declare const WebApplication: Class;
/**
 * WebContent
 *
 * WebContent is a type representing all [[WebPage]], [[WebSite]] and [[WebPageElement]] content. It is sometimes the case that detailed distinctions between Web pages, sites and their parts are not always important or obvious. The  [[WebContent]] type makes it easier to describe Web-addressable content without requiring such distinctions to always be stated. (The intent is that the existing types [[WebPage]], [[WebSite]] and [[WebPageElement]] will eventually be declared as subtypes of [[WebContent]].)
 *
 * https://schema.org/WebContent
 */
export declare const WebContent: Class;
/**
 * WebPage
 *
 * A web page. Every web page is implicitly assumed to be declared to be of type WebPage, so the various properties about that webpage, such as <code>breadcrumb</code> may be used. We recommend explicit declaration if these properties are specified, but if they are found outside of an itemscope, they will be assumed to be about the page.
 *
 * https://schema.org/WebPage
 */
export declare const WebPage: Class;
/**
 * WebPageElement
 *
 * A web page element, like a table or an image.
 *
 * https://schema.org/WebPageElement
 */
export declare const WebPageElement: Class;
/**
 * WebSite
 *
 * A WebSite is a set of related web pages and other items typically served from a single web domain and accessible via URLs.
 *
 * https://schema.org/WebSite
 */
export declare const WebSite: Class;
/**
 * WholesaleStore
 *
 * A wholesale store.
 *
 * https://schema.org/WholesaleStore
 */
export declare const WholesaleStore: Class;
/**
 * WinAction
 *
 * The act of achieving victory in a competitive activity.
 *
 * https://schema.org/WinAction
 */
export declare const WinAction: Class;
/**
 * Winery
 *
 * A winery.
 *
 * https://schema.org/Winery
 */
export declare const Winery: Class;
/**
 * WorkBasedProgram
 *
 * A program with both an educational and employment component. Typically based at a workplace and structured around work-based learning, with the aim of instilling competencies related to an occupation. WorkBasedProgram is used to distinguish programs such as apprenticeships from school, college or other classroom based educational programs.
 *
 * https://schema.org/WorkBasedProgram
 */
export declare const WorkBasedProgram: Class;
/**
 * WorkersUnion
 *
 * A Workers Union (also known as a Labor Union, Labour Union, or Trade Union) is an organization that promotes the interests of its worker members by collectively bargaining with management, organizing, and political lobbying.
 *
 * https://schema.org/WorkersUnion
 */
export declare const WorkersUnion: Class;
/**
 * WriteAction
 *
 * The act of authoring written creative content.
 *
 * https://schema.org/WriteAction
 */
export declare const WriteAction: Class;
/**
 * XPathType
 *
 * Text representing an XPath (typically but not necessarily version 1.0).
 *
 * https://schema.org/XPathType
 */
export declare const XPathType: Class;
/**
 * Zoo
 *
 * A zoo.
 *
 * https://schema.org/Zoo
 */
export declare const Zoo: Class;
/**
 * abridged
 *
 * Indicates whether the book is an abridged edition.
 *
 * https://schema.org/abridged
 */
export declare const abridged: Property;
/**
 * abstract
 *
 * An abstract is a short description that summarizes a [[CreativeWork]].
 *
 * https://schema.org/abstract
 */
export declare const abstract: Property;
/**
 * accelerationTime
 *
 * The time needed to accelerate the vehicle from a given start velocity to a given target velocity.\n\nTypical unit code(s): SEC for seconds\n\n* Note: There are unfortunately no standard unit codes for seconds/0..100 km/h or seconds/0..60 mph. Simply use "SEC" for seconds and indicate the velocities in the [[name]] of the [[QuantitativeValue]], or use [[valueReference]] with a [[QuantitativeValue]] of 0..60 mph or 0..100 km/h to specify the reference speeds.
 *
 * https://schema.org/accelerationTime
 */
export declare const accelerationTime: Property;
/**
 * acceptedAnswer
 *
 * The answer(s) that has been accepted as best, typically on a Question/Answer site. Sites vary in their selection mechanisms, e.g. drawing on community opinion and/or the view of the Question author.
 *
 * https://schema.org/acceptedAnswer
 */
export declare const acceptedAnswer: Property;
/**
 * acceptedOffer
 *
 * The offer(s) -- e.g., product, quantity and price combinations -- included in the order.
 *
 * https://schema.org/acceptedOffer
 */
export declare const acceptedOffer: Property;
/**
 * acceptedPaymentMethod
 *
 * The payment method(s) accepted by seller for this offer.
 *
 * https://schema.org/acceptedPaymentMethod
 */
export declare const acceptedPaymentMethod: Property;
/**
 * acceptsReservations
 *
 * Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
 *
 * https://schema.org/acceptsReservations
 */
export declare const acceptsReservations: Property;
/**
 * accessCode
 *
 * Password, PIN, or access code needed for delivery (e.g. from a locker).
 *
 * https://schema.org/accessCode
 */
export declare const accessCode: Property;
/**
 * accessMode
 *
 * The human sensory perceptual system or cognitive faculty through which a person may process or perceive information. Values should be drawn from the [approved vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessMode-vocabulary).
 *
 * https://schema.org/accessMode
 */
export declare const accessMode: Property;
/**
 * accessModeSufficient
 *
 * A list of single or combined accessModes that are sufficient to understand all the intellectual content of a resource. Values should be drawn from the [approved vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessModeSufficient-vocabulary).
 *
 * https://schema.org/accessModeSufficient
 */
export declare const accessModeSufficient: Property;
/**
 * accessibilityAPI
 *
 * Indicates that the resource is compatible with the referenced accessibility API. Values should be drawn from the [approved vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessibilityAPI-vocabulary).
 *
 * https://schema.org/accessibilityAPI
 */
export declare const accessibilityAPI: Property;
/**
 * accessibilityControl
 *
 * Identifies input methods that are sufficient to fully control the described resource. Values should be drawn from the [approved vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessibilityControl-vocabulary).
 *
 * https://schema.org/accessibilityControl
 */
export declare const accessibilityControl: Property;
/**
 * accessibilityFeature
 *
 * Content features of the resource, such as accessible media, alternatives and supported enhancements for accessibility. Values should be drawn from the [approved vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessibilityFeature-vocabulary).
 *
 * https://schema.org/accessibilityFeature
 */
export declare const accessibilityFeature: Property;
/**
 * accessibilityHazard
 *
 * A characteristic of the described resource that is physiologically dangerous to some users. Related to WCAG 2.0 guideline 2.3. Values should be drawn from the [approved vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessibilityHazard-vocabulary).
 *
 * https://schema.org/accessibilityHazard
 */
export declare const accessibilityHazard: Property;
/**
 * accessibilitySummary
 *
 * A human-readable summary of specific accessibility features or deficiencies, consistent with the other accessibility metadata but expressing subtleties such as "short descriptions are present but long descriptions will be needed for non-visual users" or "short descriptions are present and no long descriptions are needed."
 *
 * https://schema.org/accessibilitySummary
 */
export declare const accessibilitySummary: Property;
/**
 * accommodationCategory
 *
 * Category of an [[Accommodation]], following real estate conventions, e.g. RESO (see [PropertySubType](https://ddwiki.reso.org/display/DDW17/PropertySubType+Field), and [PropertyType](https://ddwiki.reso.org/display/DDW17/PropertyType+Field) fields  for suggested values).
 *
 * https://schema.org/accommodationCategory
 */
export declare const accommodationCategory: Property;
/**
 * accommodationFloorPlan
 *
 * A floorplan of some [[Accommodation]].
 *
 * https://schema.org/accommodationFloorPlan
 */
export declare const accommodationFloorPlan: Property;
/**
 * accountId
 *
 * The identifier for the account the payment will be applied to.
 *
 * https://schema.org/accountId
 */
export declare const accountId: Property;
/**
 * accountMinimumInflow
 *
 * A minimum amount that has to be paid in every month.
 *
 * https://schema.org/accountMinimumInflow
 */
export declare const accountMinimumInflow: Property;
/**
 * accountOverdraftLimit
 *
 * An overdraft is an extension of credit from a lending institution when an account reaches zero. An overdraft allows the individual to continue withdrawing money even if the account has no funds in it. Basically the bank allows people to borrow a set amount of money.
 *
 * https://schema.org/accountOverdraftLimit
 */
export declare const accountOverdraftLimit: Property;
/**
 * accountablePerson
 *
 * Specifies the Person that is legally accountable for the CreativeWork.
 *
 * https://schema.org/accountablePerson
 */
export declare const accountablePerson: Property;
/**
 * acquireLicensePage
 *
 * Indicates a page documenting how licenses can be purchased or otherwise acquired, for the current item.
 *
 * https://schema.org/acquireLicensePage
 */
export declare const acquireLicensePage: Property;
/**
 * acquiredFrom
 *
 * The organization or person from which the product was acquired.
 *
 * https://schema.org/acquiredFrom
 */
export declare const acquiredFrom: Property;
/**
 * acrissCode
 *
 * The ACRISS Car Classification Code is a code used by many car rental companies, for classifying vehicles. ACRISS stands for Association of Car Rental Industry Systems and Standards.
 *
 * https://schema.org/acrissCode
 */
export declare const acrissCode: Property;
/**
 * actionAccessibilityRequirement
 *
 * A set of requirements that must be fulfilled in order to perform an Action. If more than one value is specified, fulfilling one set of requirements will allow the Action to be performed.
 *
 * https://schema.org/actionAccessibilityRequirement
 */
export declare const actionAccessibilityRequirement: Property;
/**
 * actionPlatform
 *
 * The high level platform(s) where the Action can be performed for the given URL. To specify a specific application or operating system instance, use actionApplication.
 *
 * https://schema.org/actionPlatform
 */
export declare const actionPlatform: Property;
/**
 * actionStatus
 *
 * Indicates the current disposition of the Action.
 *
 * https://schema.org/actionStatus
 */
export declare const actionStatus: Property;
/**
 * actionableFeedbackPolicy
 *
 * For a [[NewsMediaOrganization]] or other news-related [[Organization]], a statement about public engagement activities (for news media, the newsroom’s), including involving the public - digitally or otherwise -- in coverage decisions, reporting and activities after publication.
 *
 * https://schema.org/actionableFeedbackPolicy
 */
export declare const actionableFeedbackPolicy: Property;
/**
 * activeIngredient
 *
 * An active ingredient, typically chemical compounds and/or biologic substances.
 *
 * https://schema.org/activeIngredient
 */
export declare const activeIngredient: Property;
/**
 * activityDuration
 *
 * Length of time to engage in the activity.
 *
 * https://schema.org/activityDuration
 */
export declare const activityDuration: Property;
/**
 * activityFrequency
 *
 * How often one should engage in the activity.
 *
 * https://schema.org/activityFrequency
 */
export declare const activityFrequency: Property;
/**
 * actors
 *
 * An actor, e.g. in TV, radio, movie, video games etc. Actors can be associated with individual items or with a series, episode, clip.
 *
 * https://schema.org/actors
 */
export declare const actors: Property;
/**
 * addOn
 *
 * An additional offer that can only be obtained in combination with the first base offer (e.g. supplements and extensions that are available for a surcharge).
 *
 * https://schema.org/addOn
 */
export declare const addOn: Property;
/**
 * additionalName
 *
 * An additional name for a Person, can be used for a middle name.
 *
 * https://schema.org/additionalName
 */
export declare const additionalName: Property;
/**
 * additionalNumberOfGuests
 *
 * If responding yes, the number of guests who will attend in addition to the invitee.
 *
 * https://schema.org/additionalNumberOfGuests
 */
export declare const additionalNumberOfGuests: Property;
/**
 * additionalProperty
 *
 * A property-value pair representing an additional characteristic of the entity, e.g. a product feature or another characteristic for which there is no matching property in schema.org.\n\nNote: Publishers should be aware that applications designed to use specific schema.org properties (e.g. https://schema.org/width, https://schema.org/color, https://schema.org/gtin13, ...) will typically expect such data to be provided using those properties, rather than using the generic property/value mechanism.
 *
 *
 * https://schema.org/additionalProperty
 */
export declare const additionalProperty: Property;
/**
 * additionalType
 *
 * An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. Typically the value is a URI-identified RDF class, and in this case corresponds to the
 *     use of rdf:type in RDF. Text values can be used sparingly, for cases where useful information can be added without their being an appropriate schema to reference. In the case of text values, the class label should follow the schema.org <a href="https://schema.org/docs/styleguide.html">style guide</a>
 *
 * https://schema.org/additionalType
 */
export declare const additionalType: Property;
/**
 * additionalVariable
 *
 * Any additional component of the exercise prescription that may need to be articulated to the patient. This may include the order of exercises, the number of repetitions of movement, quantitative distance, progressions over time, etc.
 *
 * https://schema.org/additionalVariable
 */
export declare const additionalVariable: Property;
/**
 * address
 *
 * Physical address of the item.
 *
 * https://schema.org/address
 */
export declare const address: Property;
/**
 * addressCountry
 *
 * The country. For example, USA. You can also provide the two-letter [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1).
 *
 * https://schema.org/addressCountry
 */
export declare const addressCountry: Property;
/**
 * addressLocality
 *
 * The locality in which the street address is, and which is in the region. For example, Mountain View.
 *
 * https://schema.org/addressLocality
 */
export declare const addressLocality: Property;
/**
 * addressRegion
 *
 * The region in which the locality is, and which is in the country. For example, California or another appropriate first-level [Administrative division](https://en.wikipedia.org/wiki/List_of_administrative_divisions_by_country).
 *
 * https://schema.org/addressRegion
 */
export declare const addressRegion: Property;
/**
 * administrationRoute
 *
 * A route by which this drug may be administered, e.g. 'oral'.
 *
 * https://schema.org/administrationRoute
 */
export declare const administrationRoute: Property;
/**
 * advanceBookingRequirement
 *
 * The amount of time that is required between accepting the offer and the actual usage of the resource or service.
 *
 * https://schema.org/advanceBookingRequirement
 */
export declare const advanceBookingRequirement: Property;
/**
 * adverseOutcome
 *
 * A possible complication and/or side effect of this therapy. If it is known that an adverse outcome is serious (resulting in death, disability, or permanent damage; requiring hospitalization; or otherwise life-threatening or requiring immediate medical attention), tag it as a seriousAdverseOutcome instead.
 *
 * https://schema.org/adverseOutcome
 */
export declare const adverseOutcome: Property;
/**
 * affectedBy
 *
 * Drugs that affect the test's results.
 *
 * https://schema.org/affectedBy
 */
export declare const affectedBy: Property;
/**
 * affiliation
 *
 * An organization that this person is affiliated with. For example, a school/university, a club, or a team.
 *
 * https://schema.org/affiliation
 */
export declare const affiliation: Property;
/**
 * afterMedia
 *
 * A media object representing the circumstances after performing this direction.
 *
 * https://schema.org/afterMedia
 */
export declare const afterMedia: Property;
/**
 * agent
 *
 * The direct performer or driver of the action (animate or inanimate). E.g. *John* wrote a book.
 *
 * https://schema.org/agent
 */
export declare const agent: Property;
/**
 * aggregateRating
 *
 * The overall rating, based on a collection of reviews or ratings, of the item.
 *
 * https://schema.org/aggregateRating
 */
export declare const aggregateRating: Property;
/**
 * aircraft
 *
 * The kind of aircraft (e.g., "Boeing 747").
 *
 * https://schema.org/aircraft
 */
export declare const aircraft: Property;
/**
 * albumProductionType
 *
 * Classification of the album by its type of content: soundtrack, live album, studio album, etc.
 *
 * https://schema.org/albumProductionType
 */
export declare const albumProductionType: Property;
/**
 * albumReleaseType
 *
 * The kind of release which this album is: single, EP or album.
 *
 * https://schema.org/albumReleaseType
 */
export declare const albumReleaseType: Property;
/**
 * albums
 *
 * A collection of music albums.
 *
 * https://schema.org/albums
 */
export declare const albums: Property;
/**
 * alcoholWarning
 *
 * Any precaution, guidance, contraindication, etc. related to consumption of alcohol while taking this drug.
 *
 * https://schema.org/alcoholWarning
 */
export declare const alcoholWarning: Property;
/**
 * algorithm
 *
 * The algorithm or rules to follow to compute the score.
 *
 * https://schema.org/algorithm
 */
export declare const algorithm: Property;
/**
 * alignmentType
 *
 * A category of alignment between the learning resource and the framework node. Recommended values include: 'requires', 'textComplexity', 'readingLevel', and 'educationalSubject'.
 *
 * https://schema.org/alignmentType
 */
export declare const alignmentType: Property;
/**
 * alternativeHeadline
 *
 * A secondary title of the CreativeWork.
 *
 * https://schema.org/alternativeHeadline
 */
export declare const alternativeHeadline: Property;
/**
 * alternativeOf
 *
 * Another gene which is a variation of this one.
 *
 * https://schema.org/alternativeOf
 */
export declare const alternativeOf: Property;
/**
 * amenityFeature
 *
 * An amenity feature (e.g. a characteristic or service) of the Accommodation. This generic property does not make a statement about whether the feature is included in an offer for the main accommodation or available at extra costs.
 *
 * https://schema.org/amenityFeature
 */
export declare const amenityFeature: Property;
/**
 * amount
 *
 * The amount of money.
 *
 * https://schema.org/amount
 */
export declare const amount: Property;
/**
 * amountOfThisGood
 *
 * The quantity of the goods included in the offer.
 *
 * https://schema.org/amountOfThisGood
 */
export declare const amountOfThisGood: Property;
/**
 * announcementLocation
 *
 * Indicates a specific [[CivicStructure]] or [[LocalBusiness]] associated with the SpecialAnnouncement. For example, a specific testing facility or business with special opening hours. For a larger geographic region like a quarantine of an entire region, use [[spatialCoverage]].
 *
 * https://schema.org/announcementLocation
 */
export declare const announcementLocation: Property;
/**
 * annualPercentageRate
 *
 * The annual rate that is charged for borrowing (or made by investing), expressed as a single percentage number that represents the actual yearly cost of funds over the term of a loan. This includes any fees or additional costs associated with the transaction.
 *
 * https://schema.org/annualPercentageRate
 */
export declare const annualPercentageRate: Property;
/**
 * answerCount
 *
 * The number of answers this question has received.
 *
 * https://schema.org/answerCount
 */
export declare const answerCount: Property;
/**
 * answerExplanation
 *
 * A step-by-step or full explanation about Answer. Can outline how this Answer was achieved or contain more broad clarification or statement about it.
 *
 * https://schema.org/answerExplanation
 */
export declare const answerExplanation: Property;
/**
 * antagonist
 *
 * The muscle whose action counteracts the specified muscle.
 *
 * https://schema.org/antagonist
 */
export declare const antagonist: Property;
/**
 * appearance
 *
 * Indicates an occurrence of a [[Claim]] in some [[CreativeWork]].
 *
 * https://schema.org/appearance
 */
export declare const appearance: Property;
/**
 * applicableCountry
 *
 * A country where a particular merchant return policy applies to, for example the two-letter ISO 3166-1 alpha-2 country code.
 *
 * https://schema.org/applicableCountry
 */
export declare const applicableCountry: Property;
/**
 * applicableLocation
 *
 * The location in which the status applies.
 *
 * https://schema.org/applicableLocation
 */
export declare const applicableLocation: Property;
/**
 * applicantLocationRequirements
 *
 * The location(s) applicants can apply from. This is usually used for telecommuting jobs where the applicant does not need to be in a physical office. Note: This should not be used for citizenship or work visa requirements.
 *
 * https://schema.org/applicantLocationRequirements
 */
export declare const applicantLocationRequirements: Property;
/**
 * application
 *
 * An application that can complete the request.
 *
 * https://schema.org/application
 */
export declare const application: Property;
/**
 * applicationCategory
 *
 * Type of software application, e.g. 'Game, Multimedia'.
 *
 * https://schema.org/applicationCategory
 */
export declare const applicationCategory: Property;
/**
 * applicationContact
 *
 * Contact details for further information relevant to this job posting.
 *
 * https://schema.org/applicationContact
 */
export declare const applicationContact: Property;
/**
 * applicationDeadline
 *
 * The date at which the program stops collecting applications for the next enrollment cycle.
 *
 * https://schema.org/applicationDeadline
 */
export declare const applicationDeadline: Property;
/**
 * applicationStartDate
 *
 * The date at which the program begins collecting applications for the next enrollment cycle.
 *
 * https://schema.org/applicationStartDate
 */
export declare const applicationStartDate: Property;
/**
 * applicationSubCategory
 *
 * Subcategory of the application, e.g. 'Arcade Game'.
 *
 * https://schema.org/applicationSubCategory
 */
export declare const applicationSubCategory: Property;
/**
 * applicationSuite
 *
 * The name of the application suite to which the application belongs (e.g. Excel belongs to Office).
 *
 * https://schema.org/applicationSuite
 */
export declare const applicationSuite: Property;
/**
 * appliesToDeliveryMethod
 *
 * The delivery method(s) to which the delivery charge or payment charge specification applies.
 *
 * https://schema.org/appliesToDeliveryMethod
 */
export declare const appliesToDeliveryMethod: Property;
/**
 * appliesToPaymentMethod
 *
 * The payment method(s) to which the payment charge specification applies.
 *
 * https://schema.org/appliesToPaymentMethod
 */
export declare const appliesToPaymentMethod: Property;
/**
 * archivedAt
 *
 * Indicates a page or other link involved in archival of a [[CreativeWork]]. In the case of [[MediaReview]], the items in a [[MediaReviewItem]] may often become inaccessible, but be archived by archival, journalistic, activist, or law enforcement organizations. In such cases, the referenced page may not directly publish the content.
 *
 * https://schema.org/archivedAt
 */
export declare const archivedAt: Property;
/**
 * area
 *
 * The area within which users can expect to reach the broadcast service.
 *
 * https://schema.org/area
 */
export declare const area: Property;
/**
 * arrivalAirport
 *
 * The airport where the flight terminates.
 *
 * https://schema.org/arrivalAirport
 */
export declare const arrivalAirport: Property;
/**
 * arrivalBoatTerminal
 *
 * The terminal or port from which the boat arrives.
 *
 * https://schema.org/arrivalBoatTerminal
 */
export declare const arrivalBoatTerminal: Property;
/**
 * arrivalBusStop
 *
 * The stop or station from which the bus arrives.
 *
 * https://schema.org/arrivalBusStop
 */
export declare const arrivalBusStop: Property;
/**
 * arrivalGate
 *
 * Identifier of the flight's arrival gate.
 *
 * https://schema.org/arrivalGate
 */
export declare const arrivalGate: Property;
/**
 * arrivalPlatform
 *
 * The platform where the train arrives.
 *
 * https://schema.org/arrivalPlatform
 */
export declare const arrivalPlatform: Property;
/**
 * arrivalStation
 *
 * The station where the train trip ends.
 *
 * https://schema.org/arrivalStation
 */
export declare const arrivalStation: Property;
/**
 * arrivalTerminal
 *
 * Identifier of the flight's arrival terminal.
 *
 * https://schema.org/arrivalTerminal
 */
export declare const arrivalTerminal: Property;
/**
 * arrivalTime
 *
 * The expected arrival time.
 *
 * https://schema.org/arrivalTime
 */
export declare const arrivalTime: Property;
/**
 * artEdition
 *
 * The number of copies when multiple copies of a piece of artwork are produced - e.g. for a limited edition of 20 prints, 'artEdition' refers to the total number of copies (in this example "20").
 *
 * https://schema.org/artEdition
 */
export declare const artEdition: Property;
/**
 * artMedium
 *
 * The material used. (E.g. Oil, Watercolour, Acrylic, Linoprint, Marble, Cyanotype, Digital, Lithograph, DryPoint, Intaglio, Pastel, Woodcut, Pencil, Mixed Media, etc.)
 *
 * https://schema.org/artMedium
 */
export declare const artMedium: Property;
/**
 * artform
 *
 * e.g. Painting, Drawing, Sculpture, Print, Photograph, Assemblage, Collage, etc.
 *
 * https://schema.org/artform
 */
export declare const artform: Property;
/**
 * articleBody
 *
 * The actual body of the article.
 *
 * https://schema.org/articleBody
 */
export declare const articleBody: Property;
/**
 * articleSection
 *
 * Articles may belong to one or more 'sections' in a magazine or newspaper, such as Sports, Lifestyle, etc.
 *
 * https://schema.org/articleSection
 */
export declare const articleSection: Property;
/**
 * artist
 *
 * The primary artist for a work
 *     	in a medium other than pencils or digital line art--for example, if the
 *     	primary artwork is done in watercolors or digital paints.
 *
 * https://schema.org/artist
 */
export declare const artist: Property;
/**
 * asin
 *
 * An Amazon Standard Identification Number (ASIN) is a 10-character alphanumeric unique identifier assigned by Amazon.com and its partners for product identification within the Amazon organization (summary from [Wikipedia](https://en.wikipedia.org/wiki/Amazon_Standard_Identification_Number)'s article).
 *
 * Note also that this is a definition for how to include ASINs in Schema.org data, and not a definition of ASINs in general - see documentation from Amazon for authoritative details.
 * ASINs are most commonly encoded as text strings, but the [asin] property supports URL/URI as potential values too.
 *
 * https://schema.org/asin
 */
export declare const asin: Property;
/**
 * aspect
 *
 * An aspect of medical practice that is considered on the page, such as 'diagnosis', 'treatment', 'causes', 'prognosis', 'etiology', 'epidemiology', etc.
 *
 * https://schema.org/aspect
 */
export declare const aspect: Property;
/**
 * assembly
 *
 * Library file name, e.g., mscorlib.dll, system.web.dll.
 *
 * https://schema.org/assembly
 */
export declare const assembly: Property;
/**
 * assemblyVersion
 *
 * Associated product/technology version. E.g., .NET Framework 4.5.
 *
 * https://schema.org/assemblyVersion
 */
export declare const assemblyVersion: Property;
/**
 * assesses
 *
 * The item being described is intended to assess the competency or learning outcome defined by the referenced term.
 *
 * https://schema.org/assesses
 */
export declare const assesses: Property;
/**
 * associatedAnatomy
 *
 * The anatomy of the underlying organ system or structures associated with this entity.
 *
 * https://schema.org/associatedAnatomy
 */
export declare const associatedAnatomy: Property;
/**
 * associatedArticle
 *
 * A NewsArticle associated with the Media Object.
 *
 * https://schema.org/associatedArticle
 */
export declare const associatedArticle: Property;
/**
 * associatedClaimReview
 *
 * An associated [[ClaimReview]], related by specific common content, topic or claim. The expectation is that this property would be most typically used in cases where a single activity is conducting both claim reviews and media reviews, in which case [[relatedMediaReview]] would commonly be used on a [[ClaimReview]], while [[relatedClaimReview]] would be used on [[MediaReview]].
 *
 * https://schema.org/associatedClaimReview
 */
export declare const associatedClaimReview: Property;
/**
 * associatedDisease
 *
 * Disease associated to this BioChemEntity. Such disease can be a MedicalCondition or a URL. If you want to add an evidence supporting the association, please use PropertyValue.
 *
 * https://schema.org/associatedDisease
 */
export declare const associatedDisease: Property;
/**
 * associatedMedia
 *
 * A media object that encodes this CreativeWork. This property is a synonym for encoding.
 *
 * https://schema.org/associatedMedia
 */
export declare const associatedMedia: Property;
/**
 * associatedMediaReview
 *
 * An associated [[MediaReview]], related by specific common content, topic or claim. The expectation is that this property would be most typically used in cases where a single activity is conducting both claim reviews and media reviews, in which case [[relatedMediaReview]] would commonly be used on a [[ClaimReview]], while [[relatedClaimReview]] would be used on [[MediaReview]].
 *
 * https://schema.org/associatedMediaReview
 */
export declare const associatedMediaReview: Property;
/**
 * associatedPathophysiology
 *
 * If applicable, a description of the pathophysiology associated with the anatomical system, including potential abnormal changes in the mechanical, physical, and biochemical functions of the system.
 *
 * https://schema.org/associatedPathophysiology
 */
export declare const associatedPathophysiology: Property;
/**
 * athlete
 *
 * A person that acts as performing member of a sports team; a player as opposed to a coach.
 *
 * https://schema.org/athlete
 */
export declare const athlete: Property;
/**
 * attendees
 *
 * A person attending the event.
 *
 * https://schema.org/attendees
 */
export declare const attendees: Property;
/**
 * audienceType
 *
 * The target group associated with a given audience (e.g. veterans, car owners, musicians, etc.).
 *
 * https://schema.org/audienceType
 */
export declare const audienceType: Property;
/**
 * audio
 *
 * An embedded audio object.
 *
 * https://schema.org/audio
 */
export declare const audio: Property;
/**
 * authenticator
 *
 * The Organization responsible for authenticating the user's subscription. For example, many media apps require a cable/satellite provider to authenticate your subscription before playing media.
 *
 * https://schema.org/authenticator
 */
export declare const authenticator: Property;
/**
 * author
 *
 * The author of this content or rating. Please note that author is special in that HTML 5 provides a special mechanism for indicating authorship via the rel tag. That is equivalent to this and may be used interchangeably.
 *
 * https://schema.org/author
 */
export declare const author: Property;
/**
 * availability
 *
 * The availability of this item&#x2014;for example In stock, Out of stock, Pre-order, etc.
 *
 * https://schema.org/availability
 */
export declare const availability: Property;
/**
 * availabilityEnds
 *
 * The end of the availability of the product or service included in the offer.
 *
 * https://schema.org/availabilityEnds
 */
export declare const availabilityEnds: Property;
/**
 * availabilityStarts
 *
 * The beginning of the availability of the product or service included in the offer.
 *
 * https://schema.org/availabilityStarts
 */
export declare const availabilityStarts: Property;
/**
 * availableAtOrFrom
 *
 * The place(s) from which the offer can be obtained (e.g. store locations).
 *
 * https://schema.org/availableAtOrFrom
 */
export declare const availableAtOrFrom: Property;
/**
 * availableChannel
 *
 * A means of accessing the service (e.g. a phone bank, a web site, a location, etc.).
 *
 * https://schema.org/availableChannel
 */
export declare const availableChannel: Property;
/**
 * availableDeliveryMethod
 *
 * The delivery method(s) available for this offer.
 *
 * https://schema.org/availableDeliveryMethod
 */
export declare const availableDeliveryMethod: Property;
/**
 * availableFrom
 *
 * When the item is available for pickup from the store, locker, etc.
 *
 * https://schema.org/availableFrom
 */
export declare const availableFrom: Property;
/**
 * availableIn
 *
 * The location in which the strength is available.
 *
 * https://schema.org/availableIn
 */
export declare const availableIn: Property;
/**
 * availableLanguage
 *
 * A language someone may use with or at the item, service or place. Please use one of the language codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47). See also [[inLanguage]].
 *
 * https://schema.org/availableLanguage
 */
export declare const availableLanguage: Property;
/**
 * availableService
 *
 * A medical service available from this provider.
 *
 * https://schema.org/availableService
 */
export declare const availableService: Property;
/**
 * availableStrength
 *
 * An available dosage strength for the drug.
 *
 * https://schema.org/availableStrength
 */
export declare const availableStrength: Property;
/**
 * availableTest
 *
 * A diagnostic test or procedure offered by this lab.
 *
 * https://schema.org/availableTest
 */
export declare const availableTest: Property;
/**
 * availableThrough
 *
 * After this date, the item will no longer be available for pickup.
 *
 * https://schema.org/availableThrough
 */
export declare const availableThrough: Property;
/**
 * awards
 *
 * Awards won by or for this item.
 *
 * https://schema.org/awards
 */
export declare const awards: Property;
/**
 * awayTeam
 *
 * The away team in a sports event.
 *
 * https://schema.org/awayTeam
 */
export declare const awayTeam: Property;
/**
 * backstory
 *
 * For an [[Article]], typically a [[NewsArticle]], the backstory property provides a textual summary giving a brief explanation of why and how an article was created. In a journalistic setting this could include information about reporting process, methods, interviews, data sources, etc.
 *
 * https://schema.org/backstory
 */
export declare const backstory: Property;
/**
 * bankAccountType
 *
 * The type of a bank account.
 *
 * https://schema.org/bankAccountType
 */
export declare const bankAccountType: Property;
/**
 * baseSalary
 *
 * The base salary of the job or of an employee in an EmployeeRole.
 *
 * https://schema.org/baseSalary
 */
export declare const baseSalary: Property;
/**
 * bccRecipient
 *
 * A sub property of recipient. The recipient blind copied on a message.
 *
 * https://schema.org/bccRecipient
 */
export declare const bccRecipient: Property;
/**
 * bed
 *
 * The type of bed or beds included in the accommodation. For the single case of just one bed of a certain type, you use bed directly with a text.
 *       If you want to indicate the quantity of a certain kind of bed, use an instance of BedDetails. For more detailed information, use the amenityFeature property.
 *
 * https://schema.org/bed
 */
export declare const bed: Property;
/**
 * beforeMedia
 *
 * A media object representing the circumstances before performing this direction.
 *
 * https://schema.org/beforeMedia
 */
export declare const beforeMedia: Property;
/**
 * beneficiaryBank
 *
 * A bank or bank’s branch, financial institution or international financial institution operating the beneficiary’s bank account or releasing funds for the beneficiary.
 *
 * https://schema.org/beneficiaryBank
 */
export declare const beneficiaryBank: Property;
/**
 * benefits
 *
 * Description of benefits associated with the job.
 *
 * https://schema.org/benefits
 */
export declare const benefits: Property;
/**
 * benefitsSummaryUrl
 *
 * The URL that goes directly to the summary of benefits and coverage for the specific standard plan or plan variation.
 *
 * https://schema.org/benefitsSummaryUrl
 */
export declare const benefitsSummaryUrl: Property;
/**
 * bestRating
 *
 * The highest value allowed in this rating system. If bestRating is omitted, 5 is assumed.
 *
 * https://schema.org/bestRating
 */
export declare const bestRating: Property;
/**
 * billingAddress
 *
 * The billing address for the order.
 *
 * https://schema.org/billingAddress
 */
export declare const billingAddress: Property;
/**
 * billingDuration
 *
 * Specifies for how long this price (or price component) will be billed. Can be used, for example, to model the contractual duration of a subscription or payment plan. Type can be either a Duration or a Number (in which case the unit of measurement, for example month, is specified by the unitCode property).
 *
 * https://schema.org/billingDuration
 */
export declare const billingDuration: Property;
/**
 * billingIncrement
 *
 * This property specifies the minimal quantity and rounding increment that will be the basis for the billing. The unit of measurement is specified by the unitCode property.
 *
 * https://schema.org/billingIncrement
 */
export declare const billingIncrement: Property;
/**
 * billingPeriod
 *
 * The time interval used to compute the invoice.
 *
 * https://schema.org/billingPeriod
 */
export declare const billingPeriod: Property;
/**
 * billingStart
 *
 * Specifies after how much time this price (or price component) becomes valid and billing starts. Can be used, for example, to model a price increase after the first year of a subscription. The unit of measurement is specified by the unitCode property.
 *
 * https://schema.org/billingStart
 */
export declare const billingStart: Property;
/**
 * bioChemInteraction
 *
 * A BioChemEntity that is known to interact with this item.
 *
 * https://schema.org/bioChemInteraction
 */
export declare const bioChemInteraction: Property;
/**
 * bioChemSimilarity
 *
 * A similar BioChemEntity, e.g., obtained by fingerprint similarity algorithms.
 *
 * https://schema.org/bioChemSimilarity
 */
export declare const bioChemSimilarity: Property;
/**
 * biologicalRole
 *
 * A role played by the BioChemEntity within a biological context.
 *
 * https://schema.org/biologicalRole
 */
export declare const biologicalRole: Property;
/**
 * biomechnicalClass
 *
 * The biomechanical properties of the bone.
 *
 * https://schema.org/biomechnicalClass
 */
export declare const biomechnicalClass: Property;
/**
 * birthDate
 *
 * Date of birth.
 *
 * https://schema.org/birthDate
 */
export declare const birthDate: Property;
/**
 * birthPlace
 *
 * The place where the person was born.
 *
 * https://schema.org/birthPlace
 */
export declare const birthPlace: Property;
/**
 * bitrate
 *
 * The bitrate of the media object.
 *
 * https://schema.org/bitrate
 */
export declare const bitrate: Property;
/**
 * blogPosts
 *
 * Indicates a post that is part of a [[Blog]]. Note that historically, what we term a "Blog" was once known as a "weblog", and that what we term a "BlogPosting" is now often colloquially referred to as a "blog".
 *
 * https://schema.org/blogPosts
 */
export declare const blogPosts: Property;
/**
 * bloodSupply
 *
 * The blood vessel that carries blood from the heart to the muscle.
 *
 * https://schema.org/bloodSupply
 */
export declare const bloodSupply: Property;
/**
 * boardingGroup
 *
 * The airline-specific indicator of boarding order / preference.
 *
 * https://schema.org/boardingGroup
 */
export declare const boardingGroup: Property;
/**
 * boardingPolicy
 *
 * The type of boarding policy used by the airline (e.g. zone-based or group-based).
 *
 * https://schema.org/boardingPolicy
 */
export declare const boardingPolicy: Property;
/**
 * bodyLocation
 *
 * Location in the body of the anatomical structure.
 *
 * https://schema.org/bodyLocation
 */
export declare const bodyLocation: Property;
/**
 * bodyType
 *
 * Indicates the design and body style of the vehicle (e.g. station wagon, hatchback, etc.).
 *
 * https://schema.org/bodyType
 */
export declare const bodyType: Property;
/**
 * bookEdition
 *
 * The edition of the book.
 *
 * https://schema.org/bookEdition
 */
export declare const bookEdition: Property;
/**
 * bookFormat
 *
 * The format of the book.
 *
 * https://schema.org/bookFormat
 */
export declare const bookFormat: Property;
/**
 * bookingAgent
 *
 * 'bookingAgent' is an out-dated term indicating a 'broker' that serves as a booking agent.
 *
 * https://schema.org/bookingAgent
 */
export declare const bookingAgent: Property;
/**
 * bookingTime
 *
 * The date and time the reservation was booked.
 *
 * https://schema.org/bookingTime
 */
export declare const bookingTime: Property;
/**
 * borrower
 *
 * A sub property of participant. The person that borrows the object being lent.
 *
 * https://schema.org/borrower
 */
export declare const borrower: Property;
/**
 * box
 *
 * A box is the area enclosed by the rectangle formed by two points. The first point is the lower corner, the second point is the upper corner. A box is expressed as two points separated by a space character.
 *
 * https://schema.org/box
 */
export declare const box: Property;
/**
 * branch
 *
 * The branches that delineate from the nerve bundle. Not to be confused with [[branchOf]].
 *
 * https://schema.org/branch
 */
export declare const branch: Property;
/**
 * branchCode
 *
 * A short textual code (also called "store code") that uniquely identifies a place of business. The code is typically assigned by the parentOrganization and used in structured URLs.\n\nFor example, in the URL http://www.starbucks.co.uk/store-locator/etc/detail/3047 the code "3047" is a branchCode for a particular branch.
 *
 *
 * https://schema.org/branchCode
 */
export declare const branchCode: Property;
/**
 * branchOf
 *
 * The larger organization that this local business is a branch of, if any. Not to be confused with (anatomical) [[branch]].
 *
 * https://schema.org/branchOf
 */
export declare const branchOf: Property;
/**
 * brand
 *
 * The brand(s) associated with a product or service, or the brand(s) maintained by an organization or business person.
 *
 * https://schema.org/brand
 */
export declare const brand: Property;
/**
 * breadcrumb
 *
 * A set of links that can help a user understand and navigate a website hierarchy.
 *
 * https://schema.org/breadcrumb
 */
export declare const breadcrumb: Property;
/**
 * breastfeedingWarning
 *
 * Any precaution, guidance, contraindication, etc. related to this drug's use by breastfeeding mothers.
 *
 * https://schema.org/breastfeedingWarning
 */
export declare const breastfeedingWarning: Property;
/**
 * broadcastAffiliateOf
 *
 * The media network(s) whose content is broadcast on this station.
 *
 * https://schema.org/broadcastAffiliateOf
 */
export declare const broadcastAffiliateOf: Property;
/**
 * broadcastChannelId
 *
 * The unique address by which the BroadcastService can be identified in a provider lineup. In US, this is typically a number.
 *
 * https://schema.org/broadcastChannelId
 */
export declare const broadcastChannelId: Property;
/**
 * broadcastDisplayName
 *
 * The name displayed in the channel guide. For many US affiliates, it is the network name.
 *
 * https://schema.org/broadcastDisplayName
 */
export declare const broadcastDisplayName: Property;
/**
 * broadcastFrequency
 *
 * The frequency used for over-the-air broadcasts. Numeric values or simple ranges, e.g. 87-99. In addition a shortcut idiom is supported for frequences of AM and FM radio channels, e.g. "87 FM".
 *
 * https://schema.org/broadcastFrequency
 */
export declare const broadcastFrequency: Property;
/**
 * broadcastFrequencyValue
 *
 * The frequency in MHz for a particular broadcast.
 *
 * https://schema.org/broadcastFrequencyValue
 */
export declare const broadcastFrequencyValue: Property;
/**
 * broadcastOfEvent
 *
 * The event being broadcast such as a sporting event or awards ceremony.
 *
 * https://schema.org/broadcastOfEvent
 */
export declare const broadcastOfEvent: Property;
/**
 * broadcastServiceTier
 *
 * The type of service required to have access to the channel (e.g. Standard or Premium).
 *
 * https://schema.org/broadcastServiceTier
 */
export declare const broadcastServiceTier: Property;
/**
 * broadcastSignalModulation
 *
 * The modulation (e.g. FM, AM, etc) used by a particular broadcast service.
 *
 * https://schema.org/broadcastSignalModulation
 */
export declare const broadcastSignalModulation: Property;
/**
 * broadcastSubChannel
 *
 * The subchannel used for the broadcast.
 *
 * https://schema.org/broadcastSubChannel
 */
export declare const broadcastSubChannel: Property;
/**
 * broadcastTimezone
 *
 * The timezone in [ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601) for which the service bases its broadcasts.
 *
 * https://schema.org/broadcastTimezone
 */
export declare const broadcastTimezone: Property;
/**
 * broadcaster
 *
 * The organization owning or operating the broadcast service.
 *
 * https://schema.org/broadcaster
 */
export declare const broadcaster: Property;
/**
 * browserRequirements
 *
 * Specifies browser requirements in human-readable text. For example, 'requires HTML5 support'.
 *
 * https://schema.org/browserRequirements
 */
export declare const browserRequirements: Property;
/**
 * busName
 *
 * The name of the bus (e.g. Bolt Express).
 *
 * https://schema.org/busName
 */
export declare const busName: Property;
/**
 * busNumber
 *
 * The unique identifier for the bus.
 *
 * https://schema.org/busNumber
 */
export declare const busNumber: Property;
/**
 * businessDays
 *
 * Days of the week when the merchant typically operates, indicated via opening hours markup.
 *
 * https://schema.org/businessDays
 */
export declare const businessDays: Property;
/**
 * businessFunction
 *
 * The business function (e.g. sell, lease, repair, dispose) of the offer or component of a bundle (TypeAndQuantityNode). The default is http://purl.org/goodrelations/v1#Sell.
 *
 * https://schema.org/businessFunction
 */
export declare const businessFunction: Property;
/**
 * buyer
 *
 * A sub property of participant. The participant/person/organization that bought the object.
 *
 * https://schema.org/buyer
 */
export declare const buyer: Property;
/**
 * byArtist
 *
 * The artist that performed this album or recording.
 *
 * https://schema.org/byArtist
 */
export declare const byArtist: Property;
/**
 * byDay
 *
 * Defines the day(s) of the week on which a recurring [[Event]] takes place. May be specified using either [[DayOfWeek]], or alternatively [[Text]] conforming to iCal's syntax for byDay recurrence rules.
 *
 * https://schema.org/byDay
 */
export declare const byDay: Property;
/**
 * byMonth
 *
 * Defines the month(s) of the year on which a recurring [[Event]] takes place. Specified as an [[Integer]] between 1-12. January is 1.
 *
 * https://schema.org/byMonth
 */
export declare const byMonth: Property;
/**
 * byMonthDay
 *
 * Defines the day(s) of the month on which a recurring [[Event]] takes place. Specified as an [[Integer]] between 1-31.
 *
 * https://schema.org/byMonthDay
 */
export declare const byMonthDay: Property;
/**
 * byMonthWeek
 *
 * Defines the week(s) of the month on which a recurring Event takes place. Specified as an Integer between 1-5. For clarity, byMonthWeek is best used in conjunction with byDay to indicate concepts like the first and third Mondays of a month.
 *
 * https://schema.org/byMonthWeek
 */
export declare const byMonthWeek: Property;
/**
 * callSign
 *
 * A [callsign](https://en.wikipedia.org/wiki/Call_sign), as used in broadcasting and radio communications to identify people, radio and TV stations, or vehicles.
 *
 * https://schema.org/callSign
 */
export declare const callSign: Property;
/**
 * calories
 *
 * The number of calories.
 *
 * https://schema.org/calories
 */
export declare const calories: Property;
/**
 * candidate
 *
 * A sub property of object. The candidate subject of this action.
 *
 * https://schema.org/candidate
 */
export declare const candidate: Property;
/**
 * carbohydrateContent
 *
 * The number of grams of carbohydrates.
 *
 * https://schema.org/carbohydrateContent
 */
export declare const carbohydrateContent: Property;
/**
 * cargoVolume
 *
 * The available volume for cargo or luggage. For automobiles, this is usually the trunk volume.\n\nTypical unit code(s): LTR for liters, FTQ for cubic foot/feet\n\nNote: You can use [[minValue]] and [[maxValue]] to indicate ranges.
 *
 * https://schema.org/cargoVolume
 */
export declare const cargoVolume: Property;
/**
 * carrier
 *
 * 'carrier' is an out-dated term indicating the 'provider' for parcel delivery and flights.
 *
 * https://schema.org/carrier
 */
export declare const carrier: Property;
/**
 * carrierRequirements
 *
 * Specifies specific carrier(s) requirements for the application (e.g. an application may only work on a specific carrier network).
 *
 * https://schema.org/carrierRequirements
 */
export declare const carrierRequirements: Property;
/**
 * cashBack
 *
 * A cardholder benefit that pays the cardholder a small percentage of their net expenditures.
 *
 * https://schema.org/cashBack
 */
export declare const cashBack: Property;
/**
 * catalog
 *
 * A data catalog which contains this dataset.
 *
 * https://schema.org/catalog
 */
export declare const catalog: Property;
/**
 * catalogNumber
 *
 * The catalog number for the release.
 *
 * https://schema.org/catalogNumber
 */
export declare const catalogNumber: Property;
/**
 * causeOf
 *
 * The condition, complication, symptom, sign, etc. caused.
 *
 * https://schema.org/causeOf
 */
export declare const causeOf: Property;
/**
 * ccRecipient
 *
 * A sub property of recipient. The recipient copied on a message.
 *
 * https://schema.org/ccRecipient
 */
export declare const ccRecipient: Property;
/**
 * character
 *
 * Fictional person connected with a creative work.
 *
 * https://schema.org/character
 */
export declare const character: Property;
/**
 * characterAttribute
 *
 * A piece of data that represents a particular aspect of a fictional character (skill, power, character points, advantage, disadvantage).
 *
 * https://schema.org/characterAttribute
 */
export declare const characterAttribute: Property;
/**
 * characterName
 *
 * The name of a character played in some acting or performing role, i.e. in a PerformanceRole.
 *
 * https://schema.org/characterName
 */
export declare const characterName: Property;
/**
 * cheatCode
 *
 * Cheat codes to the game.
 *
 * https://schema.org/cheatCode
 */
export declare const cheatCode: Property;
/**
 * checkinTime
 *
 * The earliest someone may check into a lodging establishment.
 *
 * https://schema.org/checkinTime
 */
export declare const checkinTime: Property;
/**
 * checkoutPageURLTemplate
 *
 * A URL template (RFC 6570) for a checkout page for an offer. This approach allows merchants to specify a URL for online checkout of the offered product, by interpolating parameters such as the logged in user ID, product ID, quantity, discount code etc. Parameter naming and standardization are not specified here.
 *
 * https://schema.org/checkoutPageURLTemplate
 */
export declare const checkoutPageURLTemplate: Property;
/**
 * checkoutTime
 *
 * The latest someone may check out of a lodging establishment.
 *
 * https://schema.org/checkoutTime
 */
export declare const checkoutTime: Property;
/**
 * chemicalComposition
 *
 * The chemical composition describes the identity and relative ratio of the chemical elements that make up the substance.
 *
 * https://schema.org/chemicalComposition
 */
export declare const chemicalComposition: Property;
/**
 * chemicalRole
 *
 * A role played by the BioChemEntity within a chemical context.
 *
 * https://schema.org/chemicalRole
 */
export declare const chemicalRole: Property;
/**
 * childMaxAge
 *
 * Maximal age of the child.
 *
 * https://schema.org/childMaxAge
 */
export declare const childMaxAge: Property;
/**
 * childMinAge
 *
 * Minimal age of the child.
 *
 * https://schema.org/childMinAge
 */
export declare const childMinAge: Property;
/**
 * children
 *
 * A child of the person.
 *
 * https://schema.org/children
 */
export declare const children: Property;
/**
 * cholesterolContent
 *
 * The number of milligrams of cholesterol.
 *
 * https://schema.org/cholesterolContent
 */
export declare const cholesterolContent: Property;
/**
 * circle
 *
 * A circle is the circular region of a specified radius centered at a specified latitude and longitude. A circle is expressed as a pair followed by a radius in meters.
 *
 * https://schema.org/circle
 */
export declare const circle: Property;
/**
 * citation
 *
 * A citation or reference to another creative work, such as another publication, web page, scholarly article, etc.
 *
 * https://schema.org/citation
 */
export declare const citation: Property;
/**
 * claimInterpreter
 *
 * For a [[Claim]] interpreted from [[MediaObject]] content
 *     sed to indicate a claim contained, implied or refined from the content of a [[MediaObject]].
 *
 * https://schema.org/claimInterpreter
 */
export declare const claimInterpreter: Property;
/**
 * claimReviewed
 *
 * A short summary of the specific claims reviewed in a ClaimReview.
 *
 * https://schema.org/claimReviewed
 */
export declare const claimReviewed: Property;
/**
 * clincalPharmacology
 *
 * Description of the absorption and elimination of drugs, including their concentration (pharmacokinetics, pK) and biological effects (pharmacodynamics, pD).
 *
 * https://schema.org/clincalPharmacology
 */
export declare const clincalPharmacology: Property;
/**
 * clipNumber
 *
 * Position of the clip within an ordered group of clips.
 *
 * https://schema.org/clipNumber
 */
export declare const clipNumber: Property;
/**
 * closes
 *
 * The closing hour of the place or service on the given day(s) of the week.
 *
 * https://schema.org/closes
 */
export declare const closes: Property;
/**
 * coach
 *
 * A person that acts in a coaching role for a sports team.
 *
 * https://schema.org/coach
 */
export declare const coach: Property;
/**
 * code
 *
 * A medical code for the entity, taken from a controlled vocabulary or ontology such as ICD-9, DiseasesDB, MeSH, SNOMED-CT, RxNorm, etc.
 *
 * https://schema.org/code
 */
export declare const code: Property;
/**
 * codeRepository
 *
 * Link to the repository where the un-compiled, human readable code and related code is located (SVN, GitHub, CodePlex).
 *
 * https://schema.org/codeRepository
 */
export declare const codeRepository: Property;
/**
 * codeValue
 *
 * A short textual code that uniquely identifies the value.
 *
 * https://schema.org/codeValue
 */
export declare const codeValue: Property;
/**
 * codingSystem
 *
 * The coding system, e.g. 'ICD-10'.
 *
 * https://schema.org/codingSystem
 */
export declare const codingSystem: Property;
/**
 * colleagues
 *
 * A colleague of the person.
 *
 * https://schema.org/colleagues
 */
export declare const colleagues: Property;
/**
 * collection
 *
 * A sub property of object. The collection target of the action.
 *
 * https://schema.org/collection
 */
export declare const collection: Property;
/**
 *
 *
 *
 *
 * https://schema.org/collectionSize
 */
export declare const collectionSize: Property;
/**
 * color
 *
 * The color of the product.
 *
 * https://schema.org/color
 */
export declare const color: Property;
/**
 * colorist
 *
 * The individual who adds color to inked drawings.
 *
 * https://schema.org/colorist
 */
export declare const colorist: Property;
/**
 * comment
 *
 * Comments, typically from users.
 *
 * https://schema.org/comment
 */
export declare const comment: Property;
/**
 * commentCount
 *
 * The number of comments this CreativeWork (e.g. Article, Question or Answer) has received. This is most applicable to works published in Web sites with commenting system; additional comments may exist elsewhere.
 *
 * https://schema.org/commentCount
 */
export declare const commentCount: Property;
/**
 * commentText
 *
 * The text of the UserComment.
 *
 * https://schema.org/commentText
 */
export declare const commentText: Property;
/**
 * commentTime
 *
 * The time at which the UserComment was made.
 *
 * https://schema.org/commentTime
 */
export declare const commentTime: Property;
/**
 * competencyRequired
 *
 * Knowledge, skill, ability or personal attribute that must be demonstrated by a person or other entity in order to do something such as earn an Educational Occupational Credential or understand a LearningResource.
 *
 * https://schema.org/competencyRequired
 */
export declare const competencyRequired: Property;
/**
 * composer
 *
 * The person or organization who wrote a composition, or who is the composer of a work performed at some event.
 *
 * https://schema.org/composer
 */
export declare const composer: Property;
/**
 * comprisedOf
 *
 * Specifying something physically contained by something else. Typically used here for the underlying anatomical structures, such as organs, that comprise the anatomical system.
 *
 * https://schema.org/comprisedOf
 */
export declare const comprisedOf: Property;
/**
 * conditionsOfAccess
 *
 * Conditions that affect the availability of, or method(s) of access to, an item. Typically used for real world items such as an [[ArchiveComponent]] held by an [[ArchiveOrganization]]. This property is not suitable for use as a general Web access control mechanism. It is expressed only in natural language.\n\nFor example "Available by appointment from the Reading Room" or "Accessible only from logged-in accounts ".
 *
 * https://schema.org/conditionsOfAccess
 */
export declare const conditionsOfAccess: Property;
/**
 * confirmationNumber
 *
 * A number that confirms the given order or payment has been received.
 *
 * https://schema.org/confirmationNumber
 */
export declare const confirmationNumber: Property;
/**
 * connectedTo
 *
 * Other anatomical structures to which this structure is connected.
 *
 * https://schema.org/connectedTo
 */
export declare const connectedTo: Property;
/**
 * constraintProperty
 *
 * Indicates a property used as a constraint. For example, in the definition of a [[StatisticalVariable]]. The value is a property, either from within Schema.org or from other compatible (e.g. RDF) systems such as DataCommons.org or Wikidata.org.
 *
 * https://schema.org/constraintProperty
 */
export declare const constraintProperty: Property;
/**
 * contactOption
 *
 * An option available on this contact point (e.g. a toll-free number or support for hearing-impaired callers).
 *
 * https://schema.org/contactOption
 */
export declare const contactOption: Property;
/**
 * contactPoints
 *
 * A contact point for a person or organization.
 *
 * https://schema.org/contactPoints
 */
export declare const contactPoints: Property;
/**
 * contactType
 *
 * A person or organization can have different contact points, for different purposes. For example, a sales contact point, a PR contact point and so on. This property is used to specify the kind of contact point.
 *
 * https://schema.org/contactType
 */
export declare const contactType: Property;
/**
 * contactlessPayment
 *
 * A secure method for consumers to purchase products or services via debit, credit or smartcards by using RFID or NFC technology.
 *
 * https://schema.org/contactlessPayment
 */
export declare const contactlessPayment: Property;
/**
 * containedIn
 *
 * The basic containment relation between a place and one that contains it.
 *
 * https://schema.org/containedIn
 */
export declare const containedIn: Property;
/**
 * contentRating
 *
 * Official rating of a piece of content&#x2014;for example, 'MPAA PG-13'.
 *
 * https://schema.org/contentRating
 */
export declare const contentRating: Property;
/**
 * contentReferenceTime
 *
 * The specific time described by a creative work, for works (e.g. articles, video objects etc.) that emphasise a particular moment within an Event.
 *
 * https://schema.org/contentReferenceTime
 */
export declare const contentReferenceTime: Property;
/**
 * contentSize
 *
 * File size in (mega/kilo)bytes.
 *
 * https://schema.org/contentSize
 */
export declare const contentSize: Property;
/**
 * contentType
 *
 * The supported content type(s) for an EntryPoint response.
 *
 * https://schema.org/contentType
 */
export declare const contentType: Property;
/**
 * contentUrl
 *
 * Actual bytes of the media object, for example the image file or video file.
 *
 * https://schema.org/contentUrl
 */
export declare const contentUrl: Property;
/**
 * contraindication
 *
 * A contraindication for this therapy.
 *
 * https://schema.org/contraindication
 */
export declare const contraindication: Property;
/**
 * contributor
 *
 * A secondary contributor to the CreativeWork or Event.
 *
 * https://schema.org/contributor
 */
export declare const contributor: Property;
/**
 * cookTime
 *
 * The time it takes to actually cook the dish, in [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601).
 *
 * https://schema.org/cookTime
 */
export declare const cookTime: Property;
/**
 * cookingMethod
 *
 * The method of cooking, such as Frying, Steaming, ...
 *
 * https://schema.org/cookingMethod
 */
export declare const cookingMethod: Property;
/**
 * copyrightHolder
 *
 * The party holding the legal copyright to the CreativeWork.
 *
 * https://schema.org/copyrightHolder
 */
export declare const copyrightHolder: Property;
/**
 * copyrightNotice
 *
 * Text of a notice appropriate for describing the copyright aspects of this Creative Work, ideally indicating the owner of the copyright for the Work.
 *
 * https://schema.org/copyrightNotice
 */
export declare const copyrightNotice: Property;
/**
 * copyrightYear
 *
 * The year during which the claimed copyright for the CreativeWork was first asserted.
 *
 * https://schema.org/copyrightYear
 */
export declare const copyrightYear: Property;
/**
 * correction
 *
 * Indicates a correction to a [[CreativeWork]], either via a [[CorrectionComment]], textually or in another document.
 *
 * https://schema.org/correction
 */
export declare const correction: Property;
/**
 * correctionsPolicy
 *
 * For an [[Organization]] (e.g. [[NewsMediaOrganization]]), a statement describing (in news media, the newsroom’s) disclosure and correction policy for errors.
 *
 * https://schema.org/correctionsPolicy
 */
export declare const correctionsPolicy: Property;
/**
 * costCategory
 *
 * The category of cost, such as wholesale, retail, reimbursement cap, etc.
 *
 * https://schema.org/costCategory
 */
export declare const costCategory: Property;
/**
 * costCurrency
 *
 * The currency (in 3-letter) of the drug cost. See: http://en.wikipedia.org/wiki/ISO_4217.
 *
 * https://schema.org/costCurrency
 */
export declare const costCurrency: Property;
/**
 * costOrigin
 *
 * Additional details to capture the origin of the cost data. For example, 'Medicare Part B'.
 *
 * https://schema.org/costOrigin
 */
export declare const costOrigin: Property;
/**
 * costPerUnit
 *
 * The cost per unit of the drug.
 *
 * https://schema.org/costPerUnit
 */
export declare const costPerUnit: Property;
/**
 * countriesNotSupported
 *
 * Countries for which the application is not supported. You can also provide the two-letter ISO 3166-1 alpha-2 country code.
 *
 * https://schema.org/countriesNotSupported
 */
export declare const countriesNotSupported: Property;
/**
 * countriesSupported
 *
 * Countries for which the application is supported. You can also provide the two-letter ISO 3166-1 alpha-2 country code.
 *
 * https://schema.org/countriesSupported
 */
export declare const countriesSupported: Property;
/**
 * countryOfAssembly
 *
 * The place where the product was assembled.
 *
 * https://schema.org/countryOfAssembly
 */
export declare const countryOfAssembly: Property;
/**
 * countryOfLastProcessing
 *
 * The place where the item (typically [[Product]]) was last processed and tested before importation.
 *
 * https://schema.org/countryOfLastProcessing
 */
export declare const countryOfLastProcessing: Property;
/**
 * countryOfOrigin
 *
 * The country of origin of something, including products as well as creative  works such as movie and TV content.
 *
 * In the case of TV and movie, this would be the country of the principle offices of the production company or individual responsible for the movie. For other kinds of [[CreativeWork]] it is difficult to provide fully general guidance, and properties such as [[contentLocation]] and [[locationCreated]] may be more applicable.
 *
 * In the case of products, the country of origin of the product. The exact interpretation of this may vary by context and product type, and cannot be fully enumerated here.
 *
 * https://schema.org/countryOfOrigin
 */
export declare const countryOfOrigin: Property;
/**
 * course
 *
 * A sub property of location. The course where this action was taken.
 *
 * https://schema.org/course
 */
export declare const course: Property;
/**
 * courseCode
 *
 * The identifier for the [[Course]] used by the course [[provider]] (e.g. CS101 or 6.001).
 *
 * https://schema.org/courseCode
 */
export declare const courseCode: Property;
/**
 * courseMode
 *
 * The medium or means of delivery of the course instance or the mode of study, either as a text label (e.g. "online", "onsite" or "blended"; "synchronous" or "asynchronous"; "full-time" or "part-time") or as a URL reference to a term from a controlled vocabulary (e.g. https://ceds.ed.gov/element/001311#Asynchronous).
 *
 * https://schema.org/courseMode
 */
export declare const courseMode: Property;
/**
 * coursePrerequisites
 *
 * Requirements for taking the Course. May be completion of another [[Course]] or a textual description like "permission of instructor". Requirements may be a pre-requisite competency, referenced using [[AlignmentObject]].
 *
 * https://schema.org/coursePrerequisites
 */
export declare const coursePrerequisites: Property;
/**
 * courseSchedule
 *
 * Represents the length and pace of a course, expressed as a [[Schedule]].
 *
 * https://schema.org/courseSchedule
 */
export declare const courseSchedule: Property;
/**
 * courseWorkload
 *
 * The amount of work expected of students taking the course, often provided as a figure per week or per month, and may be broken down by type. For example, "2 hours of lectures, 1 hour of lab work and 3 hours of independent study per week".
 *
 * https://schema.org/courseWorkload
 */
export declare const courseWorkload: Property;
/**
 * coverageEndTime
 *
 * The time when the live blog will stop covering the Event. Note that coverage may continue after the Event concludes.
 *
 * https://schema.org/coverageEndTime
 */
export declare const coverageEndTime: Property;
/**
 * coverageStartTime
 *
 * The time when the live blog will begin covering the Event. Note that coverage may begin before the Event's start time. The LiveBlogPosting may also be created before coverage begins.
 *
 * https://schema.org/coverageStartTime
 */
export declare const coverageStartTime: Property;
/**
 * creativeWorkStatus
 *
 * The status of a creative work in terms of its stage in a lifecycle. Example terms include Incomplete, Draft, Published, Obsolete. Some organizations define a set of terms for the stages of their publication lifecycle.
 *
 * https://schema.org/creativeWorkStatus
 */
export declare const creativeWorkStatus: Property;
/**
 * credentialCategory
 *
 * The category or type of credential being described, for example "degree”, “certificate”, “badge”, or more specific term.
 *
 * https://schema.org/credentialCategory
 */
export declare const credentialCategory: Property;
/**
 * creditText
 *
 * Text that can be used to credit person(s) and/or organization(s) associated with a published Creative Work.
 *
 * https://schema.org/creditText
 */
export declare const creditText: Property;
/**
 * creditedTo
 *
 * The group the release is credited to if different than the byArtist. For example, Red and Blue is credited to "Stefani Germanotta Band", but by Lady Gaga.
 *
 * https://schema.org/creditedTo
 */
export declare const creditedTo: Property;
/**
 * cssSelector
 *
 * A CSS selector, e.g. of a [[SpeakableSpecification]] or [[WebPageElement]]. In the latter case, multiple matches within a page can constitute a single conceptual "Web page element".
 *
 * https://schema.org/cssSelector
 */
export declare const cssSelector: Property;
/**
 * currenciesAccepted
 *
 * The currency accepted.\n\nUse standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217), e.g. "USD"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies, e.g. "BTC"; well known names for [Local Exchange Trading Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types, e.g. "Ithaca HOUR".
 *
 * https://schema.org/currenciesAccepted
 */
export declare const currenciesAccepted: Property;
/**
 * currency
 *
 * The currency in which the monetary amount is expressed.\n\nUse standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217), e.g. "USD"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies, e.g. "BTC"; well known names for [Local Exchange Trading Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types, e.g. "Ithaca HOUR".
 *
 * https://schema.org/currency
 */
export declare const currency: Property;
/**
 * currentExchangeRate
 *
 * The current price of a currency.
 *
 * https://schema.org/currentExchangeRate
 */
export declare const currentExchangeRate: Property;
/**
 * customer
 *
 * Party placing the order or paying the invoice.
 *
 * https://schema.org/customer
 */
export declare const customer: Property;
/**
 * customerRemorseReturnFees
 *
 * The type of return fees if the product is returned due to customer remorse.
 *
 * https://schema.org/customerRemorseReturnFees
 */
export declare const customerRemorseReturnFees: Property;
/**
 * customerRemorseReturnLabelSource
 *
 * The method (from an enumeration) by which the customer obtains a return shipping label for a product returned due to customer remorse.
 *
 * https://schema.org/customerRemorseReturnLabelSource
 */
export declare const customerRemorseReturnLabelSource: Property;
/**
 * customerRemorseReturnShippingFeesAmount
 *
 * The amount of shipping costs if a product is returned due to customer remorse. Applicable when property [[customerRemorseReturnFees]] equals [[ReturnShippingFees]].
 *
 * https://schema.org/customerRemorseReturnShippingFeesAmount
 */
export declare const customerRemorseReturnShippingFeesAmount: Property;
/**
 * cutoffTime
 *
 * Order cutoff time allows merchants to describe the time after which they will no longer process orders received on that day. For orders processed after cutoff time, one day gets added to the delivery time estimate. This property is expected to be most typically used via the [[ShippingRateSettings]] publication pattern. The time is indicated using the ISO-8601 Time format, e.g. "23:30:00-05:00" would represent 6:30 pm Eastern Standard Time (EST) which is 5 hours behind Coordinated Universal Time (UTC).
 *
 * https://schema.org/cutoffTime
 */
export declare const cutoffTime: Property;
/**
 * cvdCollectionDate
 *
 * collectiondate - Date for which patient counts are reported.
 *
 * https://schema.org/cvdCollectionDate
 */
export declare const cvdCollectionDate: Property;
/**
 * cvdFacilityCounty
 *
 * Name of the County of the NHSN facility that this data record applies to. Use [[cvdFacilityId]] to identify the facility. To provide other details, [[healthcareReportingData]] can be used on a [[Hospital]] entry.
 *
 * https://schema.org/cvdFacilityCounty
 */
export declare const cvdFacilityCounty: Property;
/**
 * cvdFacilityId
 *
 * Identifier of the NHSN facility that this data record applies to. Use [[cvdFacilityCounty]] to indicate the county. To provide other details, [[healthcareReportingData]] can be used on a [[Hospital]] entry.
 *
 * https://schema.org/cvdFacilityId
 */
export declare const cvdFacilityId: Property;
/**
 * cvdNumBeds
 *
 * numbeds - HOSPITAL INPATIENT BEDS: Inpatient beds, including all staffed, licensed, and overflow (surge) beds used for inpatients.
 *
 * https://schema.org/cvdNumBeds
 */
export declare const cvdNumBeds: Property;
/**
 * cvdNumBedsOcc
 *
 * numbedsocc - HOSPITAL INPATIENT BED OCCUPANCY: Total number of staffed inpatient beds that are occupied.
 *
 * https://schema.org/cvdNumBedsOcc
 */
export declare const cvdNumBedsOcc: Property;
/**
 * cvdNumC19Died
 *
 * numc19died - DEATHS: Patients with suspected or confirmed COVID-19 who died in the hospital, ED, or any overflow location.
 *
 * https://schema.org/cvdNumC19Died
 */
export declare const cvdNumC19Died: Property;
/**
 * cvdNumC19HOPats
 *
 * numc19hopats - HOSPITAL ONSET: Patients hospitalized in an NHSN inpatient care location with onset of suspected or confirmed COVID-19 14 or more days after hospitalization.
 *
 * https://schema.org/cvdNumC19HOPats
 */
export declare const cvdNumC19HOPats: Property;
/**
 * cvdNumC19HospPats
 *
 * numc19hosppats - HOSPITALIZED: Patients currently hospitalized in an inpatient care location who have suspected or confirmed COVID-19.
 *
 * https://schema.org/cvdNumC19HospPats
 */
export declare const cvdNumC19HospPats: Property;
/**
 * cvdNumC19MechVentPats
 *
 * numc19mechventpats - HOSPITALIZED and VENTILATED: Patients hospitalized in an NHSN inpatient care location who have suspected or confirmed COVID-19 and are on a mechanical ventilator.
 *
 * https://schema.org/cvdNumC19MechVentPats
 */
export declare const cvdNumC19MechVentPats: Property;
/**
 * cvdNumC19OFMechVentPats
 *
 * numc19ofmechventpats - ED/OVERFLOW and VENTILATED: Patients with suspected or confirmed COVID-19 who are in the ED or any overflow location awaiting an inpatient bed and on a mechanical ventilator.
 *
 * https://schema.org/cvdNumC19OFMechVentPats
 */
export declare const cvdNumC19OFMechVentPats: Property;
/**
 * cvdNumC19OverflowPats
 *
 * numc19overflowpats - ED/OVERFLOW: Patients with suspected or confirmed COVID-19 who are in the ED or any overflow location awaiting an inpatient bed.
 *
 * https://schema.org/cvdNumC19OverflowPats
 */
export declare const cvdNumC19OverflowPats: Property;
/**
 * cvdNumICUBeds
 *
 * numicubeds - ICU BEDS: Total number of staffed inpatient intensive care unit (ICU) beds.
 *
 * https://schema.org/cvdNumICUBeds
 */
export declare const cvdNumICUBeds: Property;
/**
 * cvdNumICUBedsOcc
 *
 * numicubedsocc - ICU BED OCCUPANCY: Total number of staffed inpatient ICU beds that are occupied.
 *
 * https://schema.org/cvdNumICUBedsOcc
 */
export declare const cvdNumICUBedsOcc: Property;
/**
 * cvdNumTotBeds
 *
 * numtotbeds - ALL HOSPITAL BEDS: Total number of all inpatient and outpatient beds, including all staffed, ICU, licensed, and overflow (surge) beds used for inpatients or outpatients.
 *
 * https://schema.org/cvdNumTotBeds
 */
export declare const cvdNumTotBeds: Property;
/**
 * cvdNumVent
 *
 * numvent - MECHANICAL VENTILATORS: Total number of ventilators available.
 *
 * https://schema.org/cvdNumVent
 */
export declare const cvdNumVent: Property;
/**
 * cvdNumVentUse
 *
 * numventuse - MECHANICAL VENTILATORS IN USE: Total number of ventilators in use.
 *
 * https://schema.org/cvdNumVentUse
 */
export declare const cvdNumVentUse: Property;
/**
 * dataFeedElement
 *
 * An item within a data feed. Data feeds may have many elements.
 *
 * https://schema.org/dataFeedElement
 */
export declare const dataFeedElement: Property;
/**
 * datasetTimeInterval
 *
 * The range of temporal applicability of a dataset, e.g. for a 2011 census dataset, the year 2011 (in ISO 8601 time interval format).
 *
 * https://schema.org/datasetTimeInterval
 */
export declare const datasetTimeInterval: Property;
/**
 * dateDeleted
 *
 * The datetime the item was removed from the DataFeed.
 *
 * https://schema.org/dateDeleted
 */
export declare const dateDeleted: Property;
/**
 * dateIssued
 *
 * The date the ticket was issued.
 *
 * https://schema.org/dateIssued
 */
export declare const dateIssued: Property;
/**
 * dateModified
 *
 * The date on which the CreativeWork was most recently modified or when the item's entry was modified within a DataFeed.
 *
 * https://schema.org/dateModified
 */
export declare const dateModified: Property;
/**
 * datePosted
 *
 * Publication date of an online listing.
 *
 * https://schema.org/datePosted
 */
export declare const datePosted: Property;
/**
 * datePublished
 *
 * Date of first broadcast/publication.
 *
 * https://schema.org/datePublished
 */
export declare const datePublished: Property;
/**
 * dateRead
 *
 * The date/time at which the message has been read by the recipient if a single recipient exists.
 *
 * https://schema.org/dateRead
 */
export declare const dateRead: Property;
/**
 * dateReceived
 *
 * The date/time the message was received if a single recipient exists.
 *
 * https://schema.org/dateReceived
 */
export declare const dateReceived: Property;
/**
 * dateSent
 *
 * The date/time at which the message was sent.
 *
 * https://schema.org/dateSent
 */
export declare const dateSent: Property;
/**
 * dateVehicleFirstRegistered
 *
 * The date of the first registration of the vehicle with the respective public authorities.
 *
 * https://schema.org/dateVehicleFirstRegistered
 */
export declare const dateVehicleFirstRegistered: Property;
/**
 * dateline
 *
 * A [dateline](https://en.wikipedia.org/wiki/Dateline) is a brief piece of text included in news articles that describes where and when the story was written or filed though the date is often omitted. Sometimes only a placename is provided.
 *
 * Structured representations of dateline-related information can also be expressed more explicitly using [[locationCreated]] (which represents where a work was created, e.g. where a news report was written).  For location depicted or described in the content, use [[contentLocation]].
 *
 * Dateline summaries are oriented more towards human readers than towards automated processing, and can vary substantially. Some examples: "BEIRUT, Lebanon, June 2.", "Paris, France", "December 19, 2017 11:43AM Reporting from Washington", "Beijing/Moscow", "QUEZON CITY, Philippines".
 *
 *
 * https://schema.org/dateline
 */
export declare const dateline: Property;
/**
 * dayOfWeek
 *
 * The day of the week for which these opening hours are valid.
 *
 * https://schema.org/dayOfWeek
 */
export declare const dayOfWeek: Property;
/**
 * deathDate
 *
 * Date of death.
 *
 * https://schema.org/deathDate
 */
export declare const deathDate: Property;
/**
 * deathPlace
 *
 * The place where the person died.
 *
 * https://schema.org/deathPlace
 */
export declare const deathPlace: Property;
/**
 * defaultValue
 *
 * The default value of the input.  For properties that expect a literal, the default is a literal value, for properties that expect an object, it's an ID reference to one of the current values.
 *
 * https://schema.org/defaultValue
 */
export declare const defaultValue: Property;
/**
 * deliveryAddress
 *
 * Destination address.
 *
 * https://schema.org/deliveryAddress
 */
export declare const deliveryAddress: Property;
/**
 * deliveryLeadTime
 *
 * The typical delay between the receipt of the order and the goods either leaving the warehouse or being prepared for pickup, in case the delivery method is on site pickup.
 *
 * https://schema.org/deliveryLeadTime
 */
export declare const deliveryLeadTime: Property;
/**
 * deliveryMethod
 *
 * A sub property of instrument. The method of delivery.
 *
 * https://schema.org/deliveryMethod
 */
export declare const deliveryMethod: Property;
/**
 * deliveryStatus
 *
 * New entry added as the package passes through each leg of its journey (from shipment to final delivery).
 *
 * https://schema.org/deliveryStatus
 */
export declare const deliveryStatus: Property;
/**
 * deliveryTime
 *
 * The total delay between the receipt of the order and the goods reaching the final customer.
 *
 * https://schema.org/deliveryTime
 */
export declare const deliveryTime: Property;
/**
 * department
 *
 * A relationship between an organization and a department of that organization, also described as an organization (allowing different urls, logos, opening hours). For example: a store with a pharmacy, or a bakery with a cafe.
 *
 * https://schema.org/department
 */
export declare const department: Property;
/**
 * departureAirport
 *
 * The airport where the flight originates.
 *
 * https://schema.org/departureAirport
 */
export declare const departureAirport: Property;
/**
 * departureBoatTerminal
 *
 * The terminal or port from which the boat departs.
 *
 * https://schema.org/departureBoatTerminal
 */
export declare const departureBoatTerminal: Property;
/**
 * departureBusStop
 *
 * The stop or station from which the bus departs.
 *
 * https://schema.org/departureBusStop
 */
export declare const departureBusStop: Property;
/**
 * departureGate
 *
 * Identifier of the flight's departure gate.
 *
 * https://schema.org/departureGate
 */
export declare const departureGate: Property;
/**
 * departurePlatform
 *
 * The platform from which the train departs.
 *
 * https://schema.org/departurePlatform
 */
export declare const departurePlatform: Property;
/**
 * departureStation
 *
 * The station from which the train departs.
 *
 * https://schema.org/departureStation
 */
export declare const departureStation: Property;
/**
 * departureTerminal
 *
 * Identifier of the flight's departure terminal.
 *
 * https://schema.org/departureTerminal
 */
export declare const departureTerminal: Property;
/**
 * departureTime
 *
 * The expected departure time.
 *
 * https://schema.org/departureTime
 */
export declare const departureTime: Property;
/**
 * dependencies
 *
 * Prerequisites needed to fulfill steps in article.
 *
 * https://schema.org/dependencies
 */
export declare const dependencies: Property;
/**
 * depth
 *
 * The depth of the item.
 *
 * https://schema.org/depth
 */
export declare const depth: Property;
/**
 * device
 *
 * Device required to run the application. Used in cases where a specific make/model is required to run the application.
 *
 * https://schema.org/device
 */
export declare const device: Property;
/**
 * diagnosis
 *
 * One or more alternative conditions considered in the differential diagnosis process as output of a diagnosis process.
 *
 * https://schema.org/diagnosis
 */
export declare const diagnosis: Property;
/**
 * diagram
 *
 * An image containing a diagram that illustrates the structure and/or its component substructures and/or connections with other structures.
 *
 * https://schema.org/diagram
 */
export declare const diagram: Property;
/**
 * diet
 *
 * A sub property of instrument. The diet used in this action.
 *
 * https://schema.org/diet
 */
export declare const diet: Property;
/**
 * dietFeatures
 *
 * Nutritional information specific to the dietary plan. May include dietary recommendations on what foods to avoid, what foods to consume, and specific alterations/deviations from the USDA or other regulatory body's approved dietary guidelines.
 *
 * https://schema.org/dietFeatures
 */
export declare const dietFeatures: Property;
/**
 * differentialDiagnosis
 *
 * One of a set of differential diagnoses for the condition. Specifically, a closely-related or competing diagnosis typically considered later in the cognitive process whereby this medical condition is distinguished from others most likely responsible for a similar collection of signs and symptoms to reach the most parsimonious diagnosis or diagnoses in a patient.
 *
 * https://schema.org/differentialDiagnosis
 */
export declare const differentialDiagnosis: Property;
/**
 * directApply
 *
 * Indicates whether an [[url]] that is associated with a [[JobPosting]] enables direct application for the job, via the posting website. A job posting is considered to have directApply of [[True]] if an application process for the specified job can be directly initiated via the url(s) given (noting that e.g. multiple internet domains might nevertheless be involved at an implementation level). A value of [[False]] is appropriate if there is no clear path to applying directly online for the specified job, navigating directly from the JobPosting url(s) supplied.
 *
 * https://schema.org/directApply
 */
export declare const directApply: Property;
/**
 * directors
 *
 * A director of e.g. TV, radio, movie, video games etc. content. Directors can be associated with individual items or with a series, episode, clip.
 *
 * https://schema.org/directors
 */
export declare const directors: Property;
/**
 * disambiguatingDescription
 *
 * A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.
 *
 * https://schema.org/disambiguatingDescription
 */
export declare const disambiguatingDescription: Property;
/**
 * discount
 *
 * Any discount applied (to an Order).
 *
 * https://schema.org/discount
 */
export declare const discount: Property;
/**
 * discountCode
 *
 * Code used to redeem a discount.
 *
 * https://schema.org/discountCode
 */
export declare const discountCode: Property;
/**
 * discountCurrency
 *
 * The currency of the discount.\n\nUse standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217), e.g. "USD"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies, e.g. "BTC"; well known names for [Local Exchange Trading Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types, e.g. "Ithaca HOUR".
 *
 * https://schema.org/discountCurrency
 */
export declare const discountCurrency: Property;
/**
 * discusses
 *
 * Specifies the CreativeWork associated with the UserComment.
 *
 * https://schema.org/discusses
 */
export declare const discusses: Property;
/**
 * discussionUrl
 *
 * A link to the page containing the comments of the CreativeWork.
 *
 * https://schema.org/discussionUrl
 */
export declare const discussionUrl: Property;
/**
 * diseasePreventionInfo
 *
 * Information about disease prevention.
 *
 * https://schema.org/diseasePreventionInfo
 */
export declare const diseasePreventionInfo: Property;
/**
 * diseaseSpreadStatistics
 *
 * Statistical information about the spread of a disease, either as [[WebContent]], or
 *   described directly as a [[Dataset]], or the specific [[Observation]]s in the dataset. When a [[WebContent]] URL is
 *   provided, the page indicated might also contain more such markup.
 *
 * https://schema.org/diseaseSpreadStatistics
 */
export declare const diseaseSpreadStatistics: Property;
/**
 * dissolutionDate
 *
 * The date that this organization was dissolved.
 *
 * https://schema.org/dissolutionDate
 */
export declare const dissolutionDate: Property;
/**
 * distance
 *
 * The distance travelled, e.g. exercising or travelling.
 *
 * https://schema.org/distance
 */
export declare const distance: Property;
/**
 * distinguishingSign
 *
 * One of a set of signs and symptoms that can be used to distinguish this diagnosis from others in the differential diagnosis.
 *
 * https://schema.org/distinguishingSign
 */
export declare const distinguishingSign: Property;
/**
 * distribution
 *
 * A downloadable form of this dataset, at a specific location, in a specific format. This property can be repeated if different variations are available. There is no expectation that different downloadable distributions must contain exactly equivalent information (see also [DCAT](https://www.w3.org/TR/vocab-dcat-3/#Class:Distribution) on this point). Different distributions might include or exclude different subsets of the entire dataset, for example.
 *
 * https://schema.org/distribution
 */
export declare const distribution: Property;
/**
 * diversityPolicy
 *
 * Statement on diversity policy by an [[Organization]] e.g. a [[NewsMediaOrganization]]. For a [[NewsMediaOrganization]], a statement describing the newsroom’s diversity policy on both staffing and sources, typically providing staffing data.
 *
 * https://schema.org/diversityPolicy
 */
export declare const diversityPolicy: Property;
/**
 * diversityStaffingReport
 *
 * For an [[Organization]] (often but not necessarily a [[NewsMediaOrganization]]), a report on staffing diversity issues. In a news context this might be for example ASNE or RTDNA (US) reports, or self-reported.
 *
 * https://schema.org/diversityStaffingReport
 */
export declare const diversityStaffingReport: Property;
/**
 * documentation
 *
 * Further documentation describing the Web API in more detail.
 *
 * https://schema.org/documentation
 */
export declare const documentation: Property;
/**
 * doesNotShip
 *
 * Indicates when shipping to a particular [[shippingDestination]] is not available.
 *
 * https://schema.org/doesNotShip
 */
export declare const doesNotShip: Property;
/**
 * domainIncludes
 *
 * Relates a property to a class that is (one of) the type(s) the property is expected to be used on.
 *
 * https://schema.org/domainIncludes
 */
export declare const domainIncludes: Property;
/**
 * domiciledMortgage
 *
 * Whether borrower is a resident of the jurisdiction where the property is located.
 *
 * https://schema.org/domiciledMortgage
 */
export declare const domiciledMortgage: Property;
/**
 * doorTime
 *
 * The time admission will commence.
 *
 * https://schema.org/doorTime
 */
export declare const doorTime: Property;
/**
 * dosageForm
 *
 * A dosage form in which this drug/supplement is available, e.g. 'tablet', 'suspension', 'injection'.
 *
 * https://schema.org/dosageForm
 */
export declare const dosageForm: Property;
/**
 * doseSchedule
 *
 * A dosing schedule for the drug for a given population, either observed, recommended, or maximum dose based on the type used.
 *
 * https://schema.org/doseSchedule
 */
export declare const doseSchedule: Property;
/**
 * doseUnit
 *
 * The unit of the dose, e.g. 'mg'.
 *
 * https://schema.org/doseUnit
 */
export declare const doseUnit: Property;
/**
 * doseValue
 *
 * The value of the dose, e.g. 500.
 *
 * https://schema.org/doseValue
 */
export declare const doseValue: Property;
/**
 * downPayment
 *
 * a type of payment made in cash during the onset of the purchase of an expensive good/service. The payment typically represents only a percentage of the full purchase price.
 *
 * https://schema.org/downPayment
 */
export declare const downPayment: Property;
/**
 * downloadUrl
 *
 * If the file can be downloaded, URL to download the binary.
 *
 * https://schema.org/downloadUrl
 */
export declare const downloadUrl: Property;
/**
 * downvoteCount
 *
 * The number of downvotes this question, answer or comment has received from the community.
 *
 * https://schema.org/downvoteCount
 */
export declare const downvoteCount: Property;
/**
 * drainsTo
 *
 * The vasculature that the vein drains into.
 *
 * https://schema.org/drainsTo
 */
export declare const drainsTo: Property;
/**
 * driveWheelConfiguration
 *
 * The drive wheel configuration, i.e. which roadwheels will receive torque from the vehicle's engine via the drivetrain.
 *
 * https://schema.org/driveWheelConfiguration
 */
export declare const driveWheelConfiguration: Property;
/**
 * dropoffLocation
 *
 * Where a rental car can be dropped off.
 *
 * https://schema.org/dropoffLocation
 */
export declare const dropoffLocation: Property;
/**
 * dropoffTime
 *
 * When a rental car can be dropped off.
 *
 * https://schema.org/dropoffTime
 */
export declare const dropoffTime: Property;
/**
 * drug
 *
 * Specifying a drug or medicine used in a medication procedure.
 *
 * https://schema.org/drug
 */
export declare const drug: Property;
/**
 * drugClass
 *
 * The class of drug this belongs to (e.g., statins).
 *
 * https://schema.org/drugClass
 */
export declare const drugClass: Property;
/**
 * drugUnit
 *
 * The unit in which the drug is measured, e.g. '5 mg tablet'.
 *
 * https://schema.org/drugUnit
 */
export declare const drugUnit: Property;
/**
 * duns
 *
 * The Dun & Bradstreet DUNS number for identifying an organization or business person.
 *
 * https://schema.org/duns
 */
export declare const duns: Property;
/**
 * duplicateTherapy
 *
 * A therapy that duplicates or overlaps this one.
 *
 * https://schema.org/duplicateTherapy
 */
export declare const duplicateTherapy: Property;
/**
 * durationOfWarranty
 *
 * The duration of the warranty promise. Common unitCode values are ANN for year, MON for months, or DAY for days.
 *
 * https://schema.org/durationOfWarranty
 */
export declare const durationOfWarranty: Property;
/**
 * duringMedia
 *
 * A media object representing the circumstances while performing this direction.
 *
 * https://schema.org/duringMedia
 */
export declare const duringMedia: Property;
/**
 * earlyPrepaymentPenalty
 *
 * The amount to be paid as a penalty in the event of early payment of the loan.
 *
 * https://schema.org/earlyPrepaymentPenalty
 */
export declare const earlyPrepaymentPenalty: Property;
/**
 * editEIDR
 *
 * An [EIDR](https://eidr.org/) (Entertainment Identifier Registry) [[identifier]] representing a specific edit / edition for a work of film or television.
 *
 * For example, the motion picture known as "Ghostbusters" whose [[titleEIDR]] is "10.5240/7EC7-228A-510A-053E-CBB8-J" has several edits, e.g. "10.5240/1F2A-E1C5-680A-14C6-E76B-I" and "10.5240/8A35-3BEE-6497-5D12-9E4F-3".
 *
 * Since schema.org types like [[Movie]] and [[TVEpisode]] can be used for both works and their multiple expressions, it is possible to use [[titleEIDR]] alone (for a general description), or alongside [[editEIDR]] for a more edit-specific description.
 *
 *
 * https://schema.org/editEIDR
 */
export declare const editEIDR: Property;
/**
 * editor
 *
 * Specifies the Person who edited the CreativeWork.
 *
 * https://schema.org/editor
 */
export declare const editor: Property;
/**
 * eduQuestionType
 *
 * For questions that are part of learning resources (e.g. Quiz), eduQuestionType indicates the format of question being given. Example: "Multiple choice", "Open ended", "Flashcard".
 *
 * https://schema.org/eduQuestionType
 */
export declare const eduQuestionType: Property;
/**
 * educationRequirements
 *
 * Educational background needed for the position or Occupation.
 *
 * https://schema.org/educationRequirements
 */
export declare const educationRequirements: Property;
/**
 * educationalAlignment
 *
 * An alignment to an established educational framework.
 *
 * This property should not be used where the nature of the alignment can be described using a simple property, for example to express that a resource [[teaches]] or [[assesses]] a competency.
 *
 * https://schema.org/educationalAlignment
 */
export declare const educationalAlignment: Property;
/**
 * educationalCredentialAwarded
 *
 * A description of the qualification, award, certificate, diploma or other educational credential awarded as a consequence of successful completion of this course or program.
 *
 * https://schema.org/educationalCredentialAwarded
 */
export declare const educationalCredentialAwarded: Property;
/**
 * educationalFramework
 *
 * The framework to which the resource being described is aligned.
 *
 * https://schema.org/educationalFramework
 */
export declare const educationalFramework: Property;
/**
 * educationalLevel
 *
 * The level in terms of progression through an educational or training context. Examples of educational levels include 'beginner', 'intermediate' or 'advanced', and formal sets of level indicators.
 *
 * https://schema.org/educationalLevel
 */
export declare const educationalLevel: Property;
/**
 * educationalProgramMode
 *
 * Similar to courseMode, the medium or means of delivery of the program as a whole. The value may either be a text label (e.g. "online", "onsite" or "blended"; "synchronous" or "asynchronous"; "full-time" or "part-time") or a URL reference to a term from a controlled vocabulary (e.g. https://ceds.ed.gov/element/001311#Asynchronous ).
 *
 * https://schema.org/educationalProgramMode
 */
export declare const educationalProgramMode: Property;
/**
 * educationalRole
 *
 * An educationalRole of an EducationalAudience.
 *
 * https://schema.org/educationalRole
 */
export declare const educationalRole: Property;
/**
 * educationalUse
 *
 * The purpose of a work in the context of education; for example, 'assignment', 'group work'.
 *
 * https://schema.org/educationalUse
 */
export declare const educationalUse: Property;
/**
 * elevation
 *
 * The elevation of a location ([WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System)). Values may be of the form 'NUMBER UNIT\_OF\_MEASUREMENT' (e.g., '1,000 m', '3,200 ft') while numbers alone should be assumed to be a value in meters.
 *
 * https://schema.org/elevation
 */
export declare const elevation: Property;
/**
 * eligibilityToWorkRequirement
 *
 * The legal requirements such as citizenship, visa and other documentation required for an applicant to this job.
 *
 * https://schema.org/eligibilityToWorkRequirement
 */
export declare const eligibilityToWorkRequirement: Property;
/**
 * eligibleCustomerType
 *
 * The type(s) of customers for which the given offer is valid.
 *
 * https://schema.org/eligibleCustomerType
 */
export declare const eligibleCustomerType: Property;
/**
 * eligibleDuration
 *
 * The duration for which the given offer is valid.
 *
 * https://schema.org/eligibleDuration
 */
export declare const eligibleDuration: Property;
/**
 * eligibleQuantity
 *
 * The interval and unit of measurement of ordering quantities for which the offer or price specification is valid. This allows e.g. specifying that a certain freight charge is valid only for a certain quantity.
 *
 * https://schema.org/eligibleQuantity
 */
export declare const eligibleQuantity: Property;
/**
 * eligibleRegion
 *
 * The ISO 3166-1 (ISO 3166-1 alpha-2) or ISO 3166-2 code, the place, or the GeoShape for the geo-political region(s) for which the offer or delivery charge specification is valid.\n\nSee also [[ineligibleRegion]].
 *
 *
 * https://schema.org/eligibleRegion
 */
export declare const eligibleRegion: Property;
/**
 * eligibleTransactionVolume
 *
 * The transaction volume, in a monetary unit, for which the offer or price specification is valid, e.g. for indicating a minimal purchasing volume, to express free shipping above a certain order volume, or to limit the acceptance of credit cards to purchases to a certain minimal amount.
 *
 * https://schema.org/eligibleTransactionVolume
 */
export declare const eligibleTransactionVolume: Property;
/**
 * email
 *
 * Email address.
 *
 * https://schema.org/email
 */
export declare const email: Property;
/**
 * embedUrl
 *
 * A URL pointing to a player for a specific video. In general, this is the information in the ```src``` element of an ```embed``` tag and should not be the same as the content of the ```loc``` tag.
 *
 * https://schema.org/embedUrl
 */
export declare const embedUrl: Property;
/**
 * embeddedTextCaption
 *
 * Represents textual captioning from a [[MediaObject]], e.g. text of a 'meme'.
 *
 * https://schema.org/embeddedTextCaption
 */
export declare const embeddedTextCaption: Property;
/**
 * emissionsCO2
 *
 * The CO2 emissions in g/km. When used in combination with a QuantitativeValue, put "g/km" into the unitText property of that value, since there is no UN/CEFACT Common Code for "g/km".
 *
 * https://schema.org/emissionsCO2
 */
export declare const emissionsCO2: Property;
/**
 * employees
 *
 * People working for this organization.
 *
 * https://schema.org/employees
 */
export declare const employees: Property;
/**
 * employerOverview
 *
 * A description of the employer, career opportunities and work environment for this position.
 *
 * https://schema.org/employerOverview
 */
export declare const employerOverview: Property;
/**
 * employmentType
 *
 * Type of employment (e.g. full-time, part-time, contract, temporary, seasonal, internship).
 *
 * https://schema.org/employmentType
 */
export declare const employmentType: Property;
/**
 * employmentUnit
 *
 * Indicates the department, unit and/or facility where the employee reports and/or in which the job is to be performed.
 *
 * https://schema.org/employmentUnit
 */
export declare const employmentUnit: Property;
/**
 * encodingType
 *
 * The supported encoding type(s) for an EntryPoint request.
 *
 * https://schema.org/encodingType
 */
export declare const encodingType: Property;
/**
 * encodings
 *
 * A media object that encodes this CreativeWork.
 *
 * https://schema.org/encodings
 */
export declare const encodings: Property;
/**
 * endDate
 *
 * The end date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
 *
 * https://schema.org/endDate
 */
export declare const endDate: Property;
/**
 * endOffset
 *
 * The end time of the clip expressed as the number of seconds from the beginning of the work.
 *
 * https://schema.org/endOffset
 */
export declare const endOffset: Property;
/**
 * endTime
 *
 * The endTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to end. For actions that span a period of time, when the action was performed. E.g. John wrote a book from January to *December*. For media, including audio and video, it's the time offset of the end of a clip within a larger file.\n\nNote that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
 *
 * https://schema.org/endTime
 */
export declare const endTime: Property;
/**
 * endorsee
 *
 * A sub property of participant. The person/organization being supported.
 *
 * https://schema.org/endorsee
 */
export declare const endorsee: Property;
/**
 * endorsers
 *
 * People or organizations that endorse the plan.
 *
 * https://schema.org/endorsers
 */
export declare const endorsers: Property;
/**
 * energyEfficiencyScaleMax
 *
 * Specifies the most energy efficient class on the regulated EU energy consumption scale for the product category a product belongs to. For example, energy consumption for televisions placed on the market after January 1, 2020 is scaled from D to A+++.
 *
 * https://schema.org/energyEfficiencyScaleMax
 */
export declare const energyEfficiencyScaleMax: Property;
/**
 * energyEfficiencyScaleMin
 *
 * Specifies the least energy efficient class on the regulated EU energy consumption scale for the product category a product belongs to. For example, energy consumption for televisions placed on the market after January 1, 2020 is scaled from D to A+++.
 *
 * https://schema.org/energyEfficiencyScaleMin
 */
export declare const energyEfficiencyScaleMin: Property;
/**
 * engineDisplacement
 *
 * The volume swept by all of the pistons inside the cylinders of an internal combustion engine in a single movement. \n\nTypical unit code(s): CMQ for cubic centimeter, LTR for liters, INQ for cubic inches\n* Note 1: You can link to information about how the given value has been determined using the [[valueReference]] property.\n* Note 2: You can use [[minValue]] and [[maxValue]] to indicate ranges.
 *
 * https://schema.org/engineDisplacement
 */
export declare const engineDisplacement: Property;
/**
 * enginePower
 *
 * The power of the vehicle's engine.
 *     Typical unit code(s): KWT for kilowatt, BHP for brake horsepower, N12 for metric horsepower (PS, with 1 PS = 735,49875 W)\n\n* Note 1: There are many different ways of measuring an engine's power. For an overview, see  [http://en.wikipedia.org/wiki/Horsepower#Engine\_power\_test\_codes](http://en.wikipedia.org/wiki/Horsepower#Engine_power_test_codes).\n* Note 2: You can link to information about how the given value has been determined using the [[valueReference]] property.\n* Note 3: You can use [[minValue]] and [[maxValue]] to indicate ranges.
 *
 * https://schema.org/enginePower
 */
export declare const enginePower: Property;
/**
 * engineType
 *
 * The type of engine or engines powering the vehicle.
 *
 * https://schema.org/engineType
 */
export declare const engineType: Property;
/**
 * entertainmentBusiness
 *
 * A sub property of location. The entertainment business where the action occurred.
 *
 * https://schema.org/entertainmentBusiness
 */
export declare const entertainmentBusiness: Property;
/**
 * epidemiology
 *
 * The characteristics of associated patients, such as age, gender, race etc.
 *
 * https://schema.org/epidemiology
 */
export declare const epidemiology: Property;
/**
 * episodeNumber
 *
 * Position of the episode within an ordered group of episodes.
 *
 * https://schema.org/episodeNumber
 */
export declare const episodeNumber: Property;
/**
 * episodes
 *
 * An episode of a TV/radio series or season.
 *
 * https://schema.org/episodes
 */
export declare const episodes: Property;
/**
 * equal
 *
 * This ordering relation for qualitative values indicates that the subject is equal to the object.
 *
 * https://schema.org/equal
 */
export declare const equal: Property;
/**
 * error
 *
 * For failed actions, more information on the cause of the failure.
 *
 * https://schema.org/error
 */
export declare const error: Property;
/**
 * estimatedCost
 *
 * The estimated cost of the supply or supplies consumed when performing instructions.
 *
 * https://schema.org/estimatedCost
 */
export declare const estimatedCost: Property;
/**
 * estimatedFlightDuration
 *
 * The estimated time the flight will take.
 *
 * https://schema.org/estimatedFlightDuration
 */
export declare const estimatedFlightDuration: Property;
/**
 * estimatedSalary
 *
 * An estimated salary for a job posting or occupation, based on a variety of variables including, but not limited to industry, job title, and location. Estimated salaries  are often computed by outside organizations rather than the hiring organization, who may not have committed to the estimated value.
 *
 * https://schema.org/estimatedSalary
 */
export declare const estimatedSalary: Property;
/**
 * estimatesRiskOf
 *
 * The condition, complication, or symptom whose risk is being estimated.
 *
 * https://schema.org/estimatesRiskOf
 */
export declare const estimatesRiskOf: Property;
/**
 * ethicsPolicy
 *
 * Statement about ethics policy, e.g. of a [[NewsMediaOrganization]] regarding journalistic and publishing practices, or of a [[Restaurant]], a page describing food source policies. In the case of a [[NewsMediaOrganization]], an ethicsPolicy is typically a statement describing the personal, organizational, and corporate standards of behavior expected by the organization.
 *
 * https://schema.org/ethicsPolicy
 */
export declare const ethicsPolicy: Property;
/**
 * eventAttendanceMode
 *
 * The eventAttendanceMode of an event indicates whether it occurs online, offline, or a mix.
 *
 * https://schema.org/eventAttendanceMode
 */
export declare const eventAttendanceMode: Property;
/**
 * eventSchedule
 *
 * Associates an [[Event]] with a [[Schedule]]. There are circumstances where it is preferable to share a schedule for a series of
 *       repeating events rather than data on the individual events themselves. For example, a website or application might prefer to publish a schedule for a weekly
 *       gym class rather than provide data on every event. A schedule could be processed by applications to add forthcoming events to a calendar. An [[Event]] that
 *       is associated with a [[Schedule]] using this property should not have [[startDate]] or [[endDate]] properties. These are instead defined within the associated
 *       [[Schedule]], this avoids any ambiguity for clients using the data. The property might have repeated values to specify different schedules, e.g. for different months
 *       or seasons.
 *
 * https://schema.org/eventSchedule
 */
export declare const eventSchedule: Property;
/**
 * eventStatus
 *
 * An eventStatus of an event represents its status; particularly useful when an event is cancelled or rescheduled.
 *
 * https://schema.org/eventStatus
 */
export declare const eventStatus: Property;
/**
 * events
 *
 * Upcoming or past events associated with this place or organization.
 *
 * https://schema.org/events
 */
export declare const events: Property;
/**
 * evidenceLevel
 *
 * Strength of evidence of the data used to formulate the guideline (enumerated).
 *
 * https://schema.org/evidenceLevel
 */
export declare const evidenceLevel: Property;
/**
 * evidenceOrigin
 *
 * Source of the data used to formulate the guidance, e.g. RCT, consensus opinion, etc.
 *
 * https://schema.org/evidenceOrigin
 */
export declare const evidenceOrigin: Property;
/**
 * exceptDate
 *
 * Defines a [[Date]] or [[DateTime]] during which a scheduled [[Event]] will not take place. The property allows exceptions to
 *       a [[Schedule]] to be specified. If an exception is specified as a [[DateTime]] then only the event that would have started at that specific date and time
 *       should be excluded from the schedule. If an exception is specified as a [[Date]] then any event that is scheduled for that 24 hour period should be
 *       excluded from the schedule. This allows a whole day to be excluded from the schedule without having to itemise every scheduled event.
 *
 * https://schema.org/exceptDate
 */
export declare const exceptDate: Property;
/**
 * exchangeRateSpread
 *
 * The difference between the price at which a broker or other intermediary buys and sells foreign currency.
 *
 * https://schema.org/exchangeRateSpread
 */
export declare const exchangeRateSpread: Property;
/**
 * exercisePlan
 *
 * A sub property of instrument. The exercise plan used on this action.
 *
 * https://schema.org/exercisePlan
 */
export declare const exercisePlan: Property;
/**
 * exerciseRelatedDiet
 *
 * A sub property of instrument. The diet used in this action.
 *
 * https://schema.org/exerciseRelatedDiet
 */
export declare const exerciseRelatedDiet: Property;
/**
 * exerciseType
 *
 * Type(s) of exercise or activity, such as strength training, flexibility training, aerobics, cardiac rehabilitation, etc.
 *
 * https://schema.org/exerciseType
 */
export declare const exerciseType: Property;
/**
 * exifData
 *
 * exif data for this object.
 *
 * https://schema.org/exifData
 */
export declare const exifData: Property;
/**
 * expectedArrivalFrom
 *
 * The earliest date the package may arrive.
 *
 * https://schema.org/expectedArrivalFrom
 */
export declare const expectedArrivalFrom: Property;
/**
 * expectedArrivalUntil
 *
 * The latest date the package may arrive.
 *
 * https://schema.org/expectedArrivalUntil
 */
export declare const expectedArrivalUntil: Property;
/**
 * expectedPrognosis
 *
 * The likely outcome in either the short term or long term of the medical condition.
 *
 * https://schema.org/expectedPrognosis
 */
export declare const expectedPrognosis: Property;
/**
 * expectsAcceptanceOf
 *
 * An Offer which must be accepted before the user can perform the Action. For example, the user may need to buy a movie before being able to watch it.
 *
 * https://schema.org/expectsAcceptanceOf
 */
export declare const expectsAcceptanceOf: Property;
/**
 * experienceInPlaceOfEducation
 *
 * Indicates whether a [[JobPosting]] will accept experience (as indicated by [[OccupationalExperienceRequirements]]) in place of its formal educational qualifications (as indicated by [[educationRequirements]]). If true, indicates that satisfying one of these requirements is sufficient.
 *
 * https://schema.org/experienceInPlaceOfEducation
 */
export declare const experienceInPlaceOfEducation: Property;
/**
 * experienceRequirements
 *
 * Description of skills and experience needed for the position or Occupation.
 *
 * https://schema.org/experienceRequirements
 */
export declare const experienceRequirements: Property;
/**
 * expertConsiderations
 *
 * Medical expert advice related to the plan.
 *
 * https://schema.org/expertConsiderations
 */
export declare const expertConsiderations: Property;
/**
 * expires
 *
 * Date the content expires and is no longer useful or available. For example a [[VideoObject]] or [[NewsArticle]] whose availability or relevance is time-limited, or a [[ClaimReview]] fact check whose publisher wants to indicate that it may no longer be relevant (or helpful to highlight) after some date.
 *
 * https://schema.org/expires
 */
export declare const expires: Property;
/**
 * expressedIn
 *
 * Tissue, organ, biological sample, etc in which activity of this gene has been observed experimentally. For example brain, digestive system.
 *
 * https://schema.org/expressedIn
 */
export declare const expressedIn: Property;
/**
 * familyName
 *
 * Family name. In the U.S., the last name of a Person.
 *
 * https://schema.org/familyName
 */
export declare const familyName: Property;
/**
 * fatContent
 *
 * The number of grams of fat.
 *
 * https://schema.org/fatContent
 */
export declare const fatContent: Property;
/**
 * faxNumber
 *
 * The fax number.
 *
 * https://schema.org/faxNumber
 */
export declare const faxNumber: Property;
/**
 * featureList
 *
 * Features or modules provided by this application (and possibly required by other applications).
 *
 * https://schema.org/featureList
 */
export declare const featureList: Property;
/**
 * feesAndCommissionsSpecification
 *
 * Description of fees, commissions, and other terms applied either to a class of financial product, or by a financial service organization.
 *
 * https://schema.org/feesAndCommissionsSpecification
 */
export declare const feesAndCommissionsSpecification: Property;
/**
 * fiberContent
 *
 * The number of grams of fiber.
 *
 * https://schema.org/fiberContent
 */
export declare const fiberContent: Property;
/**
 * fileFormat
 *
 * Media type, typically MIME format (see [IANA site](http://www.iana.org/assignments/media-types/media-types.xhtml)) of the content, e.g. application/zip of a SoftwareApplication binary. In cases where a CreativeWork has several media type representations, 'encoding' can be used to indicate each MediaObject alongside particular fileFormat information. Unregistered or niche file formats can be indicated instead via the most appropriate URL, e.g. defining Web page or a Wikipedia entry.
 *
 * https://schema.org/fileFormat
 */
export declare const fileFormat: Property;
/**
 * fileSize
 *
 * Size of the application / package (e.g. 18MB). In the absence of a unit (MB, KB etc.), KB will be assumed.
 *
 * https://schema.org/fileSize
 */
export declare const fileSize: Property;
/**
 * financialAidEligible
 *
 * A financial aid type or program which students may use to pay for tuition or fees associated with the program.
 *
 * https://schema.org/financialAidEligible
 */
export declare const financialAidEligible: Property;
/**
 * firstAppearance
 *
 * Indicates the first known occurrence of a [[Claim]] in some [[CreativeWork]].
 *
 * https://schema.org/firstAppearance
 */
export declare const firstAppearance: Property;
/**
 * firstPerformance
 *
 * The date and place the work was first performed.
 *
 * https://schema.org/firstPerformance
 */
export declare const firstPerformance: Property;
/**
 * flightDistance
 *
 * The distance of the flight.
 *
 * https://schema.org/flightDistance
 */
export declare const flightDistance: Property;
/**
 * flightNumber
 *
 * The unique identifier for a flight including the airline IATA code. For example, if describing United flight 110, where the IATA code for United is 'UA', the flightNumber is 'UA110'.
 *
 * https://schema.org/flightNumber
 */
export declare const flightNumber: Property;
/**
 * floorLevel
 *
 * The floor level for an [[Accommodation]] in a multi-storey building. Since counting
 *   systems [vary internationally](https://en.wikipedia.org/wiki/Storey#Consecutive_number_floor_designations), the local system should be used where possible.
 *
 * https://schema.org/floorLevel
 */
export declare const floorLevel: Property;
/**
 * floorLimit
 *
 * A floor limit is the amount of money above which credit card transactions must be authorized.
 *
 * https://schema.org/floorLimit
 */
export declare const floorLimit: Property;
/**
 * floorSize
 *
 * The size of the accommodation, e.g. in square meter or squarefoot.
 * Typical unit code(s): MTK for square meter, FTK for square foot, or YDK for square yard
 *
 * https://schema.org/floorSize
 */
export declare const floorSize: Property;
/**
 * followee
 *
 * A sub property of object. The person or organization being followed.
 *
 * https://schema.org/followee
 */
export declare const followee: Property;
/**
 * follows
 *
 * The most generic uni-directional social relation.
 *
 * https://schema.org/follows
 */
export declare const follows: Property;
/**
 * followup
 *
 * Typical or recommended followup care after the procedure is performed.
 *
 * https://schema.org/followup
 */
export declare const followup: Property;
/**
 * foodEstablishment
 *
 * A sub property of location. The specific food establishment where the action occurred.
 *
 * https://schema.org/foodEstablishment
 */
export declare const foodEstablishment: Property;
/**
 * foodEvent
 *
 * A sub property of location. The specific food event where the action occurred.
 *
 * https://schema.org/foodEvent
 */
export declare const foodEvent: Property;
/**
 * foodWarning
 *
 * Any precaution, guidance, contraindication, etc. related to consumption of specific foods while taking this drug.
 *
 * https://schema.org/foodWarning
 */
export declare const foodWarning: Property;
/**
 * founders
 *
 * A person who founded this organization.
 *
 * https://schema.org/founders
 */
export declare const founders: Property;
/**
 * foundingDate
 *
 * The date that this organization was founded.
 *
 * https://schema.org/foundingDate
 */
export declare const foundingDate: Property;
/**
 * foundingLocation
 *
 * The place where the Organization was founded.
 *
 * https://schema.org/foundingLocation
 */
export declare const foundingLocation: Property;
/**
 * free
 *
 * A flag to signal that the item, event, or place is accessible for free.
 *
 * https://schema.org/free
 */
export declare const free: Property;
/**
 * freeShippingThreshold
 *
 * A monetary value above (or at) which the shipping rate becomes free. Intended to be used via an [[OfferShippingDetails]] with [[shippingSettingsLink]] matching this [[ShippingRateSettings]].
 *
 * https://schema.org/freeShippingThreshold
 */
export declare const freeShippingThreshold: Property;
/**
 * fromLocation
 *
 * A sub property of location. The original location of the object or the agent before the action.
 *
 * https://schema.org/fromLocation
 */
export declare const fromLocation: Property;
/**
 * fuelCapacity
 *
 * The capacity of the fuel tank or in the case of electric cars, the battery. If there are multiple components for storage, this should indicate the total of all storage of the same type.\n\nTypical unit code(s): LTR for liters, GLL of US gallons, GLI for UK / imperial gallons, AMH for ampere-hours (for electrical vehicles).
 *
 * https://schema.org/fuelCapacity
 */
export declare const fuelCapacity: Property;
/**
 * fuelConsumption
 *
 * The amount of fuel consumed for traveling a particular distance or temporal duration with the given vehicle (e.g. liters per 100 km).\n\n* Note 1: There are unfortunately no standard unit codes for liters per 100 km.  Use [[unitText]] to indicate the unit of measurement, e.g. L/100 km.\n* Note 2: There are two ways of indicating the fuel consumption, [[fuelConsumption]] (e.g. 8 liters per 100 km) and [[fuelEfficiency]] (e.g. 30 miles per gallon). They are reciprocal.\n* Note 3: Often, the absolute value is useful only when related to driving speed ("at 80 km/h") or usage pattern ("city traffic"). You can use [[valueReference]] to link the value for the fuel consumption to another value.
 *
 * https://schema.org/fuelConsumption
 */
export declare const fuelConsumption: Property;
/**
 * fuelEfficiency
 *
 * The distance traveled per unit of fuel used; most commonly miles per gallon (mpg) or kilometers per liter (km/L).\n\n* Note 1: There are unfortunately no standard unit codes for miles per gallon or kilometers per liter. Use [[unitText]] to indicate the unit of measurement, e.g. mpg or km/L.\n* Note 2: There are two ways of indicating the fuel consumption, [[fuelConsumption]] (e.g. 8 liters per 100 km) and [[fuelEfficiency]] (e.g. 30 miles per gallon). They are reciprocal.\n* Note 3: Often, the absolute value is useful only when related to driving speed ("at 80 km/h") or usage pattern ("city traffic"). You can use [[valueReference]] to link the value for the fuel economy to another value.
 *
 * https://schema.org/fuelEfficiency
 */
export declare const fuelEfficiency: Property;
/**
 * fuelType
 *
 * The type of fuel suitable for the engine or engines of the vehicle. If the vehicle has only one engine, this property can be attached directly to the vehicle.
 *
 * https://schema.org/fuelType
 */
export declare const fuelType: Property;
/**
 * functionalClass
 *
 * The degree of mobility the joint allows.
 *
 * https://schema.org/functionalClass
 */
export declare const functionalClass: Property;
/**
 * funder
 *
 * A person or organization that supports (sponsors) something through some kind of financial contribution.
 *
 * https://schema.org/funder
 */
export declare const funder: Property;
/**
 * gameAvailabilityType
 *
 * Indicates the availability type of the game content associated with this action, such as whether it is a full version or a demo.
 *
 * https://schema.org/gameAvailabilityType
 */
export declare const gameAvailabilityType: Property;
/**
 * gameEdition
 *
 * The edition of a video game.
 *
 * https://schema.org/gameEdition
 */
export declare const gameEdition: Property;
/**
 * gameItem
 *
 * An item is an object within the game world that can be collected by a player or, occasionally, a non-player character.
 *
 * https://schema.org/gameItem
 */
export declare const gameItem: Property;
/**
 * gameLocation
 *
 * Real or fictional location of the game (or part of game).
 *
 * https://schema.org/gameLocation
 */
export declare const gameLocation: Property;
/**
 * gamePlatform
 *
 * The electronic systems used to play <a href="http://en.wikipedia.org/wiki/Category:Video_game_platforms">video games</a>.
 *
 * https://schema.org/gamePlatform
 */
export declare const gamePlatform: Property;
/**
 * gameTip
 *
 * Links to tips, tactics, etc.
 *
 * https://schema.org/gameTip
 */
export declare const gameTip: Property;
/**
 * gender
 *
 * Gender of something, typically a [[Person]], but possibly also fictional characters, animals, etc. While https://schema.org/Male and https://schema.org/Female may be used, text strings are also acceptable for people who do not identify as a binary gender. The [[gender]] property can also be used in an extended sense to cover e.g. the gender of sports teams. As with the gender of individuals, we do not try to enumerate all possibilities. A mixed-gender [[SportsTeam]] can be indicated with a text value of "Mixed".
 *
 * https://schema.org/gender
 */
export declare const gender: Property;
/**
 * geo
 *
 * The geo coordinates of the place.
 *
 * https://schema.org/geo
 */
export declare const geo: Property;
/**
 * geoContains
 *
 * Represents a relationship between two geometries (or the places they represent), relating a containing geometry to a contained geometry. "a contains b iff no points of b lie in the exterior of a, and at least one point of the interior of b lies in the interior of a". As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
 *
 * https://schema.org/geoContains
 */
export declare const geoContains: Property;
/**
 * geoCoveredBy
 *
 * Represents a relationship between two geometries (or the places they represent), relating a geometry to another that covers it. As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
 *
 * https://schema.org/geoCoveredBy
 */
export declare const geoCoveredBy: Property;
/**
 * geoCovers
 *
 * Represents a relationship between two geometries (or the places they represent), relating a covering geometry to a covered geometry. "Every point of b is a point of (the interior or boundary of) a". As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
 *
 * https://schema.org/geoCovers
 */
export declare const geoCovers: Property;
/**
 * geoCrosses
 *
 * Represents a relationship between two geometries (or the places they represent), relating a geometry to another that crosses it: "a crosses b: they have some but not all interior points in common, and the dimension of the intersection is less than that of at least one of them". As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
 *
 * https://schema.org/geoCrosses
 */
export declare const geoCrosses: Property;
/**
 * geoDisjoint
 *
 * Represents spatial relations in which two geometries (or the places they represent) are topologically disjoint: "they have no point in common. They form a set of disconnected geometries." (A symmetric relationship, as defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).)
 *
 * https://schema.org/geoDisjoint
 */
export declare const geoDisjoint: Property;
/**
 * geoEquals
 *
 * Represents spatial relations in which two geometries (or the places they represent) are topologically equal, as defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM). "Two geometries are topologically equal if their interiors intersect and no part of the interior or boundary of one geometry intersects the exterior of the other" (a symmetric relationship).
 *
 * https://schema.org/geoEquals
 */
export declare const geoEquals: Property;
/**
 * geoIntersects
 *
 * Represents spatial relations in which two geometries (or the places they represent) have at least one point in common. As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
 *
 * https://schema.org/geoIntersects
 */
export declare const geoIntersects: Property;
/**
 * geoMidpoint
 *
 * Indicates the GeoCoordinates at the centre of a GeoShape, e.g. GeoCircle.
 *
 * https://schema.org/geoMidpoint
 */
export declare const geoMidpoint: Property;
/**
 * geoOverlaps
 *
 * Represents a relationship between two geometries (or the places they represent), relating a geometry to another that geospatially overlaps it, i.e. they have some but not all points in common. As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
 *
 * https://schema.org/geoOverlaps
 */
export declare const geoOverlaps: Property;
/**
 * geoRadius
 *
 * Indicates the approximate radius of a GeoCircle (metres unless indicated otherwise via Distance notation).
 *
 * https://schema.org/geoRadius
 */
export declare const geoRadius: Property;
/**
 * geoTouches
 *
 * Represents spatial relations in which two geometries (or the places they represent) touch: "they have at least one boundary point in common, but no interior points." (A symmetric relationship, as defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).)
 *
 * https://schema.org/geoTouches
 */
export declare const geoTouches: Property;
/**
 * geoWithin
 *
 * Represents a relationship between two geometries (or the places they represent), relating a geometry to one that contains it, i.e. it is inside (i.e. within) its interior. As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
 *
 * https://schema.org/geoWithin
 */
export declare const geoWithin: Property;
/**
 * geographicArea
 *
 * The geographic area associated with the audience.
 *
 * https://schema.org/geographicArea
 */
export declare const geographicArea: Property;
/**
 * gettingTestedInfo
 *
 * Information about getting tested (for a [[MedicalCondition]]), e.g. in the context of a pandemic.
 *
 * https://schema.org/gettingTestedInfo
 */
export declare const gettingTestedInfo: Property;
/**
 * givenName
 *
 * Given name. In the U.S., the first name of a Person.
 *
 * https://schema.org/givenName
 */
export declare const givenName: Property;
/**
 * globalLocationNumber
 *
 * The [Global Location Number](http://www.gs1.org/gln) (GLN, sometimes also referred to as International Location Number or ILN) of the respective organization, person, or place. The GLN is a 13-digit number used to identify parties and physical locations.
 *
 * https://schema.org/globalLocationNumber
 */
export declare const globalLocationNumber: Property;
/**
 * governmentBenefitsInfo
 *
 * governmentBenefitsInfo provides information about government benefits associated with a SpecialAnnouncement.
 *
 * https://schema.org/governmentBenefitsInfo
 */
export declare const governmentBenefitsInfo: Property;
/**
 * gracePeriod
 *
 * The period of time after any due date that the borrower has to fulfil its obligations before a default (failure to pay) is deemed to have occurred.
 *
 * https://schema.org/gracePeriod
 */
export declare const gracePeriod: Property;
/**
 * grantee
 *
 * The person, organization, contact point, or audience that has been granted this permission.
 *
 * https://schema.org/grantee
 */
export declare const grantee: Property;
/**
 * greater
 *
 * This ordering relation for qualitative values indicates that the subject is greater than the object.
 *
 * https://schema.org/greater
 */
export declare const greater: Property;
/**
 * greaterOrEqual
 *
 * This ordering relation for qualitative values indicates that the subject is greater than or equal to the object.
 *
 * https://schema.org/greaterOrEqual
 */
export declare const greaterOrEqual: Property;
/**
 * gtin12
 *
 * The GTIN-12 code of the product, or the product to which the offer refers. The GTIN-12 is the 12-digit GS1 Identification Key composed of a U.P.C. Company Prefix, Item Reference, and Check Digit used to identify trade items. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.
 *
 * https://schema.org/gtin12
 */
export declare const gtin12: Property;
/**
 * gtin13
 *
 * The GTIN-13 code of the product, or the product to which the offer refers. This is equivalent to 13-digit ISBN codes and EAN UCC-13. Former 12-digit UPC codes can be converted into a GTIN-13 code by simply adding a preceding zero. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.
 *
 * https://schema.org/gtin13
 */
export declare const gtin13: Property;
/**
 * gtin14
 *
 * The GTIN-14 code of the product, or the product to which the offer refers. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.
 *
 * https://schema.org/gtin14
 */
export declare const gtin14: Property;
/**
 * gtin8
 *
 * The GTIN-8 code of the product, or the product to which the offer refers. This code is also known as EAN/UCC-8 or 8-digit EAN. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.
 *
 * https://schema.org/gtin8
 */
export declare const gtin8: Property;
/**
 * guideline
 *
 * A medical guideline related to this entity.
 *
 * https://schema.org/guideline
 */
export declare const guideline: Property;
/**
 * guidelineDate
 *
 * Date on which this guideline's recommendation was made.
 *
 * https://schema.org/guidelineDate
 */
export declare const guidelineDate: Property;
/**
 * guidelineSubject
 *
 * The medical conditions, treatments, etc. that are the subject of the guideline.
 *
 * https://schema.org/guidelineSubject
 */
export declare const guidelineSubject: Property;
/**
 * handlingTime
 *
 * The typical delay between the receipt of the order and the goods either leaving the warehouse or being prepared for pickup, in case the delivery method is on site pickup. Typical properties: minValue, maxValue, unitCode (d for DAY).  This is by common convention assumed to mean business days (if a unitCode is used, coded as "d"), i.e. only counting days when the business normally operates.
 *
 * https://schema.org/handlingTime
 */
export declare const handlingTime: Property;
/**
 * hasAdultConsideration
 *
 * Used to tag an item to be intended or suitable for consumption or use by adults only.
 *
 * https://schema.org/hasAdultConsideration
 */
export declare const hasAdultConsideration: Property;
/**
 * hasBioPolymerSequence
 *
 * A symbolic representation of a BioChemEntity. For example, a nucleotide sequence of a Gene or an amino acid sequence of a Protein.
 *
 * https://schema.org/hasBioPolymerSequence
 */
export declare const hasBioPolymerSequence: Property;
/**
 * hasCategoryCode
 *
 * A Category code contained in this code set.
 *
 * https://schema.org/hasCategoryCode
 */
export declare const hasCategoryCode: Property;
/**
 * hasCourse
 *
 * A course or class that is one of the learning opportunities that constitute an educational / occupational program. No information is implied about whether the course is mandatory or optional; no guarantee is implied about whether the course will be available to everyone on the program.
 *
 * https://schema.org/hasCourse
 */
export declare const hasCourse: Property;
/**
 * hasCourseInstance
 *
 * An offering of the course at a specific time and place or through specific media or mode of study or to a specific section of students.
 *
 * https://schema.org/hasCourseInstance
 */
export declare const hasCourseInstance: Property;
/**
 * hasCredential
 *
 * A credential awarded to the Person or Organization.
 *
 * https://schema.org/hasCredential
 */
export declare const hasCredential: Property;
/**
 * hasDeliveryMethod
 *
 * Method used for delivery or shipping.
 *
 * https://schema.org/hasDeliveryMethod
 */
export declare const hasDeliveryMethod: Property;
/**
 * hasDigitalDocumentPermission
 *
 * A permission related to the access to this document (e.g. permission to read or write an electronic document). For a public document, specify a grantee with an Audience with audienceType equal to "public".
 *
 * https://schema.org/hasDigitalDocumentPermission
 */
export declare const hasDigitalDocumentPermission: Property;
/**
 * hasDriveThroughService
 *
 * Indicates whether some facility (e.g. [[FoodEstablishment]], [[CovidTestingFacility]]) offers a service that can be used by driving through in a car. In the case of [[CovidTestingFacility]] such facilities could potentially help with social distancing from other potentially-infected users.
 *
 * https://schema.org/hasDriveThroughService
 */
export declare const hasDriveThroughService: Property;
/**
 * hasEnergyConsumptionDetails
 *
 * Defines the energy efficiency Category (also known as "class" or "rating") for a product according to an international energy efficiency standard.
 *
 * https://schema.org/hasEnergyConsumptionDetails
 */
export declare const hasEnergyConsumptionDetails: Property;
/**
 * hasEnergyEfficiencyCategory
 *
 * Defines the energy efficiency Category (which could be either a rating out of range of values or a yes/no certification) for a product according to an international energy efficiency standard.
 *
 * https://schema.org/hasEnergyEfficiencyCategory
 */
export declare const hasEnergyEfficiencyCategory: Property;
/**
 * hasHealthAspect
 *
 * Indicates the aspect or aspects specifically addressed in some [[HealthTopicContent]]. For example, that the content is an overview, or that it talks about treatment, self-care, treatments or their side-effects.
 *
 * https://schema.org/hasHealthAspect
 */
export declare const hasHealthAspect: Property;
/**
 * hasMeasurement
 *
 * A product measurement, for example the inseam of pants, the wheel size of a bicycle, or the gauge of a screw. Usually an exact measurement, but can also be a range of measurements for adjustable products, for example belts and ski bindings.
 *
 * https://schema.org/hasMeasurement
 */
export declare const hasMeasurement: Property;
/**
 * hasMenuItem
 *
 * A food or drink item contained in a menu or menu section.
 *
 * https://schema.org/hasMenuItem
 */
export declare const hasMenuItem: Property;
/**
 * hasMenuSection
 *
 * A subgrouping of the menu (by dishes, course, serving time period, etc.).
 *
 * https://schema.org/hasMenuSection
 */
export declare const hasMenuSection: Property;
/**
 * hasMolecularFunction
 *
 * Molecular function performed by this BioChemEntity; please use PropertyValue if you want to include any evidence.
 *
 * https://schema.org/hasMolecularFunction
 */
export declare const hasMolecularFunction: Property;
/**
 * hasOccupation
 *
 * The Person's occupation. For past professions, use Role for expressing dates.
 *
 * https://schema.org/hasOccupation
 */
export declare const hasOccupation: Property;
/**
 * hasOfferCatalog
 *
 * Indicates an OfferCatalog listing for this Organization, Person, or Service.
 *
 * https://schema.org/hasOfferCatalog
 */
export declare const hasOfferCatalog: Property;
/**
 * hasPOS
 *
 * Points-of-Sales operated by the organization or person.
 *
 * https://schema.org/hasPOS
 */
export declare const hasPOS: Property;
/**
 * hasProductReturnPolicy
 *
 * Indicates a ProductReturnPolicy that may be applicable.
 *
 * https://schema.org/hasProductReturnPolicy
 */
export declare const hasProductReturnPolicy: Property;
/**
 * headline
 *
 * Headline of the article.
 *
 * https://schema.org/headline
 */
export declare const headline: Property;
/**
 * healthCondition
 *
 * Specifying the health condition(s) of a patient, medical study, or other target audience.
 *
 * https://schema.org/healthCondition
 */
export declare const healthCondition: Property;
/**
 * healthPlanCoinsuranceOption
 *
 * Whether the coinsurance applies before or after deductible, etc. TODO: Is this a closed set?
 *
 * https://schema.org/healthPlanCoinsuranceOption
 */
export declare const healthPlanCoinsuranceOption: Property;
/**
 * healthPlanCoinsuranceRate
 *
 * The rate of coinsurance expressed as a number between 0.0 and 1.0.
 *
 * https://schema.org/healthPlanCoinsuranceRate
 */
export declare const healthPlanCoinsuranceRate: Property;
/**
 * healthPlanCopay
 *
 * The copay amount.
 *
 * https://schema.org/healthPlanCopay
 */
export declare const healthPlanCopay: Property;
/**
 * healthPlanCopayOption
 *
 * Whether the copay is before or after deductible, etc. TODO: Is this a closed set?
 *
 * https://schema.org/healthPlanCopayOption
 */
export declare const healthPlanCopayOption: Property;
/**
 * healthPlanCostSharing
 *
 * The costs to the patient for services under this network or formulary.
 *
 * https://schema.org/healthPlanCostSharing
 */
export declare const healthPlanCostSharing: Property;
/**
 * healthPlanDrugOption
 *
 * TODO.
 *
 * https://schema.org/healthPlanDrugOption
 */
export declare const healthPlanDrugOption: Property;
/**
 * healthPlanDrugTier
 *
 * The tier(s) of drugs offered by this formulary or insurance plan.
 *
 * https://schema.org/healthPlanDrugTier
 */
export declare const healthPlanDrugTier: Property;
/**
 * healthPlanId
 *
 * The 14-character, HIOS-generated Plan ID number. (Plan IDs must be unique, even across different markets.)
 *
 * https://schema.org/healthPlanId
 */
export declare const healthPlanId: Property;
/**
 * healthPlanMarketingUrl
 *
 * The URL that goes directly to the plan brochure for the specific standard plan or plan variation.
 *
 * https://schema.org/healthPlanMarketingUrl
 */
export declare const healthPlanMarketingUrl: Property;
/**
 * healthPlanNetworkId
 *
 * Name or unique ID of network. (Networks are often reused across different insurance plans.)
 *
 * https://schema.org/healthPlanNetworkId
 */
export declare const healthPlanNetworkId: Property;
/**
 * healthPlanNetworkTier
 *
 * The tier(s) for this network.
 *
 * https://schema.org/healthPlanNetworkTier
 */
export declare const healthPlanNetworkTier: Property;
/**
 * healthPlanPharmacyCategory
 *
 * The category or type of pharmacy associated with this cost sharing.
 *
 * https://schema.org/healthPlanPharmacyCategory
 */
export declare const healthPlanPharmacyCategory: Property;
/**
 * healthcareReportingData
 *
 * Indicates data describing a hospital, e.g. a CDC [[CDCPMDRecord]] or as some kind of [[Dataset]].
 *
 * https://schema.org/healthcareReportingData
 */
export declare const healthcareReportingData: Property;
/**
 * height
 *
 * The height of the item.
 *
 * https://schema.org/height
 */
export declare const height: Property;
/**
 * highPrice
 *
 * The highest price of all offers available.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
 *
 * https://schema.org/highPrice
 */
export declare const highPrice: Property;
/**
 * hiringOrganization
 *
 * Organization or Person offering the job position.
 *
 * https://schema.org/hiringOrganization
 */
export declare const hiringOrganization: Property;
/**
 * homeLocation
 *
 * A contact location for a person's residence.
 *
 * https://schema.org/homeLocation
 */
export declare const homeLocation: Property;
/**
 * homeTeam
 *
 * The home team in a sports event.
 *
 * https://schema.org/homeTeam
 */
export declare const homeTeam: Property;
/**
 * honorificPrefix
 *
 * An honorific prefix preceding a Person's name such as Dr/Mrs/Mr.
 *
 * https://schema.org/honorificPrefix
 */
export declare const honorificPrefix: Property;
/**
 * honorificSuffix
 *
 * An honorific suffix following a Person's name such as M.D./PhD/MSCSW.
 *
 * https://schema.org/honorificSuffix
 */
export declare const honorificSuffix: Property;
/**
 * hospitalAffiliation
 *
 * A hospital with which the physician or office is affiliated.
 *
 * https://schema.org/hospitalAffiliation
 */
export declare const hospitalAffiliation: Property;
/**
 * hostingOrganization
 *
 * The organization (airline, travelers' club, etc.) the membership is made with.
 *
 * https://schema.org/hostingOrganization
 */
export declare const hostingOrganization: Property;
/**
 * hoursAvailable
 *
 * The hours during which this service or contact is available.
 *
 * https://schema.org/hoursAvailable
 */
export declare const hoursAvailable: Property;
/**
 * howPerformed
 *
 * How the procedure is performed.
 *
 * https://schema.org/howPerformed
 */
export declare const howPerformed: Property;
/**
 * httpMethod
 *
 * An HTTP method that specifies the appropriate HTTP method for a request to an HTTP EntryPoint. Values are capitalized strings as used in HTTP.
 *
 * https://schema.org/httpMethod
 */
export declare const httpMethod: Property;
/**
 * iataCode
 *
 * IATA identifier for an airline or airport.
 *
 * https://schema.org/iataCode
 */
export declare const iataCode: Property;
/**
 * icaoCode
 *
 * ICAO identifier for an airport.
 *
 * https://schema.org/icaoCode
 */
export declare const icaoCode: Property;
/**
 * identifyingExam
 *
 * A physical examination that can identify this sign.
 *
 * https://schema.org/identifyingExam
 */
export declare const identifyingExam: Property;
/**
 * identifyingTest
 *
 * A diagnostic test that can identify this sign.
 *
 * https://schema.org/identifyingTest
 */
export declare const identifyingTest: Property;
/**
 * illustrator
 *
 * The illustrator of the book.
 *
 * https://schema.org/illustrator
 */
export declare const illustrator: Property;
/**
 * imagingTechnique
 *
 * Imaging technique used.
 *
 * https://schema.org/imagingTechnique
 */
export declare const imagingTechnique: Property;
/**
 * inAlbum
 *
 * The album to which this recording belongs.
 *
 * https://schema.org/inAlbum
 */
export declare const inAlbum: Property;
/**
 * inBroadcastLineup
 *
 * The CableOrSatelliteService offering the channel.
 *
 * https://schema.org/inBroadcastLineup
 */
export declare const inBroadcastLineup: Property;
/**
 * inChI
 *
 * Non-proprietary identifier for molecular entity that can be used in printed and electronic data sources thus enabling easier linking of diverse data compilations.
 *
 * https://schema.org/inChI
 */
export declare const inChI: Property;
/**
 * inChIKey
 *
 * InChIKey is a hashed version of the full InChI (using the SHA-256 algorithm).
 *
 * https://schema.org/inChIKey
 */
export declare const inChIKey: Property;
/**
 * inCodeSet
 *
 * A [[CategoryCodeSet]] that contains this category code.
 *
 * https://schema.org/inCodeSet
 */
export declare const inCodeSet: Property;
/**
 * inPlaylist
 *
 * The playlist to which this recording belongs.
 *
 * https://schema.org/inPlaylist
 */
export declare const inPlaylist: Property;
/**
 * inProductGroupWithID
 *
 * Indicates the [[productGroupID]] for a [[ProductGroup]] that this product [[isVariantOf]].
 *
 * https://schema.org/inProductGroupWithID
 */
export declare const inProductGroupWithID: Property;
/**
 * inStoreReturnsOffered
 *
 * Are in-store returns offered? (For more advanced return methods use the [[returnMethod]] property.)
 *
 * https://schema.org/inStoreReturnsOffered
 */
export declare const inStoreReturnsOffered: Property;
/**
 * inSupportOf
 *
 * Qualification, candidature, degree, application that Thesis supports.
 *
 * https://schema.org/inSupportOf
 */
export declare const inSupportOf: Property;
/**
 * incentives
 *
 * Description of bonus and commission compensation aspects of the job.
 *
 * https://schema.org/incentives
 */
export declare const incentives: Property;
/**
 * includedComposition
 *
 * Smaller compositions included in this work (e.g. a movement in a symphony).
 *
 * https://schema.org/includedComposition
 */
export declare const includedComposition: Property;
/**
 * includedDataCatalog
 *
 * A data catalog which contains this dataset (this property was previously 'catalog', preferred name is now 'includedInDataCatalog').
 *
 * https://schema.org/includedDataCatalog
 */
export declare const includedDataCatalog: Property;
/**
 * includedInHealthInsurancePlan
 *
 * The insurance plans that cover this drug.
 *
 * https://schema.org/includedInHealthInsurancePlan
 */
export declare const includedInHealthInsurancePlan: Property;
/**
 * includedRiskFactor
 *
 * A modifiable or non-modifiable risk factor included in the calculation, e.g. age, coexisting condition.
 *
 * https://schema.org/includedRiskFactor
 */
export declare const includedRiskFactor: Property;
/**
 * includesAttraction
 *
 * Attraction located at destination.
 *
 * https://schema.org/includesAttraction
 */
export declare const includesAttraction: Property;
/**
 * includesHealthPlanFormulary
 *
 * Formularies covered by this plan.
 *
 * https://schema.org/includesHealthPlanFormulary
 */
export declare const includesHealthPlanFormulary: Property;
/**
 * includesHealthPlanNetwork
 *
 * Networks covered by this plan.
 *
 * https://schema.org/includesHealthPlanNetwork
 */
export declare const includesHealthPlanNetwork: Property;
/**
 * includesObject
 *
 * This links to a node or nodes indicating the exact quantity of the products included in  an [[Offer]] or [[ProductCollection]].
 *
 * https://schema.org/includesObject
 */
export declare const includesObject: Property;
/**
 * increasesRiskOf
 *
 * The condition, complication, etc. influenced by this factor.
 *
 * https://schema.org/increasesRiskOf
 */
export declare const increasesRiskOf: Property;
/**
 * industry
 *
 * The industry associated with the job position.
 *
 * https://schema.org/industry
 */
export declare const industry: Property;
/**
 * ineligibleRegion
 *
 * The ISO 3166-1 (ISO 3166-1 alpha-2) or ISO 3166-2 code, the place, or the GeoShape for the geo-political region(s) for which the offer or delivery charge specification is not valid, e.g. a region where the transaction is not allowed.\n\nSee also [[eligibleRegion]].
 *
 *
 * https://schema.org/ineligibleRegion
 */
export declare const ineligibleRegion: Property;
/**
 * infectiousAgent
 *
 * The actual infectious agent, such as a specific bacterium.
 *
 * https://schema.org/infectiousAgent
 */
export declare const infectiousAgent: Property;
/**
 * infectiousAgentClass
 *
 * The class of infectious agent (bacteria, prion, etc.) that causes the disease.
 *
 * https://schema.org/infectiousAgentClass
 */
export declare const infectiousAgentClass: Property;
/**
 * ingredients
 *
 * A single ingredient used in the recipe, e.g. sugar, flour or garlic.
 *
 * https://schema.org/ingredients
 */
export declare const ingredients: Property;
/**
 * inker
 *
 * The individual who traces over the pencil drawings in ink after pencils are complete.
 *
 * https://schema.org/inker
 */
export declare const inker: Property;
/**
 * insertion
 *
 * The place of attachment of a muscle, or what the muscle moves.
 *
 * https://schema.org/insertion
 */
export declare const insertion: Property;
/**
 * installUrl
 *
 * URL at which the app may be installed, if different from the URL of the item.
 *
 * https://schema.org/installUrl
 */
export declare const installUrl: Property;
/**
 * instructor
 *
 * A person assigned to instruct or provide instructional assistance for the [[CourseInstance]].
 *
 * https://schema.org/instructor
 */
export declare const instructor: Property;
/**
 * intensity
 *
 * Quantitative measure gauging the degree of force involved in the exercise, for example, heartbeats per minute. May include the velocity of the movement.
 *
 * https://schema.org/intensity
 */
export declare const intensity: Property;
/**
 * interactingDrug
 *
 * Another drug that is known to interact with this drug in a way that impacts the effect of this drug or causes a risk to the patient. Note: disease interactions are typically captured as contraindications.
 *
 * https://schema.org/interactingDrug
 */
export declare const interactingDrug: Property;
/**
 * interactionCount
 *
 * This property is deprecated, alongside the UserInteraction types on which it depended.
 *
 * https://schema.org/interactionCount
 */
export declare const interactionCount: Property;
/**
 * interactionService
 *
 * The WebSite or SoftwareApplication where the interactions took place.
 *
 * https://schema.org/interactionService
 */
export declare const interactionService: Property;
/**
 * interactionType
 *
 * The Action representing the type of interaction. For up votes, +1s, etc. use [[LikeAction]]. For down votes use [[DislikeAction]]. Otherwise, use the most specific Action.
 *
 * https://schema.org/interactionType
 */
export declare const interactionType: Property;
/**
 * interactivityType
 *
 * The predominant mode of learning supported by the learning resource. Acceptable values are 'active', 'expositive', or 'mixed'.
 *
 * https://schema.org/interactivityType
 */
export declare const interactivityType: Property;
/**
 * interestRate
 *
 * The interest rate, charged or paid, applicable to the financial product. Note: This is different from the calculated annualPercentageRate.
 *
 * https://schema.org/interestRate
 */
export declare const interestRate: Property;
/**
 * interpretedAsClaim
 *
 * Used to indicate a specific claim contained, implied, translated or refined from the content of a [[MediaObject]] or other [[CreativeWork]]. The interpreting party can be indicated using [[claimInterpreter]].
 *
 * https://schema.org/interpretedAsClaim
 */
export declare const interpretedAsClaim: Property;
/**
 * inventoryLevel
 *
 * The current approximate inventory level for the item or items.
 *
 * https://schema.org/inventoryLevel
 */
export declare const inventoryLevel: Property;
/**
 * inverseOf
 *
 * Relates a property to a property that is its inverse. Inverse properties relate the same pairs of items to each other, but in reversed direction. For example, the 'alumni' and 'alumniOf' properties are inverseOf each other. Some properties don't have explicit inverses; in these situations RDFa and JSON-LD syntax for reverse properties can be used.
 *
 * https://schema.org/inverseOf
 */
export declare const inverseOf: Property;
/**
 * isAcceptingNewPatients
 *
 * Whether the provider is accepting new patients.
 *
 * https://schema.org/isAcceptingNewPatients
 */
export declare const isAcceptingNewPatients: Property;
/**
 * isAccessoryOrSparePartFor
 *
 * A pointer to another product (or multiple products) for which this product is an accessory or spare part.
 *
 * https://schema.org/isAccessoryOrSparePartFor
 */
export declare const isAccessoryOrSparePartFor: Property;
/**
 * isAvailableGenerically
 *
 * True if the drug is available in a generic form (regardless of name).
 *
 * https://schema.org/isAvailableGenerically
 */
export declare const isAvailableGenerically: Property;
/**
 * isBasedOnUrl
 *
 * A resource that was used in the creation of this resource. This term can be repeated for multiple sources. For example, http://example.com/great-multiplication-intro.html.
 *
 * https://schema.org/isBasedOnUrl
 */
export declare const isBasedOnUrl: Property;
/**
 * isConsumableFor
 *
 * A pointer to another product (or multiple products) for which this product is a consumable.
 *
 * https://schema.org/isConsumableFor
 */
export declare const isConsumableFor: Property;
/**
 * isFamilyFriendly
 *
 * Indicates whether this content is family friendly.
 *
 * https://schema.org/isFamilyFriendly
 */
export declare const isFamilyFriendly: Property;
/**
 * isGift
 *
 * Indicates whether the offer was accepted as a gift for someone other than the buyer.
 *
 * https://schema.org/isGift
 */
export declare const isGift: Property;
/**
 * isInvolvedInBiologicalProcess
 *
 * Biological process this BioChemEntity is involved in; please use PropertyValue if you want to include any evidence.
 *
 * https://schema.org/isInvolvedInBiologicalProcess
 */
export declare const isInvolvedInBiologicalProcess: Property;
/**
 * isLiveBroadcast
 *
 * True if the broadcast is of a live event.
 *
 * https://schema.org/isLiveBroadcast
 */
export declare const isLiveBroadcast: Property;
/**
 * isLocatedInSubcellularLocation
 *
 * Subcellular location where this BioChemEntity is located; please use PropertyValue if you want to include any evidence.
 *
 * https://schema.org/isLocatedInSubcellularLocation
 */
export declare const isLocatedInSubcellularLocation: Property;
/**
 * isPlanForApartment
 *
 * Indicates some accommodation that this floor plan describes.
 *
 * https://schema.org/isPlanForApartment
 */
export declare const isPlanForApartment: Property;
/**
 * isProprietary
 *
 * True if this item's name is a proprietary/brand name (vs. generic name).
 *
 * https://schema.org/isProprietary
 */
export declare const isProprietary: Property;
/**
 * isRelatedTo
 *
 * A pointer to another, somehow related product (or multiple products).
 *
 * https://schema.org/isRelatedTo
 */
export declare const isRelatedTo: Property;
/**
 * isResizable
 *
 * Whether the 3DModel allows resizing. For example, room layout applications often do not allow 3DModel elements to be resized to reflect reality.
 *
 * https://schema.org/isResizable
 */
export declare const isResizable: Property;
/**
 * isSimilarTo
 *
 * A pointer to another, functionally similar product (or multiple products).
 *
 * https://schema.org/isSimilarTo
 */
export declare const isSimilarTo: Property;
/**
 * isUnlabelledFallback
 *
 * This can be marked 'true' to indicate that some published [[DeliveryTimeSettings]] or [[ShippingRateSettings]] are intended to apply to all [[OfferShippingDetails]] published by the same merchant, when referenced by a [[shippingSettingsLink]] in those settings. It is not meaningful to use a 'true' value for this property alongside a transitTimeLabel (for [[DeliveryTimeSettings]]) or shippingLabel (for [[ShippingRateSettings]]), since this property is for use with unlabelled settings.
 *
 * https://schema.org/isUnlabelledFallback
 */
export declare const isUnlabelledFallback: Property;
/**
 * isbn
 *
 * The ISBN of the book.
 *
 * https://schema.org/isbn
 */
export declare const isbn: Property;
/**
 * isicV4
 *
 * The International Standard of Industrial Classification of All Economic Activities (ISIC), Revision 4 code for a particular organization, business person, or place.
 *
 * https://schema.org/isicV4
 */
export declare const isicV4: Property;
/**
 * iso6523Code
 *
 * An organization identifier as defined in ISO 6523(-1). Note that many existing organization identifiers such as [leiCode](https://schema.org/leiCode), [duns](https://schema.org/duns) and [vatID](https://schema.org/vatID) can be expressed as an ISO 6523 identifier by setting the ICD part of the ISO 6523 identifier accordingly.
 *
 * https://schema.org/iso6523Code
 */
export declare const iso6523Code: Property;
/**
 * isrcCode
 *
 * The International Standard Recording Code for the recording.
 *
 * https://schema.org/isrcCode
 */
export declare const isrcCode: Property;
/**
 * issn
 *
 * The International Standard Serial Number (ISSN) that identifies this serial publication. You can repeat this property to identify different formats of, or the linking ISSN (ISSN-L) for, this serial publication.
 *
 * https://schema.org/issn
 */
export declare const issn: Property;
/**
 * issueNumber
 *
 * Identifies the issue of publication; for example, "iii" or "2".
 *
 * https://schema.org/issueNumber
 */
export declare const issueNumber: Property;
/**
 * issuedBy
 *
 * The organization issuing the ticket or permit.
 *
 * https://schema.org/issuedBy
 */
export declare const issuedBy: Property;
/**
 * issuedThrough
 *
 * The service through which the permit was granted.
 *
 * https://schema.org/issuedThrough
 */
export declare const issuedThrough: Property;
/**
 * iswcCode
 *
 * The International Standard Musical Work Code for the composition.
 *
 * https://schema.org/iswcCode
 */
export declare const iswcCode: Property;
/**
 * item
 *
 * An entity represented by an entry in a list or data feed (e.g. an 'artist' in a list of 'artists').
 *
 * https://schema.org/item
 */
export declare const item: Property;
/**
 * itemCondition
 *
 * A predefined value from OfferItemCondition specifying the condition of the product or service, or the products or services included in the offer. Also used for product return policies to specify the condition of products accepted for returns.
 *
 * https://schema.org/itemCondition
 */
export declare const itemCondition: Property;
/**
 * itemDefectReturnFees
 *
 * The type of return fees for returns of defect products.
 *
 * https://schema.org/itemDefectReturnFees
 */
export declare const itemDefectReturnFees: Property;
/**
 * itemDefectReturnLabelSource
 *
 * The method (from an enumeration) by which the customer obtains a return shipping label for a defect product.
 *
 * https://schema.org/itemDefectReturnLabelSource
 */
export declare const itemDefectReturnLabelSource: Property;
/**
 * itemDefectReturnShippingFeesAmount
 *
 * Amount of shipping costs for defect product returns. Applicable when property [[itemDefectReturnFees]] equals [[ReturnShippingFees]].
 *
 * https://schema.org/itemDefectReturnShippingFeesAmount
 */
export declare const itemDefectReturnShippingFeesAmount: Property;
/**
 * itemListElement
 *
 * For itemListElement values, you can use simple strings (e.g. "Peter", "Paul", "Mary"), existing entities, or use ListItem.\n\nText values are best if the elements in the list are plain strings. Existing entities are best for a simple, unordered list of existing things in your data. ListItem is used with ordered lists when you want to provide additional context about the element in that list or when the same item might be in different places in different lists.\n\nNote: The order of elements in your mark-up is not sufficient for indicating the order or elements.  Use ListItem with a 'position' property in such cases.
 *
 * https://schema.org/itemListElement
 */
export declare const itemListElement: Property;
/**
 * itemListOrder
 *
 * Type of ordering (e.g. Ascending, Descending, Unordered).
 *
 * https://schema.org/itemListOrder
 */
export declare const itemListOrder: Property;
/**
 *
 *
 *
 *
 * https://schema.org/itemLocation
 */
export declare const itemLocation: Property;
/**
 * itemReviewed
 *
 * The item that is being reviewed/rated.
 *
 * https://schema.org/itemReviewed
 */
export declare const itemReviewed: Property;
/**
 * itemShipped
 *
 * Item(s) being shipped.
 *
 * https://schema.org/itemShipped
 */
export declare const itemShipped: Property;
/**
 * itinerary
 *
 * Destination(s) ( [[Place]] ) that make up a trip. For a trip where destination order is important use [[ItemList]] to specify that order (see examples).
 *
 * https://schema.org/itinerary
 */
export declare const itinerary: Property;
/**
 * iupacName
 *
 * Systematic method of naming chemical compounds as recommended by the International Union of Pure and Applied Chemistry (IUPAC).
 *
 * https://schema.org/iupacName
 */
export declare const iupacName: Property;
/**
 * jobImmediateStart
 *
 * An indicator as to whether a position is available for an immediate start.
 *
 * https://schema.org/jobImmediateStart
 */
export declare const jobImmediateStart: Property;
/**
 * jobLocation
 *
 * A (typically single) geographic location associated with the job position.
 *
 * https://schema.org/jobLocation
 */
export declare const jobLocation: Property;
/**
 * jobLocationType
 *
 * A description of the job location (e.g. TELECOMMUTE for telecommute jobs).
 *
 * https://schema.org/jobLocationType
 */
export declare const jobLocationType: Property;
/**
 * jobStartDate
 *
 * The date on which a successful applicant for this job would be expected to start work. Choose a specific date in the future or use the jobImmediateStart property to indicate the position is to be filled as soon as possible.
 *
 * https://schema.org/jobStartDate
 */
export declare const jobStartDate: Property;
/**
 * jobTitle
 *
 * The job title of the person (for example, Financial Manager).
 *
 * https://schema.org/jobTitle
 */
export declare const jobTitle: Property;
/**
 * keywords
 *
 * Keywords or tags used to describe some item. Multiple textual entries in a keywords list are typically delimited by commas, or by repeating the property.
 *
 * https://schema.org/keywords
 */
export declare const keywords: Property;
/**
 * knownVehicleDamages
 *
 * A textual description of known damages, both repaired and unrepaired.
 *
 * https://schema.org/knownVehicleDamages
 */
export declare const knownVehicleDamages: Property;
/**
 * knows
 *
 * The most generic bi-directional social/work relation.
 *
 * https://schema.org/knows
 */
export declare const knows: Property;
/**
 * knowsAbout
 *
 * Of a [[Person]], and less typically of an [[Organization]], to indicate a topic that is known about - suggesting possible expertise but not implying it. We do not distinguish skill levels here, or relate this to educational content, events, objectives or [[JobPosting]] descriptions.
 *
 * https://schema.org/knowsAbout
 */
export declare const knowsAbout: Property;
/**
 * knowsLanguage
 *
 * Of a [[Person]], and less typically of an [[Organization]], to indicate a known language. We do not distinguish skill levels or reading/writing/speaking/signing here. Use language codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47).
 *
 * https://schema.org/knowsLanguage
 */
export declare const knowsLanguage: Property;
/**
 * labelDetails
 *
 * Link to the drug's label details.
 *
 * https://schema.org/labelDetails
 */
export declare const labelDetails: Property;
/**
 * landlord
 *
 * A sub property of participant. The owner of the real estate property.
 *
 * https://schema.org/landlord
 */
export declare const landlord: Property;
/**
 * language
 *
 * A sub property of instrument. The language used on this action.
 *
 * https://schema.org/language
 */
export declare const language: Property;
/**
 * lastReviewed
 *
 * Date on which the content on this web page was last reviewed for accuracy and/or completeness.
 *
 * https://schema.org/lastReviewed
 */
export declare const lastReviewed: Property;
/**
 * latitude
 *
 * The latitude of a location. For example ```37.42242``` ([WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System)).
 *
 * https://schema.org/latitude
 */
export declare const latitude: Property;
/**
 * layoutImage
 *
 * A schematic image showing the floorplan layout.
 *
 * https://schema.org/layoutImage
 */
export declare const layoutImage: Property;
/**
 * learningResourceType
 *
 * The predominant type or kind characterizing the learning resource. For example, 'presentation', 'handout'.
 *
 * https://schema.org/learningResourceType
 */
export declare const learningResourceType: Property;
/**
 * leaseLength
 *
 * Length of the lease for some [[Accommodation]], either particular to some [[Offer]] or in some cases intrinsic to the property.
 *
 * https://schema.org/leaseLength
 */
export declare const leaseLength: Property;
/**
 * legalName
 *
 * The official name of the organization, e.g. the registered company name.
 *
 * https://schema.org/legalName
 */
export declare const legalName: Property;
/**
 * legalStatus
 *
 * The drug or supplement's legal status, including any controlled substance schedules that apply.
 *
 * https://schema.org/legalStatus
 */
export declare const legalStatus: Property;
/**
 * legislationChanges
 *
 * Another legislation that this legislation changes. This encompasses the notions of amendment, replacement, correction, repeal, or other types of change. This may be a direct change (textual or non-textual amendment) or a consequential or indirect change. The property is to be used to express the existence of a change relationship between two acts rather than the existence of a consolidated version of the text that shows the result of the change. For consolidation relationships, use the <a href="/legislationConsolidates">legislationConsolidates</a> property.
 *
 * https://schema.org/legislationChanges
 */
export declare const legislationChanges: Property;
/**
 * legislationConsolidates
 *
 * Indicates another legislation taken into account in this consolidated legislation (which is usually the product of an editorial process that revises the legislation). This property should be used multiple times to refer to both the original version or the previous consolidated version, and to the legislations making the change.
 *
 * https://schema.org/legislationConsolidates
 */
export declare const legislationConsolidates: Property;
/**
 * legislationDate
 *
 * The date of adoption or signature of the legislation. This is the date at which the text is officially aknowledged to be a legislation, even though it might not even be published or in force.
 *
 * https://schema.org/legislationDate
 */
export declare const legislationDate: Property;
/**
 * legislationDateVersion
 *
 * The point-in-time at which the provided description of the legislation is valid (e.g.: when looking at the law on the 2016-04-07 (= dateVersion), I get the consolidation of 2015-04-12 of the "National Insurance Contributions Act 2015")
 *
 * https://schema.org/legislationDateVersion
 */
export declare const legislationDateVersion: Property;
/**
 * legislationIdentifier
 *
 * An identifier for the legislation. This can be either a string-based identifier, like the CELEX at EU level or the NOR in France, or a web-based, URL/URI identifier, like an ELI (European Legislation Identifier) or an URN-Lex.
 *
 * https://schema.org/legislationIdentifier
 */
export declare const legislationIdentifier: Property;
/**
 * legislationJurisdiction
 *
 * The jurisdiction from which the legislation originates.
 *
 * https://schema.org/legislationJurisdiction
 */
export declare const legislationJurisdiction: Property;
/**
 * legislationLegalForce
 *
 * Whether the legislation is currently in force, not in force, or partially in force.
 *
 * https://schema.org/legislationLegalForce
 */
export declare const legislationLegalForce: Property;
/**
 * legislationLegalValue
 *
 * The legal value of this legislation file. The same legislation can be written in multiple files with different legal values. Typically a digitally signed PDF have a "stronger" legal value than the HTML file of the same act.
 *
 * https://schema.org/legislationLegalValue
 */
export declare const legislationLegalValue: Property;
/**
 * legislationPassedBy
 *
 * The person or organization that originally passed or made the law: typically parliament (for primary legislation) or government (for secondary legislation). This indicates the "legal author" of the law, as opposed to its physical author.
 *
 * https://schema.org/legislationPassedBy
 */
export declare const legislationPassedBy: Property;
/**
 * legislationResponsible
 *
 * An individual or organization that has some kind of responsibility for the legislation. Typically the ministry who is/was in charge of elaborating the legislation, or the adressee for potential questions about the legislation once it is published.
 *
 * https://schema.org/legislationResponsible
 */
export declare const legislationResponsible: Property;
/**
 * legislationTransposes
 *
 * Indicates that this legislation (or part of legislation) fulfills the objectives set by another legislation, by passing appropriate implementation measures. Typically, some legislations of European Union's member states or regions transpose European Directives. This indicates a legally binding link between the 2 legislations.
 *
 * https://schema.org/legislationTransposes
 */
export declare const legislationTransposes: Property;
/**
 * legislationType
 *
 * The type of the legislation. Examples of values are "law", "act", "directive", "decree", "regulation", "statutory instrument", "loi organique", "règlement grand-ducal", etc., depending on the country.
 *
 * https://schema.org/legislationType
 */
export declare const legislationType: Property;
/**
 * leiCode
 *
 * An organization identifier that uniquely identifies a legal entity as defined in ISO 17442.
 *
 * https://schema.org/leiCode
 */
export declare const leiCode: Property;
/**
 * lender
 *
 * A sub property of participant. The person that lends the object being borrowed.
 *
 * https://schema.org/lender
 */
export declare const lender: Property;
/**
 * lesser
 *
 * This ordering relation for qualitative values indicates that the subject is lesser than the object.
 *
 * https://schema.org/lesser
 */
export declare const lesser: Property;
/**
 * lesserOrEqual
 *
 * This ordering relation for qualitative values indicates that the subject is lesser than or equal to the object.
 *
 * https://schema.org/lesserOrEqual
 */
export declare const lesserOrEqual: Property;
/**
 * letterer
 *
 * The individual who adds lettering, including speech balloons and sound effects, to artwork.
 *
 * https://schema.org/letterer
 */
export declare const letterer: Property;
/**
 * license
 *
 * A license document that applies to this content, typically indicated by URL.
 *
 * https://schema.org/license
 */
export declare const license: Property;
/**
 * line
 *
 * A line is a point-to-point path consisting of two or more points. A line is expressed as a series of two or more point objects separated by space.
 *
 * https://schema.org/line
 */
export declare const line: Property;
/**
 * linkRelationship
 *
 * Indicates the relationship type of a Web link.
 *
 * https://schema.org/linkRelationship
 */
export declare const linkRelationship: Property;
/**
 * liveBlogUpdate
 *
 * An update to the LiveBlog.
 *
 * https://schema.org/liveBlogUpdate
 */
export declare const liveBlogUpdate: Property;
/**
 * loanMortgageMandateAmount
 *
 * Amount of mortgage mandate that can be converted into a proper mortgage at a later stage.
 *
 * https://schema.org/loanMortgageMandateAmount
 */
export declare const loanMortgageMandateAmount: Property;
/**
 * loanPaymentAmount
 *
 * The amount of money to pay in a single payment.
 *
 * https://schema.org/loanPaymentAmount
 */
export declare const loanPaymentAmount: Property;
/**
 * loanPaymentFrequency
 *
 * Frequency of payments due, i.e. number of months between payments. This is defined as a frequency, i.e. the reciprocal of a period of time.
 *
 * https://schema.org/loanPaymentFrequency
 */
export declare const loanPaymentFrequency: Property;
/**
 * loanRepaymentForm
 *
 * A form of paying back money previously borrowed from a lender. Repayment usually takes the form of periodic payments that normally include part principal plus interest in each payment.
 *
 * https://schema.org/loanRepaymentForm
 */
export declare const loanRepaymentForm: Property;
/**
 * loanTerm
 *
 * The duration of the loan or credit agreement.
 *
 * https://schema.org/loanTerm
 */
export declare const loanTerm: Property;
/**
 * loanType
 *
 * The type of a loan or credit.
 *
 * https://schema.org/loanType
 */
export declare const loanType: Property;
/**
 * locationCreated
 *
 * The location where the CreativeWork was created, which may not be the same as the location depicted in the CreativeWork.
 *
 * https://schema.org/locationCreated
 */
export declare const locationCreated: Property;
/**
 * lodgingUnitDescription
 *
 * A full description of the lodging unit.
 *
 * https://schema.org/lodgingUnitDescription
 */
export declare const lodgingUnitDescription: Property;
/**
 * lodgingUnitType
 *
 * Textual description of the unit type (including suite vs. room, size of bed, etc.).
 *
 * https://schema.org/lodgingUnitType
 */
export declare const lodgingUnitType: Property;
/**
 * logo
 *
 * An associated logo.
 *
 * https://schema.org/logo
 */
export declare const logo: Property;
/**
 * longitude
 *
 * The longitude of a location. For example ```-122.08585``` ([WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System)).
 *
 * https://schema.org/longitude
 */
export declare const longitude: Property;
/**
 * loser
 *
 * A sub property of participant. The loser of the action.
 *
 * https://schema.org/loser
 */
export declare const loser: Property;
/**
 * lowPrice
 *
 * The lowest price of all offers available.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
 *
 * https://schema.org/lowPrice
 */
export declare const lowPrice: Property;
/**
 * lyricist
 *
 * The person who wrote the words.
 *
 * https://schema.org/lyricist
 */
export declare const lyricist: Property;
/**
 * lyrics
 *
 * The words in the song.
 *
 * https://schema.org/lyrics
 */
export declare const lyrics: Property;
/**
 * maintainer
 *
 * A maintainer of a [[Dataset]], software package ([[SoftwareApplication]]), or other [[Project]]. A maintainer is a [[Person]] or [[Organization]] that manages contributions to, and/or publication of, some (typically complex) artifact. It is common for distributions of software and data to be based on "upstream" sources. When [[maintainer]] is applied to a specific version of something e.g. a particular version or packaging of a [[Dataset]], it is always  possible that the upstream source has a different maintainer. The [[isBasedOn]] property can be used to indicate such relationships between datasets to make the different maintenance roles clear. Similarly in the case of software, a package may have dedicated maintainers working on integration into software distributions such as Ubuntu, as well as upstream maintainers of the underlying work.
 *
 *
 * https://schema.org/maintainer
 */
export declare const maintainer: Property;
/**
 * manufacturer
 *
 * The manufacturer of the product.
 *
 * https://schema.org/manufacturer
 */
export declare const manufacturer: Property;
/**
 * map
 *
 * A URL to a map of the place.
 *
 * https://schema.org/map
 */
export declare const map: Property;
/**
 * mapType
 *
 * Indicates the kind of Map, from the MapCategoryType Enumeration.
 *
 * https://schema.org/mapType
 */
export declare const mapType: Property;
/**
 * maps
 *
 * A URL to a map of the place.
 *
 * https://schema.org/maps
 */
export declare const maps: Property;
/**
 * marginOfError
 *
 * A [[marginOfError]] for an [[Observation]].
 *
 * https://schema.org/marginOfError
 */
export declare const marginOfError: Property;
/**
 * masthead
 *
 * For a [[NewsMediaOrganization]], a link to the masthead page or a page listing top editorial management.
 *
 * https://schema.org/masthead
 */
export declare const masthead: Property;
/**
 *
 *
 *
 *
 * https://schema.org/materialExtent
 */
export declare const materialExtent: Property;
/**
 * mathExpression
 *
 * A mathematical expression (e.g. 'x^2-3x=0') that may be solved for a specific variable, simplified, or transformed. This can take many formats, e.g. LaTeX, Ascii-Math, or math as you would write with a keyboard.
 *
 * https://schema.org/mathExpression
 */
export declare const mathExpression: Property;
/**
 * maxPrice
 *
 * The highest price if the price is a range.
 *
 * https://schema.org/maxPrice
 */
export declare const maxPrice: Property;
/**
 * maxValue
 *
 * The upper value of some characteristic or property.
 *
 * https://schema.org/maxValue
 */
export declare const maxValue: Property;
/**
 * maximumAttendeeCapacity
 *
 * The total number of individuals that may attend an event or venue.
 *
 * https://schema.org/maximumAttendeeCapacity
 */
export declare const maximumAttendeeCapacity: Property;
/**
 * maximumEnrollment
 *
 * The maximum number of students who may be enrolled in the program.
 *
 * https://schema.org/maximumEnrollment
 */
export declare const maximumEnrollment: Property;
/**
 * maximumIntake
 *
 * Recommended intake of this supplement for a given population as defined by a specific recommending authority.
 *
 * https://schema.org/maximumIntake
 */
export declare const maximumIntake: Property;
/**
 * maximumPhysicalAttendeeCapacity
 *
 * The maximum physical attendee capacity of an [[Event]] whose [[eventAttendanceMode]] is [[OfflineEventAttendanceMode]] (or the offline aspects, in the case of a [[MixedEventAttendanceMode]]).
 *
 * https://schema.org/maximumPhysicalAttendeeCapacity
 */
export declare const maximumPhysicalAttendeeCapacity: Property;
/**
 * maximumVirtualAttendeeCapacity
 *
 * The maximum virtual attendee capacity of an [[Event]] whose [[eventAttendanceMode]] is [[OnlineEventAttendanceMode]] (or the online aspects, in the case of a [[MixedEventAttendanceMode]]).
 *
 * https://schema.org/maximumVirtualAttendeeCapacity
 */
export declare const maximumVirtualAttendeeCapacity: Property;
/**
 * mealService
 *
 * Description of the meals that will be provided or available for purchase.
 *
 * https://schema.org/mealService
 */
export declare const mealService: Property;
/**
 * measuredProperty
 *
 * The measuredProperty of an [[Observation]], typically via its [[StatisticalVariable]]. There are various kinds of applicable [[Property]]: a schema.org property, a property from other RDF-compatible systems, e.g. W3C RDF Data Cube, Data Commons, Wikidata, or schema.org extensions such as [GS1's](https://www.gs1.org/voc/?show=properties).
 *
 * https://schema.org/measuredProperty
 */
export declare const measuredProperty: Property;
/**
 * measurementDenominator
 *
 * Identifies the denominator variable when an observation represents a ratio or percentage.
 *
 * https://schema.org/measurementDenominator
 */
export declare const measurementDenominator: Property;
/**
 * measurementMethod
 *
 * A subproperty of [[measurementTechnique]] that can be used for specifying specific methods, in particular via [[MeasurementMethodEnum]].
 *
 * https://schema.org/measurementMethod
 */
export declare const measurementMethod: Property;
/**
 * measurementQualifier
 *
 * Provides additional qualification to an observation. For example, a GDP observation measures the Nominal value.
 *
 * https://schema.org/measurementQualifier
 */
export declare const measurementQualifier: Property;
/**
 * mechanismOfAction
 *
 * The specific biochemical interaction through which this drug or supplement produces its pharmacological effect.
 *
 * https://schema.org/mechanismOfAction
 */
export declare const mechanismOfAction: Property;
/**
 * mediaAuthenticityCategory
 *
 * Indicates a MediaManipulationRatingEnumeration classification of a media object (in the context of how it was published or shared).
 *
 * https://schema.org/mediaAuthenticityCategory
 */
export declare const mediaAuthenticityCategory: Property;
/**
 * mediaItemAppearance
 *
 * In the context of a [[MediaReview]], indicates specific media item(s) that are grouped using a [[MediaReviewItem]].
 *
 * https://schema.org/mediaItemAppearance
 */
export declare const mediaItemAppearance: Property;
/**
 * median
 *
 * The median value.
 *
 * https://schema.org/median
 */
export declare const median: Property;
/**
 * medicalAudience
 *
 * Medical audience for page.
 *
 * https://schema.org/medicalAudience
 */
export declare const medicalAudience: Property;
/**
 * medicalSpecialty
 *
 * A medical specialty of the provider.
 *
 * https://schema.org/medicalSpecialty
 */
export declare const medicalSpecialty: Property;
/**
 * medicineSystem
 *
 * The system of medicine that includes this MedicalEntity, for example 'evidence-based', 'homeopathic', 'chiropractic', etc.
 *
 * https://schema.org/medicineSystem
 */
export declare const medicineSystem: Property;
/**
 * meetsEmissionStandard
 *
 * Indicates that the vehicle meets the respective emission standard.
 *
 * https://schema.org/meetsEmissionStandard
 */
export declare const meetsEmissionStandard: Property;
/**
 * members
 *
 * A member of this organization.
 *
 * https://schema.org/members
 */
export declare const members: Property;
/**
 * membershipNumber
 *
 * A unique identifier for the membership.
 *
 * https://schema.org/membershipNumber
 */
export declare const membershipNumber: Property;
/**
 * membershipPointsEarned
 *
 * The number of membership points earned by the member. If necessary, the unitText can be used to express the units the points are issued in. (E.g. stars, miles, etc.)
 *
 * https://schema.org/membershipPointsEarned
 */
export declare const membershipPointsEarned: Property;
/**
 * memoryRequirements
 *
 * Minimum memory requirements.
 *
 * https://schema.org/memoryRequirements
 */
export declare const memoryRequirements: Property;
/**
 * mentions
 *
 * Indicates that the CreativeWork contains a reference to, but is not necessarily about a concept.
 *
 * https://schema.org/mentions
 */
export declare const mentions: Property;
/**
 * menu
 *
 * Either the actual menu as a structured representation, as text, or a URL of the menu.
 *
 * https://schema.org/menu
 */
export declare const menu: Property;
/**
 * menuAddOn
 *
 * Additional menu item(s) such as a side dish of salad or side order of fries that can be added to this menu item. Additionally it can be a menu section containing allowed add-on menu items for this menu item.
 *
 * https://schema.org/menuAddOn
 */
export declare const menuAddOn: Property;
/**
 * merchant
 *
 * 'merchant' is an out-dated term for 'seller'.
 *
 * https://schema.org/merchant
 */
export declare const merchant: Property;
/**
 * messageAttachment
 *
 * A CreativeWork attached to the message.
 *
 * https://schema.org/messageAttachment
 */
export declare const messageAttachment: Property;
/**
 * mileageFromOdometer
 *
 * The total distance travelled by the particular vehicle since its initial production, as read from its odometer.\n\nTypical unit code(s): KMT for kilometers, SMI for statute miles
 *
 * https://schema.org/mileageFromOdometer
 */
export declare const mileageFromOdometer: Property;
/**
 * minPrice
 *
 * The lowest price if the price is a range.
 *
 * https://schema.org/minPrice
 */
export declare const minPrice: Property;
/**
 * minValue
 *
 * The lower value of some characteristic or property.
 *
 * https://schema.org/minValue
 */
export declare const minValue: Property;
/**
 * minimumPaymentDue
 *
 * The minimum payment required at this time.
 *
 * https://schema.org/minimumPaymentDue
 */
export declare const minimumPaymentDue: Property;
/**
 * missionCoveragePrioritiesPolicy
 *
 * For a [[NewsMediaOrganization]], a statement on coverage priorities, including any public agenda or stance on issues.
 *
 * https://schema.org/missionCoveragePrioritiesPolicy
 */
export declare const missionCoveragePrioritiesPolicy: Property;
/**
 * mobileUrl
 *
 * The [[mobileUrl]] property is provided for specific situations in which data consumers need to determine whether one of several provided URLs is a dedicated 'mobile site'.
 *
 * To discourage over-use, and reflecting intial usecases, the property is expected only on [[Product]] and [[Offer]], rather than [[Thing]]. The general trend in web technology is towards [responsive design](https://en.wikipedia.org/wiki/Responsive_web_design) in which content can be flexibly adapted to a wide range of browsing environments. Pages and sites referenced with the long-established [[url]] property should ideally also be usable on a wide variety of devices, including mobile phones. In most cases, it would be pointless and counter productive to attempt to update all [[url]] markup to use [[mobileUrl]] for more mobile-oriented pages. The property is intended for the case when items (primarily [[Product]] and [[Offer]]) have extra URLs hosted on an additional "mobile site" alongside the main one. It should not be taken as an endorsement of this publication style.
 *
 *
 * https://schema.org/mobileUrl
 */
export declare const mobileUrl: Property;
/**
 * model
 *
 * The model of the product. Use with the URL of a ProductModel or a textual representation of the model identifier. The URL of the ProductModel can be from an external source. It is recommended to additionally provide strong product identifiers via the gtin8/gtin13/gtin14 and mpn properties.
 *
 * https://schema.org/model
 */
export declare const model: Property;
/**
 * modelDate
 *
 * The release date of a vehicle model (often used to differentiate versions of the same make and model).
 *
 * https://schema.org/modelDate
 */
export declare const modelDate: Property;
/**
 * modifiedTime
 *
 * The date and time the reservation was modified.
 *
 * https://schema.org/modifiedTime
 */
export declare const modifiedTime: Property;
/**
 * molecularFormula
 *
 * The empirical formula is the simplest whole number ratio of all the atoms in a molecule.
 *
 * https://schema.org/molecularFormula
 */
export declare const molecularFormula: Property;
/**
 * molecularWeight
 *
 * This is the molecular weight of the entity being described, not of the parent. Units should be included in the form '&lt;Number&gt; &lt;unit&gt;', for example '12 amu' or as '&lt;QuantitativeValue&gt;.
 *
 * https://schema.org/molecularWeight
 */
export declare const molecularWeight: Property;
/**
 * monoisotopicMolecularWeight
 *
 * The monoisotopic mass is the sum of the masses of the atoms in a molecule using the unbound, ground-state, rest mass of the principal (most abundant) isotope for each element instead of the isotopic average mass. Please include the units in the form '&lt;Number&gt; &lt;unit&gt;', for example '770.230488 g/mol' or as '&lt;QuantitativeValue&gt;.
 *
 * https://schema.org/monoisotopicMolecularWeight
 */
export declare const monoisotopicMolecularWeight: Property;
/**
 * monthlyMinimumRepaymentAmount
 *
 * The minimum payment is the lowest amount of money that one is required to pay on a credit card statement each month.
 *
 * https://schema.org/monthlyMinimumRepaymentAmount
 */
export declare const monthlyMinimumRepaymentAmount: Property;
/**
 * monthsOfExperience
 *
 * Indicates the minimal number of months of experience required for a position.
 *
 * https://schema.org/monthsOfExperience
 */
export declare const monthsOfExperience: Property;
/**
 * mpn
 *
 * The Manufacturer Part Number (MPN) of the product, or the product to which the offer refers.
 *
 * https://schema.org/mpn
 */
export declare const mpn: Property;
/**
 * multipleValues
 *
 * Whether multiple values are allowed for the property.  Default is false.
 *
 * https://schema.org/multipleValues
 */
export declare const multipleValues: Property;
/**
 * muscleAction
 *
 * The movement the muscle generates.
 *
 * https://schema.org/muscleAction
 */
export declare const muscleAction: Property;
/**
 * musicArrangement
 *
 * An arrangement derived from the composition.
 *
 * https://schema.org/musicArrangement
 */
export declare const musicArrangement: Property;
/**
 * musicBy
 *
 * The composer of the soundtrack.
 *
 * https://schema.org/musicBy
 */
export declare const musicBy: Property;
/**
 * musicCompositionForm
 *
 * The type of composition (e.g. overture, sonata, symphony, etc.).
 *
 * https://schema.org/musicCompositionForm
 */
export declare const musicCompositionForm: Property;
/**
 * musicGroupMember
 *
 * A member of a music group&#x2014;for example, John, Paul, George, or Ringo.
 *
 * https://schema.org/musicGroupMember
 */
export declare const musicGroupMember: Property;
/**
 * musicReleaseFormat
 *
 * Format of this release (the type of recording media used, i.e. compact disc, digital media, LP, etc.).
 *
 * https://schema.org/musicReleaseFormat
 */
export declare const musicReleaseFormat: Property;
/**
 * musicalKey
 *
 * The key, mode, or scale this composition uses.
 *
 * https://schema.org/musicalKey
 */
export declare const musicalKey: Property;
/**
 * naics
 *
 * The North American Industry Classification System (NAICS) code for a particular organization or business person.
 *
 * https://schema.org/naics
 */
export declare const naics: Property;
/**
 * name
 *
 * The name of the item.
 *
 * https://schema.org/name
 */
export declare const name: Property;
/**
 * namedPosition
 *
 * A position played, performed or filled by a person or organization, as part of an organization. For example, an athlete in a SportsTeam might play in the position named 'Quarterback'.
 *
 * https://schema.org/namedPosition
 */
export declare const namedPosition: Property;
/**
 * nationality
 *
 * Nationality of the person.
 *
 * https://schema.org/nationality
 */
export declare const nationality: Property;
/**
 * naturalProgression
 *
 * The expected progression of the condition if it is not treated and allowed to progress naturally.
 *
 * https://schema.org/naturalProgression
 */
export declare const naturalProgression: Property;
/**
 * negativeNotes
 *
 * Provides negative considerations regarding something, most typically in pro/con lists for reviews (alongside [[positiveNotes]]). For symmetry
 *
 * In the case of a [[Review]], the property describes the [[itemReviewed]] from the perspective of the review; in the case of a [[Product]], the product itself is being described. Since product descriptions
 * tend to emphasise positive claims, it may be relatively unusual to find [[negativeNotes]] used in this way. Nevertheless for the sake of symmetry, [[negativeNotes]] can be used on [[Product]].
 *
 * The property values can be expressed either as unstructured text (repeated as necessary), or if ordered, as a list (in which case the most negative is at the beginning of the list).
 *
 * https://schema.org/negativeNotes
 */
export declare const negativeNotes: Property;
/**
 * nerve
 *
 * The underlying innervation associated with the muscle.
 *
 * https://schema.org/nerve
 */
export declare const nerve: Property;
/**
 * nerveMotor
 *
 * The neurological pathway extension that involves muscle control.
 *
 * https://schema.org/nerveMotor
 */
export declare const nerveMotor: Property;
/**
 * netWorth
 *
 * The total financial value of the person as calculated by subtracting assets from liabilities.
 *
 * https://schema.org/netWorth
 */
export declare const netWorth: Property;
/**
 * newsUpdatesAndGuidelines
 *
 * Indicates a page with news updates and guidelines. This could often be (but is not required to be) the main page containing [[SpecialAnnouncement]] markup on a site.
 *
 * https://schema.org/newsUpdatesAndGuidelines
 */
export declare const newsUpdatesAndGuidelines: Property;
/**
 * nextItem
 *
 * A link to the ListItem that follows the current one.
 *
 * https://schema.org/nextItem
 */
export declare const nextItem: Property;
/**
 * noBylinesPolicy
 *
 * For a [[NewsMediaOrganization]] or other news-related [[Organization]], a statement explaining when authors of articles are not named in bylines.
 *
 * https://schema.org/noBylinesPolicy
 */
export declare const noBylinesPolicy: Property;
/**
 * nonEqual
 *
 * This ordering relation for qualitative values indicates that the subject is not equal to the object.
 *
 * https://schema.org/nonEqual
 */
export declare const nonEqual: Property;
/**
 * nonProprietaryName
 *
 * The generic name of this drug or supplement.
 *
 * https://schema.org/nonProprietaryName
 */
export declare const nonProprietaryName: Property;
/**
 * nonprofitStatus
 *
 * nonprofitStatus indicates the legal status of a non-profit organization in its primary place of business.
 *
 * https://schema.org/nonprofitStatus
 */
export declare const nonprofitStatus: Property;
/**
 * normalRange
 *
 * Range of acceptable values for a typical patient, when applicable.
 *
 * https://schema.org/normalRange
 */
export declare const normalRange: Property;
/**
 * nsn
 *
 * Indicates the [NATO stock number](https://en.wikipedia.org/wiki/NATO_Stock_Number) (nsn) of a [[Product]].
 *
 * https://schema.org/nsn
 */
export declare const nsn: Property;
/**
 * numAdults
 *
 * The number of adults staying in the unit.
 *
 * https://schema.org/numAdults
 */
export declare const numAdults: Property;
/**
 * numChildren
 *
 * The number of children staying in the unit.
 *
 * https://schema.org/numChildren
 */
export declare const numChildren: Property;
/**
 * numConstraints
 *
 * Indicates the number of constraints property values defined for a particular [[ConstraintNode]] such as [[StatisticalVariable]]. This helps applications understand if they have access to a sufficiently complete description of a [[StatisticalVariable]] or other construct that is defined using properties on template-style nodes.
 *
 * https://schema.org/numConstraints
 */
export declare const numConstraints: Property;
/**
 * numTracks
 *
 * The number of tracks in this album or playlist.
 *
 * https://schema.org/numTracks
 */
export declare const numTracks: Property;
/**
 * numberOfAccommodationUnits
 *
 * Indicates the total (available plus unavailable) number of accommodation units in an [[ApartmentComplex]], or the number of accommodation units for a specific [[FloorPlan]] (within its specific [[ApartmentComplex]]). See also [[numberOfAvailableAccommodationUnits]].
 *
 * https://schema.org/numberOfAccommodationUnits
 */
export declare const numberOfAccommodationUnits: Property;
/**
 * numberOfAirbags
 *
 * The number or type of airbags in the vehicle.
 *
 * https://schema.org/numberOfAirbags
 */
export declare const numberOfAirbags: Property;
/**
 * numberOfAvailableAccommodationUnits
 *
 * Indicates the number of available accommodation units in an [[ApartmentComplex]], or the number of accommodation units for a specific [[FloorPlan]] (within its specific [[ApartmentComplex]]). See also [[numberOfAccommodationUnits]].
 *
 * https://schema.org/numberOfAvailableAccommodationUnits
 */
export declare const numberOfAvailableAccommodationUnits: Property;
/**
 * numberOfAxles
 *
 * The number of axles.\n\nTypical unit code(s): C62
 *
 * https://schema.org/numberOfAxles
 */
export declare const numberOfAxles: Property;
/**
 * numberOfBathroomsTotal
 *
 * The total integer number of bathrooms in some [[Accommodation]], following real estate conventions as [documented in RESO](https://ddwiki.reso.org/display/DDW17/BathroomsTotalInteger+Field): "The simple sum of the number of bathrooms. For example for a property with two Full Bathrooms and one Half Bathroom, the Bathrooms Total Integer will be 3.". See also [[numberOfRooms]].
 *
 * https://schema.org/numberOfBathroomsTotal
 */
export declare const numberOfBathroomsTotal: Property;
/**
 * numberOfBedrooms
 *
 * The total integer number of bedrooms in a some [[Accommodation]], [[ApartmentComplex]] or [[FloorPlan]].
 *
 * https://schema.org/numberOfBedrooms
 */
export declare const numberOfBedrooms: Property;
/**
 * numberOfBeds
 *
 * The quantity of the given bed type available in the HotelRoom, Suite, House, or Apartment.
 *
 * https://schema.org/numberOfBeds
 */
export declare const numberOfBeds: Property;
/**
 * numberOfCredits
 *
 * The number of credits or units awarded by a Course or required to complete an EducationalOccupationalProgram.
 *
 * https://schema.org/numberOfCredits
 */
export declare const numberOfCredits: Property;
/**
 * numberOfDoors
 *
 * The number of doors.\n\nTypical unit code(s): C62
 *
 * https://schema.org/numberOfDoors
 */
export declare const numberOfDoors: Property;
/**
 * numberOfEmployees
 *
 * The number of employees in an organization, e.g. business.
 *
 * https://schema.org/numberOfEmployees
 */
export declare const numberOfEmployees: Property;
/**
 * numberOfEpisodes
 *
 * The number of episodes in this season or series.
 *
 * https://schema.org/numberOfEpisodes
 */
export declare const numberOfEpisodes: Property;
/**
 * numberOfForwardGears
 *
 * The total number of forward gears available for the transmission system of the vehicle.\n\nTypical unit code(s): C62
 *
 * https://schema.org/numberOfForwardGears
 */
export declare const numberOfForwardGears: Property;
/**
 * numberOfFullBathrooms
 *
 * Number of full bathrooms - The total number of full and ¾ bathrooms in an [[Accommodation]]. This corresponds to the [BathroomsFull field in RESO](https://ddwiki.reso.org/display/DDW17/BathroomsFull+Field).
 *
 * https://schema.org/numberOfFullBathrooms
 */
export declare const numberOfFullBathrooms: Property;
/**
 * numberOfItems
 *
 * The number of items in an ItemList. Note that some descriptions might not fully describe all items in a list (e.g., multi-page pagination); in such cases, the numberOfItems would be for the entire list.
 *
 * https://schema.org/numberOfItems
 */
export declare const numberOfItems: Property;
/**
 * numberOfLoanPayments
 *
 * The number of payments contractually required at origination to repay the loan. For monthly paying loans this is the number of months from the contractual first payment date to the maturity date.
 *
 * https://schema.org/numberOfLoanPayments
 */
export declare const numberOfLoanPayments: Property;
/**
 * numberOfPages
 *
 * The number of pages in the book.
 *
 * https://schema.org/numberOfPages
 */
export declare const numberOfPages: Property;
/**
 * numberOfPartialBathrooms
 *
 * Number of partial bathrooms - The total number of half and ¼ bathrooms in an [[Accommodation]]. This corresponds to the [BathroomsPartial field in RESO](https://ddwiki.reso.org/display/DDW17/BathroomsPartial+Field).
 *
 * https://schema.org/numberOfPartialBathrooms
 */
export declare const numberOfPartialBathrooms: Property;
/**
 * numberOfPlayers
 *
 * Indicate how many people can play this game (minimum, maximum, or range).
 *
 * https://schema.org/numberOfPlayers
 */
export declare const numberOfPlayers: Property;
/**
 * numberOfPreviousOwners
 *
 * The number of owners of the vehicle, including the current one.\n\nTypical unit code(s): C62
 *
 * https://schema.org/numberOfPreviousOwners
 */
export declare const numberOfPreviousOwners: Property;
/**
 * numberOfRooms
 *
 * The number of rooms (excluding bathrooms and closets) of the accommodation or lodging business.
 * Typical unit code(s): ROM for room or C62 for no unit. The type of room can be put in the unitText property of the QuantitativeValue.
 *
 * https://schema.org/numberOfRooms
 */
export declare const numberOfRooms: Property;
/**
 * numberOfSeasons
 *
 * The number of seasons in this series.
 *
 * https://schema.org/numberOfSeasons
 */
export declare const numberOfSeasons: Property;
/**
 * numberedPosition
 *
 * A number associated with a role in an organization, for example, the number on an athlete's jersey.
 *
 * https://schema.org/numberedPosition
 */
export declare const numberedPosition: Property;
/**
 * nutrition
 *
 * Nutrition information about the recipe or menu item.
 *
 * https://schema.org/nutrition
 */
export declare const nutrition: Property;
/**
 * observationAbout
 *
 * The [[observationAbout]] property identifies an entity, often a [[Place]], associated with an [[Observation]].
 *
 * https://schema.org/observationAbout
 */
export declare const observationAbout: Property;
/**
 * observationDate
 *
 * The observationDate of an [[Observation]].
 *
 * https://schema.org/observationDate
 */
export declare const observationDate: Property;
/**
 * observationPeriod
 *
 * The length of time an Observation took place over. The format follows `P[0-9]*[Y|M|D|h|m|s]`. For example, P1Y is Period 1 Year, P3M is Period 3 Months, P3h is Period 3 hours.
 *
 * https://schema.org/observationPeriod
 */
export declare const observationPeriod: Property;
/**
 * occupancy
 *
 * The allowed total occupancy for the accommodation in persons (including infants etc). For individual accommodations, this is not necessarily the legal maximum but defines the permitted usage as per the contractual agreement (e.g. a double room used by a single person).
 * Typical unit code(s): C62 for person
 *
 * https://schema.org/occupancy
 */
export declare const occupancy: Property;
/**
 * occupationLocation
 *
 *  The region/country for which this occupational description is appropriate. Note that educational requirements and qualifications can vary between jurisdictions.
 *
 * https://schema.org/occupationLocation
 */
export declare const occupationLocation: Property;
/**
 * occupationalCategory
 *
 * A category describing the job, preferably using a term from a taxonomy such as [BLS O*NET-SOC](http://www.onetcenter.org/taxonomy.html), [ISCO-08](https://www.ilo.org/public/english/bureau/stat/isco/isco08/) or similar, with the property repeated for each applicable value. Ideally the taxonomy should be identified, and both the textual label and formal code for the category should be provided.\n
 * Note: for historical reasons, any textual label and formal code provided as a literal may be assumed to be from O*NET-SOC.
 *
 * https://schema.org/occupationalCategory
 */
export declare const occupationalCategory: Property;
/**
 * occupationalCredentialAwarded
 *
 * A description of the qualification, award, certificate, diploma or other occupational credential awarded as a consequence of successful completion of this course or program.
 *
 * https://schema.org/occupationalCredentialAwarded
 */
export declare const occupationalCredentialAwarded: Property;
/**
 * offerCount
 *
 * The number of offers for the product.
 *
 * https://schema.org/offerCount
 */
export declare const offerCount: Property;
/**
 * offersPrescriptionByMail
 *
 * Whether prescriptions can be delivered by mail.
 *
 * https://schema.org/offersPrescriptionByMail
 */
export declare const offersPrescriptionByMail: Property;
/**
 * openingHours
 *
 * The general opening hours for a business. Opening hours can be specified as a weekly time range, starting with days, then times per day. Multiple days can be listed with commas ',' separating each day. Day or time ranges are specified using a hyphen '-'.\n\n* Days are specified using the following two-letter combinations: ```Mo```, ```Tu```, ```We```, ```Th```, ```Fr```, ```Sa```, ```Su```.\n* Times are specified using 24:00 format. For example, 3pm is specified as ```15:00```, 10am as ```10:00```. \n* Here is an example: <code>&lt;time itemprop="openingHours" datetime=&quot;Tu,Th 16:00-20:00&quot;&gt;Tuesdays and Thursdays 4-8pm&lt;/time&gt;</code>.\n* If a business is open 7 days a week, then it can be specified as <code>&lt;time itemprop=&quot;openingHours&quot; datetime=&quot;Mo-Su&quot;&gt;Monday through Sunday, all day&lt;/time&gt;</code>.
 *
 * https://schema.org/openingHours
 */
export declare const openingHours: Property;
/**
 * openingHoursSpecification
 *
 * The opening hours of a certain place.
 *
 * https://schema.org/openingHoursSpecification
 */
export declare const openingHoursSpecification: Property;
/**
 * opens
 *
 * The opening hour of the place or service on the given day(s) of the week.
 *
 * https://schema.org/opens
 */
export declare const opens: Property;
/**
 * operatingSystem
 *
 * Operating systems supported (Windows 7, OS X 10.6, Android 1.6).
 *
 * https://schema.org/operatingSystem
 */
export declare const operatingSystem: Property;
/**
 * opponent
 *
 * A sub property of participant. The opponent on this action.
 *
 * https://schema.org/opponent
 */
export declare const opponent: Property;
/**
 * option
 *
 * A sub property of object. The options subject to this action.
 *
 * https://schema.org/option
 */
export declare const option: Property;
/**
 * orderDate
 *
 * Date order was placed.
 *
 * https://schema.org/orderDate
 */
export declare const orderDate: Property;
/**
 * orderDelivery
 *
 * The delivery of the parcel related to this order or order item.
 *
 * https://schema.org/orderDelivery
 */
export declare const orderDelivery: Property;
/**
 * orderItemNumber
 *
 * The identifier of the order item.
 *
 * https://schema.org/orderItemNumber
 */
export declare const orderItemNumber: Property;
/**
 * orderItemStatus
 *
 * The current status of the order item.
 *
 * https://schema.org/orderItemStatus
 */
export declare const orderItemStatus: Property;
/**
 * orderNumber
 *
 * The identifier of the transaction.
 *
 * https://schema.org/orderNumber
 */
export declare const orderNumber: Property;
/**
 * orderQuantity
 *
 * The number of the item ordered. If the property is not set, assume the quantity is one.
 *
 * https://schema.org/orderQuantity
 */
export declare const orderQuantity: Property;
/**
 * orderStatus
 *
 * The current status of the order.
 *
 * https://schema.org/orderStatus
 */
export declare const orderStatus: Property;
/**
 * orderedItem
 *
 * The item ordered.
 *
 * https://schema.org/orderedItem
 */
export declare const orderedItem: Property;
/**
 * organizer
 *
 * An organizer of an Event.
 *
 * https://schema.org/organizer
 */
export declare const organizer: Property;
/**
 * originAddress
 *
 * Shipper's address.
 *
 * https://schema.org/originAddress
 */
export declare const originAddress: Property;
/**
 * originalMediaContextDescription
 *
 * Describes, in a [[MediaReview]] when dealing with [[DecontextualizedContent]], background information that can contribute to better interpretation of the [[MediaObject]].
 *
 * https://schema.org/originalMediaContextDescription
 */
export declare const originalMediaContextDescription: Property;
/**
 * originalMediaLink
 *
 * Link to the page containing an original version of the content, or directly to an online copy of the original [[MediaObject]] content, e.g. video file.
 *
 * https://schema.org/originalMediaLink
 */
export declare const originalMediaLink: Property;
/**
 * originatesFrom
 *
 * The vasculature the lymphatic structure originates, or afferents, from.
 *
 * https://schema.org/originatesFrom
 */
export declare const originatesFrom: Property;
/**
 * overdosage
 *
 * Any information related to overdose on a drug, including signs or symptoms, treatments, contact information for emergency response.
 *
 * https://schema.org/overdosage
 */
export declare const overdosage: Property;
/**
 * ownedFrom
 *
 * The date and time of obtaining the product.
 *
 * https://schema.org/ownedFrom
 */
export declare const ownedFrom: Property;
/**
 * ownedThrough
 *
 * The date and time of giving up ownership on the product.
 *
 * https://schema.org/ownedThrough
 */
export declare const ownedThrough: Property;
/**
 * ownershipFundingInfo
 *
 * For an [[Organization]] (often but not necessarily a [[NewsMediaOrganization]]), a description of organizational ownership structure; funding and grants. In a news/media setting, this is with particular reference to editorial independence.   Note that the [[funder]] is also available and can be used to make basic funder information machine-readable.
 *
 * https://schema.org/ownershipFundingInfo
 */
export declare const ownershipFundingInfo: Property;
/**
 * owns
 *
 * Products owned by the organization or person.
 *
 * https://schema.org/owns
 */
export declare const owns: Property;
/**
 * pageEnd
 *
 * The page on which the work ends; for example "138" or "xvi".
 *
 * https://schema.org/pageEnd
 */
export declare const pageEnd: Property;
/**
 * pageStart
 *
 * The page on which the work starts; for example "135" or "xiii".
 *
 * https://schema.org/pageStart
 */
export declare const pageStart: Property;
/**
 * pagination
 *
 * Any description of pages that is not separated into pageStart and pageEnd; for example, "1-6, 9, 55" or "10-12, 46-49".
 *
 * https://schema.org/pagination
 */
export declare const pagination: Property;
/**
 * parentItem
 *
 * The parent of a question, answer or item in general.
 *
 * https://schema.org/parentItem
 */
export declare const parentItem: Property;
/**
 * parentService
 *
 * A broadcast service to which the broadcast service may belong to such as regional variations of a national channel.
 *
 * https://schema.org/parentService
 */
export declare const parentService: Property;
/**
 * parents
 *
 * A parents of the person.
 *
 * https://schema.org/parents
 */
export declare const parents: Property;
/**
 * partOfEpisode
 *
 * The episode to which this clip belongs.
 *
 * https://schema.org/partOfEpisode
 */
export declare const partOfEpisode: Property;
/**
 * partOfInvoice
 *
 * The order is being paid as part of the referenced Invoice.
 *
 * https://schema.org/partOfInvoice
 */
export declare const partOfInvoice: Property;
/**
 * partOfOrder
 *
 * The overall order the items in this delivery were included in.
 *
 * https://schema.org/partOfOrder
 */
export declare const partOfOrder: Property;
/**
 * partOfSeason
 *
 * The season to which this episode belongs.
 *
 * https://schema.org/partOfSeason
 */
export declare const partOfSeason: Property;
/**
 * partOfSystem
 *
 * The anatomical or organ system that this structure is part of.
 *
 * https://schema.org/partOfSystem
 */
export declare const partOfSystem: Property;
/**
 * partOfTVSeries
 *
 * The TV series to which this episode or season belongs.
 *
 * https://schema.org/partOfTVSeries
 */
export declare const partOfTVSeries: Property;
/**
 * partySize
 *
 * Number of people the reservation should accommodate.
 *
 * https://schema.org/partySize
 */
export declare const partySize: Property;
/**
 * passengerPriorityStatus
 *
 * The priority status assigned to a passenger for security or boarding (e.g. FastTrack or Priority).
 *
 * https://schema.org/passengerPriorityStatus
 */
export declare const passengerPriorityStatus: Property;
/**
 * passengerSequenceNumber
 *
 * The passenger's sequence number as assigned by the airline.
 *
 * https://schema.org/passengerSequenceNumber
 */
export declare const passengerSequenceNumber: Property;
/**
 * pathophysiology
 *
 * Changes in the normal mechanical, physical, and biochemical functions that are associated with this activity or condition.
 *
 * https://schema.org/pathophysiology
 */
export declare const pathophysiology: Property;
/**
 * pattern
 *
 * A pattern that something has, for example 'polka dot', 'striped', 'Canadian flag'. Values are typically expressed as text, although links to controlled value schemes are also supported.
 *
 * https://schema.org/pattern
 */
export declare const pattern: Property;
/**
 * payload
 *
 * The permitted weight of passengers and cargo, EXCLUDING the weight of the empty vehicle.\n\nTypical unit code(s): KGM for kilogram, LBR for pound\n\n* Note 1: Many databases specify the permitted TOTAL weight instead, which is the sum of [[weight]] and [[payload]]\n* Note 2: You can indicate additional information in the [[name]] of the [[QuantitativeValue]] node.\n* Note 3: You may also link to a [[QualitativeValue]] node that provides additional information using [[valueReference]].\n* Note 4: Note that you can use [[minValue]] and [[maxValue]] to indicate ranges.
 *
 * https://schema.org/payload
 */
export declare const payload: Property;
/**
 * paymentAccepted
 *
 * Cash, Credit Card, Cryptocurrency, Local Exchange Tradings System, etc.
 *
 * https://schema.org/paymentAccepted
 */
export declare const paymentAccepted: Property;
/**
 * paymentDue
 *
 * The date that payment is due.
 *
 * https://schema.org/paymentDue
 */
export declare const paymentDue: Property;
/**
 * paymentMethod
 *
 * The name of the credit card or other method of payment for the order.
 *
 * https://schema.org/paymentMethod
 */
export declare const paymentMethod: Property;
/**
 * paymentMethodId
 *
 * An identifier for the method of payment used (e.g. the last 4 digits of the credit card).
 *
 * https://schema.org/paymentMethodId
 */
export declare const paymentMethodId: Property;
/**
 * paymentStatus
 *
 * The status of payment; whether the invoice has been paid or not.
 *
 * https://schema.org/paymentStatus
 */
export declare const paymentStatus: Property;
/**
 * paymentUrl
 *
 * The URL for sending a payment.
 *
 * https://schema.org/paymentUrl
 */
export declare const paymentUrl: Property;
/**
 * penciler
 *
 * The individual who draws the primary narrative artwork.
 *
 * https://schema.org/penciler
 */
export declare const penciler: Property;
/**
 * percentile10
 *
 * The 10th percentile value.
 *
 * https://schema.org/percentile10
 */
export declare const percentile10: Property;
/**
 * percentile25
 *
 * The 25th percentile value.
 *
 * https://schema.org/percentile25
 */
export declare const percentile25: Property;
/**
 * percentile75
 *
 * The 75th percentile value.
 *
 * https://schema.org/percentile75
 */
export declare const percentile75: Property;
/**
 * percentile90
 *
 * The 90th percentile value.
 *
 * https://schema.org/percentile90
 */
export declare const percentile90: Property;
/**
 * performerIn
 *
 * Event that this person is a performer or participant in.
 *
 * https://schema.org/performerIn
 */
export declare const performerIn: Property;
/**
 * performers
 *
 * The main performer or performers of the event&#x2014;for example, a presenter, musician, or actor.
 *
 * https://schema.org/performers
 */
export declare const performers: Property;
/**
 * permissionType
 *
 * The type of permission granted the person, organization, or audience.
 *
 * https://schema.org/permissionType
 */
export declare const permissionType: Property;
/**
 * permissions
 *
 * Permission(s) required to run the app (for example, a mobile app may require full internet access or may run only on wifi).
 *
 * https://schema.org/permissions
 */
export declare const permissions: Property;
/**
 * permitAudience
 *
 * The target audience for this permit.
 *
 * https://schema.org/permitAudience
 */
export declare const permitAudience: Property;
/**
 * permittedUsage
 *
 * Indications regarding the permitted usage of the accommodation.
 *
 * https://schema.org/permittedUsage
 */
export declare const permittedUsage: Property;
/**
 * petsAllowed
 *
 * Indicates whether pets are allowed to enter the accommodation or lodging business. More detailed information can be put in a text value.
 *
 * https://schema.org/petsAllowed
 */
export declare const petsAllowed: Property;
/**
 * phoneticText
 *
 * Representation of a text [[textValue]] using the specified [[speechToTextMarkup]]. For example the city name of Houston in IPA: /ˈhjuːstən/.
 *
 * https://schema.org/phoneticText
 */
export declare const phoneticText: Property;
/**
 * photos
 *
 * Photographs of this place.
 *
 * https://schema.org/photos
 */
export declare const photos: Property;
/**
 * physicalRequirement
 *
 * A description of the types of physical activity associated with the job. Defined terms such as those in O*net may be used, but note that there is no way to specify the level of ability as well as its nature when using a defined term.
 *
 * https://schema.org/physicalRequirement
 */
export declare const physicalRequirement: Property;
/**
 * physiologicalBenefits
 *
 * Specific physiologic benefits associated to the plan.
 *
 * https://schema.org/physiologicalBenefits
 */
export declare const physiologicalBenefits: Property;
/**
 * pickupLocation
 *
 * Where a taxi will pick up a passenger or a rental car can be picked up.
 *
 * https://schema.org/pickupLocation
 */
export declare const pickupLocation: Property;
/**
 * pickupTime
 *
 * When a taxi will pick up a passenger or a rental car can be picked up.
 *
 * https://schema.org/pickupTime
 */
export declare const pickupTime: Property;
/**
 * playMode
 *
 * Indicates whether this game is multi-player, co-op or single-player.  The game can be marked as multi-player, co-op and single-player at the same time.
 *
 * https://schema.org/playMode
 */
export declare const playMode: Property;
/**
 * playerType
 *
 * Player type required&#x2014;for example, Flash or Silverlight.
 *
 * https://schema.org/playerType
 */
export declare const playerType: Property;
/**
 * playersOnline
 *
 * Number of players on the server.
 *
 * https://schema.org/playersOnline
 */
export declare const playersOnline: Property;
/**
 * polygon
 *
 * A polygon is the area enclosed by a point-to-point path for which the starting and ending points are the same. A polygon is expressed as a series of four or more space delimited points where the first and final points are identical.
 *
 * https://schema.org/polygon
 */
export declare const polygon: Property;
/**
 * populationType
 *
 * Indicates the populationType common to all members of a [[StatisticalPopulation]] or all cases within the scope of a [[StatisticalVariable]].
 *
 * https://schema.org/populationType
 */
export declare const populationType: Property;
/**
 * positiveNotes
 *
 * Provides positive considerations regarding something, for example product highlights or (alongside [[negativeNotes]]) pro/con lists for reviews.
 *
 * In the case of a [[Review]], the property describes the [[itemReviewed]] from the perspective of the review; in the case of a [[Product]], the product itself is being described.
 *
 * The property values can be expressed either as unstructured text (repeated as necessary), or if ordered, as a list (in which case the most positive is at the beginning of the list).
 *
 * https://schema.org/positiveNotes
 */
export declare const positiveNotes: Property;
/**
 * possibleComplication
 *
 * A possible unexpected and unfavorable evolution of a medical condition. Complications may include worsening of the signs or symptoms of the disease, extension of the condition to other organ systems, etc.
 *
 * https://schema.org/possibleComplication
 */
export declare const possibleComplication: Property;
/**
 * possibleTreatment
 *
 * A possible treatment to address this condition, sign or symptom.
 *
 * https://schema.org/possibleTreatment
 */
export declare const possibleTreatment: Property;
/**
 * postOfficeBoxNumber
 *
 * The post office box number for PO box addresses.
 *
 * https://schema.org/postOfficeBoxNumber
 */
export declare const postOfficeBoxNumber: Property;
/**
 * postOp
 *
 * A description of the postoperative procedures, care, and/or followups for this device.
 *
 * https://schema.org/postOp
 */
export declare const postOp: Property;
/**
 * postalCode
 *
 * The postal code. For example, 94043.
 *
 * https://schema.org/postalCode
 */
export declare const postalCode: Property;
/**
 * postalCodeBegin
 *
 * First postal code in a range (included).
 *
 * https://schema.org/postalCodeBegin
 */
export declare const postalCodeBegin: Property;
/**
 * postalCodeEnd
 *
 * Last postal code in the range (included). Needs to be after [[postalCodeBegin]].
 *
 * https://schema.org/postalCodeEnd
 */
export declare const postalCodeEnd: Property;
/**
 * postalCodePrefix
 *
 * A defined range of postal codes indicated by a common textual prefix. Used for non-numeric systems such as UK.
 *
 * https://schema.org/postalCodePrefix
 */
export declare const postalCodePrefix: Property;
/**
 * postalCodeRange
 *
 * A defined range of postal codes.
 *
 * https://schema.org/postalCodeRange
 */
export declare const postalCodeRange: Property;
/**
 * potentialAction
 *
 * Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.
 *
 * https://schema.org/potentialAction
 */
export declare const potentialAction: Property;
/**
 * potentialUse
 *
 * Intended use of the BioChemEntity by humans.
 *
 * https://schema.org/potentialUse
 */
export declare const potentialUse: Property;
/**
 * preOp
 *
 * A description of the workup, testing, and other preparations required before implanting this device.
 *
 * https://schema.org/preOp
 */
export declare const preOp: Property;
/**
 * predecessorOf
 *
 * A pointer from a previous, often discontinued variant of the product to its newer variant.
 *
 * https://schema.org/predecessorOf
 */
export declare const predecessorOf: Property;
/**
 * pregnancyCategory
 *
 * Pregnancy category of this drug.
 *
 * https://schema.org/pregnancyCategory
 */
export declare const pregnancyCategory: Property;
/**
 * pregnancyWarning
 *
 * Any precaution, guidance, contraindication, etc. related to this drug's use during pregnancy.
 *
 * https://schema.org/pregnancyWarning
 */
export declare const pregnancyWarning: Property;
/**
 * prepTime
 *
 * The length of time it takes to prepare the items to be used in instructions or a direction, in [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601).
 *
 * https://schema.org/prepTime
 */
export declare const prepTime: Property;
/**
 * preparation
 *
 * Typical preparation that a patient must undergo before having the procedure performed.
 *
 * https://schema.org/preparation
 */
export declare const preparation: Property;
/**
 * prescribingInfo
 *
 * Link to prescribing information for the drug.
 *
 * https://schema.org/prescribingInfo
 */
export declare const prescribingInfo: Property;
/**
 * prescriptionStatus
 *
 * Indicates the status of drug prescription, e.g. local catalogs classifications or whether the drug is available by prescription or over-the-counter, etc.
 *
 * https://schema.org/prescriptionStatus
 */
export declare const prescriptionStatus: Property;
/**
 * previousItem
 *
 * A link to the ListItem that precedes the current one.
 *
 * https://schema.org/previousItem
 */
export declare const previousItem: Property;
/**
 * previousStartDate
 *
 * Used in conjunction with eventStatus for rescheduled or cancelled events. This property contains the previously scheduled start date. For rescheduled events, the startDate property should be used for the newly scheduled start date. In the (rare) case of an event that has been postponed and rescheduled multiple times, this field may be repeated.
 *
 * https://schema.org/previousStartDate
 */
export declare const previousStartDate: Property;
/**
 * price
 *
 * The offer price of a product, or of a price component when attached to PriceSpecification and its subtypes.\n\nUsage guidelines:\n\n* Use the [[priceCurrency]] property (with standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217), e.g. "USD"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies, e.g. "BTC"; well known names for [Local Exchange Trading Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types, e.g. "Ithaca HOUR") instead of including [ambiguous symbols](http://en.wikipedia.org/wiki/Dollar_sign#Currencies_that_use_the_dollar_or_peso_sign) such as '$' in the value.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.\n* Note that both [RDFa](http://www.w3.org/TR/xhtml-rdfa-primer/#using-the-content-attribute) and Microdata syntax allow the use of a "content=" attribute for publishing simple machine-readable values alongside more human-friendly formatting.\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similar Unicode symbols.
 *
 *
 * https://schema.org/price
 */
export declare const price: Property;
/**
 * priceComponent
 *
 * This property links to all [[UnitPriceSpecification]] nodes that apply in parallel for the [[CompoundPriceSpecification]] node.
 *
 * https://schema.org/priceComponent
 */
export declare const priceComponent: Property;
/**
 * priceComponentType
 *
 * Identifies a price component (for example, a line item on an invoice), part of the total price for an offer.
 *
 * https://schema.org/priceComponentType
 */
export declare const priceComponentType: Property;
/**
 * priceCurrency
 *
 * The currency of the price, or a price component when attached to [[PriceSpecification]] and its subtypes.\n\nUse standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217), e.g. "USD"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies, e.g. "BTC"; well known names for [Local Exchange Trading Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types, e.g. "Ithaca HOUR".
 *
 * https://schema.org/priceCurrency
 */
export declare const priceCurrency: Property;
/**
 * priceRange
 *
 * The price range of the business, for example ```$$$```.
 *
 * https://schema.org/priceRange
 */
export declare const priceRange: Property;
/**
 * priceSpecification
 *
 * One or more detailed price specifications, indicating the unit price and delivery or payment charges.
 *
 * https://schema.org/priceSpecification
 */
export declare const priceSpecification: Property;
/**
 * priceType
 *
 * Defines the type of a price specified for an offered product, for example a list price, a (temporary) sale price or a manufacturer suggested retail price. If multiple prices are specified for an offer the [[priceType]] property can be used to identify the type of each such specified price. The value of priceType can be specified as a value from enumeration PriceTypeEnumeration or as a free form text string for price types that are not already predefined in PriceTypeEnumeration.
 *
 * https://schema.org/priceType
 */
export declare const priceType: Property;
/**
 * priceValidUntil
 *
 * The date after which the price is no longer available.
 *
 * https://schema.org/priceValidUntil
 */
export declare const priceValidUntil: Property;
/**
 * primaryImageOfPage
 *
 * Indicates the main image on the page.
 *
 * https://schema.org/primaryImageOfPage
 */
export declare const primaryImageOfPage: Property;
/**
 * primaryPrevention
 *
 * A preventative therapy used to prevent an initial occurrence of the medical condition, such as vaccination.
 *
 * https://schema.org/primaryPrevention
 */
export declare const primaryPrevention: Property;
/**
 * printColumn
 *
 * The number of the column in which the NewsArticle appears in the print edition.
 *
 * https://schema.org/printColumn
 */
export declare const printColumn: Property;
/**
 * printEdition
 *
 * The edition of the print product in which the NewsArticle appears.
 *
 * https://schema.org/printEdition
 */
export declare const printEdition: Property;
/**
 * printPage
 *
 * If this NewsArticle appears in print, this field indicates the name of the page on which the article is found. Please note that this field is intended for the exact page name (e.g. A5, B18).
 *
 * https://schema.org/printPage
 */
export declare const printPage: Property;
/**
 * printSection
 *
 * If this NewsArticle appears in print, this field indicates the print section in which the article appeared.
 *
 * https://schema.org/printSection
 */
export declare const printSection: Property;
/**
 * procedure
 *
 * A description of the procedure involved in setting up, using, and/or installing the device.
 *
 * https://schema.org/procedure
 */
export declare const procedure: Property;
/**
 * procedureType
 *
 * The type of procedure, for example Surgical, Noninvasive, or Percutaneous.
 *
 * https://schema.org/procedureType
 */
export declare const procedureType: Property;
/**
 * processingTime
 *
 * Estimated processing time for the service using this channel.
 *
 * https://schema.org/processingTime
 */
export declare const processingTime: Property;
/**
 * processorRequirements
 *
 * Processor architecture required to run the application (e.g. IA64).
 *
 * https://schema.org/processorRequirements
 */
export declare const processorRequirements: Property;
/**
 * producer
 *
 * The person or organization who produced the work (e.g. music album, movie, TV/radio series etc.).
 *
 * https://schema.org/producer
 */
export declare const producer: Property;
/**
 * produces
 *
 * The tangible thing generated by the service, e.g. a passport, permit, etc.
 *
 * https://schema.org/produces
 */
export declare const produces: Property;
/**
 * productGroupID
 *
 * Indicates a textual identifier for a ProductGroup.
 *
 * https://schema.org/productGroupID
 */
export declare const productGroupID: Property;
/**
 * productID
 *
 * The product identifier, such as ISBN. For example: ``` meta itemprop="productID" content="isbn:123-456-789" ```.
 *
 * https://schema.org/productID
 */
export declare const productID: Property;
/**
 * productReturnDays
 *
 * The productReturnDays property indicates the number of days (from purchase) within which relevant product return policy is applicable.
 *
 * https://schema.org/productReturnDays
 */
export declare const productReturnDays: Property;
/**
 * productReturnLink
 *
 * Indicates a Web page or service by URL, for product return.
 *
 * https://schema.org/productReturnLink
 */
export declare const productReturnLink: Property;
/**
 * productSupported
 *
 * The product or service this support contact point is related to (such as product support for a particular product line). This can be a specific product or product line (e.g. "iPhone") or a general category of products or services (e.g. "smartphones").
 *
 * https://schema.org/productSupported
 */
export declare const productSupported: Property;
/**
 * productionCompany
 *
 * The production company or studio responsible for the item, e.g. series, video game, episode etc.
 *
 * https://schema.org/productionCompany
 */
export declare const productionCompany: Property;
/**
 * productionDate
 *
 * The date of production of the item, e.g. vehicle.
 *
 * https://schema.org/productionDate
 */
export declare const productionDate: Property;
/**
 * proficiencyLevel
 *
 * Proficiency needed for this content; expected values: 'Beginner', 'Expert'.
 *
 * https://schema.org/proficiencyLevel
 */
export declare const proficiencyLevel: Property;
/**
 * programMembershipUsed
 *
 * Any membership in a frequent flyer, hotel loyalty program, etc. being applied to the reservation.
 *
 * https://schema.org/programMembershipUsed
 */
export declare const programMembershipUsed: Property;
/**
 * programName
 *
 * The program providing the membership.
 *
 * https://schema.org/programName
 */
export declare const programName: Property;
/**
 * programPrerequisites
 *
 * Prerequisites for enrolling in the program.
 *
 * https://schema.org/programPrerequisites
 */
export declare const programPrerequisites: Property;
/**
 * programType
 *
 * The type of educational or occupational program. For example, classroom, internship, alternance, etc.
 *
 * https://schema.org/programType
 */
export declare const programType: Property;
/**
 * programmingLanguage
 *
 * The computer programming language.
 *
 * https://schema.org/programmingLanguage
 */
export declare const programmingLanguage: Property;
/**
 * programmingModel
 *
 * Indicates whether API is managed or unmanaged.
 *
 * https://schema.org/programmingModel
 */
export declare const programmingModel: Property;
/**
 * propertyID
 *
 * A commonly used identifier for the characteristic represented by the property, e.g. a manufacturer or a standard code for a property. propertyID can be
 * (1) a prefixed string, mainly meant to be used with standards for product properties; (2) a site-specific, non-prefixed string (e.g. the primary key of the property or the vendor-specific ID of the property), or (3)
 * a URL indicating the type of the property, either pointing to an external vocabulary, or a Web resource that describes the property (e.g. a glossary entry).
 * Standards bodies should promote a standard prefix for the identifiers of properties from their standards.
 *
 * https://schema.org/propertyID
 */
export declare const propertyID: Property;
/**
 * proprietaryName
 *
 * Proprietary name given to the diet plan, typically by its originator or creator.
 *
 * https://schema.org/proprietaryName
 */
export declare const proprietaryName: Property;
/**
 * proteinContent
 *
 * The number of grams of protein.
 *
 * https://schema.org/proteinContent
 */
export declare const proteinContent: Property;
/**
 * providerMobility
 *
 * Indicates the mobility of a provided service (e.g. 'static', 'dynamic').
 *
 * https://schema.org/providerMobility
 */
export declare const providerMobility: Property;
/**
 * providesService
 *
 * The service provided by this channel.
 *
 * https://schema.org/providesService
 */
export declare const providesService: Property;
/**
 * publicAccess
 *
 * A flag to signal that the [[Place]] is open to public visitors.  If this property is omitted there is no assumed default boolean value
 *
 * https://schema.org/publicAccess
 */
export declare const publicAccess: Property;
/**
 * publicTransportClosuresInfo
 *
 * Information about public transport closures.
 *
 * https://schema.org/publicTransportClosuresInfo
 */
export declare const publicTransportClosuresInfo: Property;
/**
 * publication
 *
 * A publication event associated with the item.
 *
 * https://schema.org/publication
 */
export declare const publication: Property;
/**
 * publicationType
 *
 * The type of the medical article, taken from the US NLM MeSH publication type catalog. See also [MeSH documentation](http://www.nlm.nih.gov/mesh/pubtypes.html).
 *
 * https://schema.org/publicationType
 */
export declare const publicationType: Property;
/**
 * publishedBy
 *
 * An agent associated with the publication event.
 *
 * https://schema.org/publishedBy
 */
export declare const publishedBy: Property;
/**
 * publishedOn
 *
 * A broadcast service associated with the publication event.
 *
 * https://schema.org/publishedOn
 */
export declare const publishedOn: Property;
/**
 * publisher
 *
 * The publisher of the creative work.
 *
 * https://schema.org/publisher
 */
export declare const publisher: Property;
/**
 * publisherImprint
 *
 * The publishing division which published the comic.
 *
 * https://schema.org/publisherImprint
 */
export declare const publisherImprint: Property;
/**
 * purchaseDate
 *
 * The date the item, e.g. vehicle, was purchased by the current owner.
 *
 * https://schema.org/purchaseDate
 */
export declare const purchaseDate: Property;
/**
 * qualifications
 *
 * Specific qualifications required for this role or Occupation.
 *
 * https://schema.org/qualifications
 */
export declare const qualifications: Property;
/**
 * quarantineGuidelines
 *
 * Guidelines about quarantine rules, e.g. in the context of a pandemic.
 *
 * https://schema.org/quarantineGuidelines
 */
export declare const quarantineGuidelines: Property;
/**
 * query
 *
 * A sub property of instrument. The query used on this action.
 *
 * https://schema.org/query
 */
export declare const query: Property;
/**
 * quest
 *
 * The task that a player-controlled character, or group of characters may complete in order to gain a reward.
 *
 * https://schema.org/quest
 */
export declare const quest: Property;
/**
 * question
 *
 * A sub property of object. A question.
 *
 * https://schema.org/question
 */
export declare const question: Property;
/**
 * rangeIncludes
 *
 * Relates a property to a class that constitutes (one of) the expected type(s) for values of the property.
 *
 * https://schema.org/rangeIncludes
 */
export declare const rangeIncludes: Property;
/**
 * ratingCount
 *
 * The count of total number of ratings.
 *
 * https://schema.org/ratingCount
 */
export declare const ratingCount: Property;
/**
 * ratingExplanation
 *
 * A short explanation (e.g. one to two sentences) providing background context and other information that led to the conclusion expressed in the rating. This is particularly applicable to ratings associated with "fact check" markup using [[ClaimReview]].
 *
 * https://schema.org/ratingExplanation
 */
export declare const ratingExplanation: Property;
/**
 * ratingValue
 *
 * The rating for the content.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
 *
 * https://schema.org/ratingValue
 */
export declare const ratingValue: Property;
/**
 * readBy
 *
 * A person who reads (performs) the audiobook.
 *
 * https://schema.org/readBy
 */
export declare const readBy: Property;
/**
 * readonlyValue
 *
 * Whether or not a property is mutable.  Default is false. Specifying this for a property that also has a value makes it act similar to a "hidden" input in an HTML form.
 *
 * https://schema.org/readonlyValue
 */
export declare const readonlyValue: Property;
/**
 * realEstateAgent
 *
 * A sub property of participant. The real estate agent involved in the action.
 *
 * https://schema.org/realEstateAgent
 */
export declare const realEstateAgent: Property;
/**
 * recipe
 *
 * A sub property of instrument. The recipe/instructions used to perform the action.
 *
 * https://schema.org/recipe
 */
export declare const recipe: Property;
/**
 * recipeCategory
 *
 * The category of the recipe—for example, appetizer, entree, etc.
 *
 * https://schema.org/recipeCategory
 */
export declare const recipeCategory: Property;
/**
 * recipeCuisine
 *
 * The cuisine of the recipe (for example, French or Ethiopian).
 *
 * https://schema.org/recipeCuisine
 */
export declare const recipeCuisine: Property;
/**
 * recipeInstructions
 *
 * A step in making the recipe, in the form of a single item (document, video, etc.) or an ordered list with HowToStep and/or HowToSection items.
 *
 * https://schema.org/recipeInstructions
 */
export declare const recipeInstructions: Property;
/**
 * recipeYield
 *
 * The quantity produced by the recipe (for example, number of people served, number of servings, etc).
 *
 * https://schema.org/recipeYield
 */
export declare const recipeYield: Property;
/**
 * recognizedBy
 *
 * An organization that acknowledges the validity, value or utility of a credential. Note: recognition may include a process of quality assurance or accreditation.
 *
 * https://schema.org/recognizedBy
 */
export declare const recognizedBy: Property;
/**
 * recognizingAuthority
 *
 * If applicable, the organization that officially recognizes this entity as part of its endorsed system of medicine.
 *
 * https://schema.org/recognizingAuthority
 */
export declare const recognizingAuthority: Property;
/**
 * recommendationStrength
 *
 * Strength of the guideline's recommendation (e.g. 'class I').
 *
 * https://schema.org/recommendationStrength
 */
export declare const recommendationStrength: Property;
/**
 * recommendedIntake
 *
 * Recommended intake of this supplement for a given population as defined by a specific recommending authority.
 *
 * https://schema.org/recommendedIntake
 */
export declare const recommendedIntake: Property;
/**
 * recordLabel
 *
 * The label that issued the release.
 *
 * https://schema.org/recordLabel
 */
export declare const recordLabel: Property;
/**
 * recourseLoan
 *
 * The only way you get the money back in the event of default is the security. Recourse is where you still have the opportunity to go back to the borrower for the rest of the money.
 *
 * https://schema.org/recourseLoan
 */
export declare const recourseLoan: Property;
/**
 * referenceQuantity
 *
 * The reference quantity for which a certain price applies, e.g. 1 EUR per 4 kWh of electricity. This property is a replacement for unitOfMeasurement for the advanced cases where the price does not relate to a standard unit.
 *
 * https://schema.org/referenceQuantity
 */
export declare const referenceQuantity: Property;
/**
 * referencesOrder
 *
 * The Order(s) related to this Invoice. One or more Orders may be combined into a single Invoice.
 *
 * https://schema.org/referencesOrder
 */
export declare const referencesOrder: Property;
/**
 * refundType
 *
 * A refund type, from an enumerated list.
 *
 * https://schema.org/refundType
 */
export declare const refundType: Property;
/**
 * regionDrained
 *
 * The anatomical or organ system drained by this vessel; generally refers to a specific part of an organ.
 *
 * https://schema.org/regionDrained
 */
export declare const regionDrained: Property;
/**
 * regionsAllowed
 *
 * The regions where the media is allowed. If not specified, then it's assumed to be allowed everywhere. Specify the countries in [ISO 3166 format](http://en.wikipedia.org/wiki/ISO_3166).
 *
 * https://schema.org/regionsAllowed
 */
export declare const regionsAllowed: Property;
/**
 * relatedAnatomy
 *
 * Anatomical systems or structures that relate to the superficial anatomy.
 *
 * https://schema.org/relatedAnatomy
 */
export declare const relatedAnatomy: Property;
/**
 * relatedCondition
 *
 * A medical condition associated with this anatomy.
 *
 * https://schema.org/relatedCondition
 */
export declare const relatedCondition: Property;
/**
 * relatedDrug
 *
 * Any other drug related to this one, for example commonly-prescribed alternatives.
 *
 * https://schema.org/relatedDrug
 */
export declare const relatedDrug: Property;
/**
 * relatedLink
 *
 * A link related to this web page, for example to other related web pages.
 *
 * https://schema.org/relatedLink
 */
export declare const relatedLink: Property;
/**
 * relatedStructure
 *
 * Related anatomical structure(s) that are not part of the system but relate or connect to it, such as vascular bundles associated with an organ system.
 *
 * https://schema.org/relatedStructure
 */
export declare const relatedStructure: Property;
/**
 * relatedTherapy
 *
 * A medical therapy related to this anatomy.
 *
 * https://schema.org/relatedTherapy
 */
export declare const relatedTherapy: Property;
/**
 * relatedTo
 *
 * The most generic familial relation.
 *
 * https://schema.org/relatedTo
 */
export declare const relatedTo: Property;
/**
 * releaseDate
 *
 * The release date of a product or product model. This can be used to distinguish the exact variant of a product.
 *
 * https://schema.org/releaseDate
 */
export declare const releaseDate: Property;
/**
 * releaseNotes
 *
 * Description of what changed in this version.
 *
 * https://schema.org/releaseNotes
 */
export declare const releaseNotes: Property;
/**
 * releasedEvent
 *
 * The place and time the release was issued, expressed as a PublicationEvent.
 *
 * https://schema.org/releasedEvent
 */
export declare const releasedEvent: Property;
/**
 * relevantOccupation
 *
 * The Occupation for the JobPosting.
 *
 * https://schema.org/relevantOccupation
 */
export declare const relevantOccupation: Property;
/**
 * relevantSpecialty
 *
 * If applicable, a medical specialty in which this entity is relevant.
 *
 * https://schema.org/relevantSpecialty
 */
export declare const relevantSpecialty: Property;
/**
 * remainingAttendeeCapacity
 *
 * The number of attendee places for an event that remain unallocated.
 *
 * https://schema.org/remainingAttendeeCapacity
 */
export declare const remainingAttendeeCapacity: Property;
/**
 * renegotiableLoan
 *
 * Whether the terms for payment of interest can be renegotiated during the life of the loan.
 *
 * https://schema.org/renegotiableLoan
 */
export declare const renegotiableLoan: Property;
/**
 * repeatCount
 *
 * Defines the number of times a recurring [[Event]] will take place.
 *
 * https://schema.org/repeatCount
 */
export declare const repeatCount: Property;
/**
 * repeatFrequency
 *
 * Defines the frequency at which [[Event]]s will occur according to a schedule [[Schedule]]. The intervals between
 *       events should be defined as a [[Duration]] of time.
 *
 * https://schema.org/repeatFrequency
 */
export declare const repeatFrequency: Property;
/**
 * repetitions
 *
 * Number of times one should repeat the activity.
 *
 * https://schema.org/repetitions
 */
export declare const repetitions: Property;
/**
 * replacee
 *
 * A sub property of object. The object that is being replaced.
 *
 * https://schema.org/replacee
 */
export declare const replacee: Property;
/**
 * replacer
 *
 * A sub property of object. The object that replaces.
 *
 * https://schema.org/replacer
 */
export declare const replacer: Property;
/**
 * replyToUrl
 *
 * The URL at which a reply may be posted to the specified UserComment.
 *
 * https://schema.org/replyToUrl
 */
export declare const replyToUrl: Property;
/**
 * reportNumber
 *
 * The number or other unique designator assigned to a Report by the publishing organization.
 *
 * https://schema.org/reportNumber
 */
export declare const reportNumber: Property;
/**
 * representativeOfPage
 *
 * Indicates whether this image is representative of the content of the page.
 *
 * https://schema.org/representativeOfPage
 */
export declare const representativeOfPage: Property;
/**
 * requiredCollateral
 *
 * Assets required to secure loan or credit repayments. It may take form of third party pledge, goods, financial instruments (cash, securities, etc.)
 *
 * https://schema.org/requiredCollateral
 */
export declare const requiredCollateral: Property;
/**
 * requiredGender
 *
 * Audiences defined by a person's gender.
 *
 * https://schema.org/requiredGender
 */
export declare const requiredGender: Property;
/**
 * requiredMaxAge
 *
 * Audiences defined by a person's maximum age.
 *
 * https://schema.org/requiredMaxAge
 */
export declare const requiredMaxAge: Property;
/**
 * requiredMinAge
 *
 * Audiences defined by a person's minimum age.
 *
 * https://schema.org/requiredMinAge
 */
export declare const requiredMinAge: Property;
/**
 * requiredQuantity
 *
 * The required quantity of the item(s).
 *
 * https://schema.org/requiredQuantity
 */
export declare const requiredQuantity: Property;
/**
 * requirements
 *
 * Component dependency requirements for application. This includes runtime environments and shared libraries that are not included in the application distribution package, but required to run the application (examples: DirectX, Java or .NET runtime).
 *
 * https://schema.org/requirements
 */
export declare const requirements: Property;
/**
 * requiresSubscription
 *
 * Indicates if use of the media require a subscription  (either paid or free). Allowed values are ```true``` or ```false``` (note that an earlier version had 'yes', 'no').
 *
 * https://schema.org/requiresSubscription
 */
export declare const requiresSubscription: Property;
/**
 * reservationFor
 *
 * The thing -- flight, event, restaurant, etc. being reserved.
 *
 * https://schema.org/reservationFor
 */
export declare const reservationFor: Property;
/**
 * reservationId
 *
 * A unique identifier for the reservation.
 *
 * https://schema.org/reservationId
 */
export declare const reservationId: Property;
/**
 * reservationStatus
 *
 * The current status of the reservation.
 *
 * https://schema.org/reservationStatus
 */
export declare const reservationStatus: Property;
/**
 * reservedTicket
 *
 * A ticket associated with the reservation.
 *
 * https://schema.org/reservedTicket
 */
export declare const reservedTicket: Property;
/**
 * responsibilities
 *
 * Responsibilities associated with this role or Occupation.
 *
 * https://schema.org/responsibilities
 */
export declare const responsibilities: Property;
/**
 * restPeriods
 *
 * How often one should break from the activity.
 *
 * https://schema.org/restPeriods
 */
export declare const restPeriods: Property;
/**
 * restockingFee
 *
 * Use [[MonetaryAmount]] to specify a fixed restocking fee for product returns, or use [[Number]] to specify a percentage of the product price paid by the customer.
 *
 * https://schema.org/restockingFee
 */
export declare const restockingFee: Property;
/**
 * resultComment
 *
 * A sub property of result. The Comment created or sent as a result of this action.
 *
 * https://schema.org/resultComment
 */
export declare const resultComment: Property;
/**
 * resultReview
 *
 * A sub property of result. The review that resulted in the performing of the action.
 *
 * https://schema.org/resultReview
 */
export declare const resultReview: Property;
/**
 * returnFees
 *
 * The type of return fees for purchased products (for any return reason).
 *
 * https://schema.org/returnFees
 */
export declare const returnFees: Property;
/**
 * returnLabelSource
 *
 * The method (from an enumeration) by which the customer obtains a return shipping label for a product returned for any reason.
 *
 * https://schema.org/returnLabelSource
 */
export declare const returnLabelSource: Property;
/**
 * returnMethod
 *
 * The type of return method offered, specified from an enumeration.
 *
 * https://schema.org/returnMethod
 */
export declare const returnMethod: Property;
/**
 * returnPolicyCategory
 *
 * Specifies an applicable return policy (from an enumeration).
 *
 * https://schema.org/returnPolicyCategory
 */
export declare const returnPolicyCategory: Property;
/**
 * returnPolicyCountry
 *
 * The country where the product has to be sent to for returns, for example "Ireland" using the [[name]] property of [[Country]]. You can also provide the two-letter [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1). Note that this can be different from the country where the product was originally shipped from or sent to.
 *
 * https://schema.org/returnPolicyCountry
 */
export declare const returnPolicyCountry: Property;
/**
 * returnPolicySeasonalOverride
 *
 * Seasonal override of a return policy.
 *
 * https://schema.org/returnPolicySeasonalOverride
 */
export declare const returnPolicySeasonalOverride: Property;
/**
 * returnShippingFeesAmount
 *
 * Amount of shipping costs for product returns (for any reason). Applicable when property [[returnFees]] equals [[ReturnShippingFees]].
 *
 * https://schema.org/returnShippingFeesAmount
 */
export declare const returnShippingFeesAmount: Property;
/**
 * reviewAspect
 *
 * This Review or Rating is relevant to this part or facet of the itemReviewed.
 *
 * https://schema.org/reviewAspect
 */
export declare const reviewAspect: Property;
/**
 * reviewBody
 *
 * The actual body of the review.
 *
 * https://schema.org/reviewBody
 */
export declare const reviewBody: Property;
/**
 * reviewCount
 *
 * The count of total number of reviews.
 *
 * https://schema.org/reviewCount
 */
export declare const reviewCount: Property;
/**
 * reviewRating
 *
 * The rating given in this review. Note that reviews can themselves be rated. The ```reviewRating``` applies to rating given by the review. The [[aggregateRating]] property applies to the review itself, as a creative work.
 *
 * https://schema.org/reviewRating
 */
export declare const reviewRating: Property;
/**
 * reviewedBy
 *
 * People or organizations that have reviewed the content on this web page for accuracy and/or completeness.
 *
 * https://schema.org/reviewedBy
 */
export declare const reviewedBy: Property;
/**
 * reviews
 *
 * Review of the item.
 *
 * https://schema.org/reviews
 */
export declare const reviews: Property;
/**
 * riskFactor
 *
 * A modifiable or non-modifiable factor that increases the risk of a patient contracting this condition, e.g. age,  coexisting condition.
 *
 * https://schema.org/riskFactor
 */
export declare const riskFactor: Property;
/**
 * risks
 *
 * Specific physiologic risks associated to the diet plan.
 *
 * https://schema.org/risks
 */
export declare const risks: Property;
/**
 * roofLoad
 *
 * The permitted total weight of cargo and installations (e.g. a roof rack) on top of the vehicle.\n\nTypical unit code(s): KGM for kilogram, LBR for pound\n\n* Note 1: You can indicate additional information in the [[name]] of the [[QuantitativeValue]] node.\n* Note 2: You may also link to a [[QualitativeValue]] node that provides additional information using [[valueReference]]\n* Note 3: Note that you can use [[minValue]] and [[maxValue]] to indicate ranges.
 *
 * https://schema.org/roofLoad
 */
export declare const roofLoad: Property;
/**
 * rsvpResponse
 *
 * The response (yes, no, maybe) to the RSVP.
 *
 * https://schema.org/rsvpResponse
 */
export declare const rsvpResponse: Property;
/**
 * runsTo
 *
 * The vasculature the lymphatic structure runs, or efferents, to.
 *
 * https://schema.org/runsTo
 */
export declare const runsTo: Property;
/**
 * runtime
 *
 * Runtime platform or script interpreter dependencies (example: Java v1, Python 2.3, .NET Framework 3.0).
 *
 * https://schema.org/runtime
 */
export declare const runtime: Property;
/**
 * rxcui
 *
 * The RxCUI drug identifier from RXNORM.
 *
 * https://schema.org/rxcui
 */
export declare const rxcui: Property;
/**
 * safetyConsideration
 *
 * Any potential safety concern associated with the supplement. May include interactions with other drugs and foods, pregnancy, breastfeeding, known adverse reactions, and documented efficacy of the supplement.
 *
 * https://schema.org/safetyConsideration
 */
export declare const safetyConsideration: Property;
/**
 * salaryCurrency
 *
 * The currency (coded using [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217)) used for the main salary information in this job posting or for this employee.
 *
 * https://schema.org/salaryCurrency
 */
export declare const salaryCurrency: Property;
/**
 * salaryUponCompletion
 *
 * The expected salary upon completing the training.
 *
 * https://schema.org/salaryUponCompletion
 */
export declare const salaryUponCompletion: Property;
/**
 * sameAs
 *
 * URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.
 *
 * https://schema.org/sameAs
 */
export declare const sameAs: Property;
/**
 * sampleType
 *
 * What type of code sample: full (compile ready) solution, code snippet, inline code, scripts, template.
 *
 * https://schema.org/sampleType
 */
export declare const sampleType: Property;
/**
 * saturatedFatContent
 *
 * The number of grams of saturated fat.
 *
 * https://schema.org/saturatedFatContent
 */
export declare const saturatedFatContent: Property;
/**
 * scheduleTimezone
 *
 * Indicates the timezone for which the time(s) indicated in the [[Schedule]] are given. The value provided should be among those listed in the IANA Time Zone Database.
 *
 * https://schema.org/scheduleTimezone
 */
export declare const scheduleTimezone: Property;
/**
 * scheduledPaymentDate
 *
 * The date the invoice is scheduled to be paid.
 *
 * https://schema.org/scheduledPaymentDate
 */
export declare const scheduledPaymentDate: Property;
/**
 * scheduledTime
 *
 * The time the object is scheduled to.
 *
 * https://schema.org/scheduledTime
 */
export declare const scheduledTime: Property;
/**
 * schemaVersion
 *
 * Indicates (by URL or string) a particular version of a schema used in some CreativeWork. This property was created primarily to
 *     indicate the use of a specific schema.org release, e.g. ```10.0``` as a simple string, or more explicitly via URL, ```https://schema.org/docs/releases.html#v10.0```. There may be situations in which other schemas might usefully be referenced this way, e.g. ```http://dublincore.org/specifications/dublin-core/dces/1999-07-02/``` but this has not been carefully explored in the community.
 *
 * https://schema.org/schemaVersion
 */
export declare const schemaVersion: Property;
/**
 * schoolClosuresInfo
 *
 * Information about school closures.
 *
 * https://schema.org/schoolClosuresInfo
 */
export declare const schoolClosuresInfo: Property;
/**
 * screenCount
 *
 * The number of screens in the movie theater.
 *
 * https://schema.org/screenCount
 */
export declare const screenCount: Property;
/**
 * screenshot
 *
 * A link to a screenshot image of the app.
 *
 * https://schema.org/screenshot
 */
export declare const screenshot: Property;
/**
 * sdDatePublished
 *
 * Indicates the date on which the current structured data was generated / published. Typically used alongside [[sdPublisher]]
 *
 * https://schema.org/sdDatePublished
 */
export declare const sdDatePublished: Property;
/**
 * sdLicense
 *
 * A license document that applies to this structured data, typically indicated by URL.
 *
 * https://schema.org/sdLicense
 */
export declare const sdLicense: Property;
/**
 * sdPublisher
 *
 * Indicates the party responsible for generating and publishing the current structured data markup, typically in cases where the structured data is derived automatically from existing published content but published on a different site. For example, student projects and open data initiatives often re-publish existing content with more explicitly structured metadata. The
 * [[sdPublisher]] property helps make such practices more explicit.
 *
 * https://schema.org/sdPublisher
 */
export declare const sdPublisher: Property;
/**
 * seasonNumber
 *
 * Position of the season within an ordered group of seasons.
 *
 * https://schema.org/seasonNumber
 */
export declare const seasonNumber: Property;
/**
 * seasons
 *
 * A season in a media series.
 *
 * https://schema.org/seasons
 */
export declare const seasons: Property;
/**
 * seatNumber
 *
 * The location of the reserved seat (e.g., 27).
 *
 * https://schema.org/seatNumber
 */
export declare const seatNumber: Property;
/**
 * seatRow
 *
 * The row location of the reserved seat (e.g., B).
 *
 * https://schema.org/seatRow
 */
export declare const seatRow: Property;
/**
 * seatSection
 *
 * The section location of the reserved seat (e.g. Orchestra).
 *
 * https://schema.org/seatSection
 */
export declare const seatSection: Property;
/**
 * seatingCapacity
 *
 * The number of persons that can be seated (e.g. in a vehicle), both in terms of the physical space available, and in terms of limitations set by law.\n\nTypical unit code(s): C62 for persons
 *
 * https://schema.org/seatingCapacity
 */
export declare const seatingCapacity: Property;
/**
 * seatingType
 *
 * The type/class of the seat.
 *
 * https://schema.org/seatingType
 */
export declare const seatingType: Property;
/**
 * secondaryPrevention
 *
 * A preventative therapy used to prevent reoccurrence of the medical condition after an initial episode of the condition.
 *
 * https://schema.org/secondaryPrevention
 */
export declare const secondaryPrevention: Property;
/**
 * securityClearanceRequirement
 *
 * A description of any security clearance requirements of the job.
 *
 * https://schema.org/securityClearanceRequirement
 */
export declare const securityClearanceRequirement: Property;
/**
 * securityScreening
 *
 * The type of security screening the passenger is subject to.
 *
 * https://schema.org/securityScreening
 */
export declare const securityScreening: Property;
/**
 * seeks
 *
 * A pointer to products or services sought by the organization or person (demand).
 *
 * https://schema.org/seeks
 */
export declare const seeks: Property;
/**
 * sender
 *
 * A sub property of participant. The participant who is at the sending end of the action.
 *
 * https://schema.org/sender
 */
export declare const sender: Property;
/**
 * sensoryRequirement
 *
 * A description of any sensory requirements and levels necessary to function on the job, including hearing and vision. Defined terms such as those in O*net may be used, but note that there is no way to specify the level of ability as well as its nature when using a defined term.
 *
 * https://schema.org/sensoryRequirement
 */
export declare const sensoryRequirement: Property;
/**
 * sensoryUnit
 *
 * The neurological pathway extension that inputs and sends information to the brain or spinal cord.
 *
 * https://schema.org/sensoryUnit
 */
export declare const sensoryUnit: Property;
/**
 * seriousAdverseOutcome
 *
 * A possible serious complication and/or serious side effect of this therapy. Serious adverse outcomes include those that are life-threatening; result in death, disability, or permanent damage; require hospitalization or prolong existing hospitalization; cause congenital anomalies or birth defects; or jeopardize the patient and may require medical or surgical intervention to prevent one of the outcomes in this definition.
 *
 * https://schema.org/seriousAdverseOutcome
 */
export declare const seriousAdverseOutcome: Property;
/**
 * serverStatus
 *
 * Status of a game server.
 *
 * https://schema.org/serverStatus
 */
export declare const serverStatus: Property;
/**
 * servesCuisine
 *
 * The cuisine of the restaurant.
 *
 * https://schema.org/servesCuisine
 */
export declare const servesCuisine: Property;
/**
 * serviceAudience
 *
 * The audience eligible for this service.
 *
 * https://schema.org/serviceAudience
 */
export declare const serviceAudience: Property;
/**
 * serviceLocation
 *
 * The location (e.g. civic structure, local business, etc.) where a person can go to access the service.
 *
 * https://schema.org/serviceLocation
 */
export declare const serviceLocation: Property;
/**
 * serviceOperator
 *
 * The operating organization, if different from the provider.  This enables the representation of services that are provided by an organization, but operated by another organization like a subcontractor.
 *
 * https://schema.org/serviceOperator
 */
export declare const serviceOperator: Property;
/**
 * servicePhone
 *
 * The phone number to use to access the service.
 *
 * https://schema.org/servicePhone
 */
export declare const servicePhone: Property;
/**
 * servicePostalAddress
 *
 * The address for accessing the service by mail.
 *
 * https://schema.org/servicePostalAddress
 */
export declare const servicePostalAddress: Property;
/**
 * serviceSmsNumber
 *
 * The number to access the service by text message.
 *
 * https://schema.org/serviceSmsNumber
 */
export declare const serviceSmsNumber: Property;
/**
 * serviceType
 *
 * The type of service being offered, e.g. veterans' benefits, emergency relief, etc.
 *
 * https://schema.org/serviceType
 */
export declare const serviceType: Property;
/**
 * serviceUrl
 *
 * The website to access the service.
 *
 * https://schema.org/serviceUrl
 */
export declare const serviceUrl: Property;
/**
 * servingSize
 *
 * The serving size, in terms of the number of volume or mass.
 *
 * https://schema.org/servingSize
 */
export declare const servingSize: Property;
/**
 * sha256
 *
 * The [SHA-2](https://en.wikipedia.org/wiki/SHA-2) SHA256 hash of the content of the item. For example, a zero-length input has value 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'
 *
 * https://schema.org/sha256
 */
export declare const sha256: Property;
/**
 * sharedContent
 *
 * A CreativeWork such as an image, video, or audio clip shared as part of this posting.
 *
 * https://schema.org/sharedContent
 */
export declare const sharedContent: Property;
/**
 * shippingDestination
 *
 * indicates (possibly multiple) shipping destinations. These can be defined in several ways, e.g. postalCode ranges.
 *
 * https://schema.org/shippingDestination
 */
export declare const shippingDestination: Property;
/**
 * shippingDetails
 *
 * Indicates information about the shipping policies and options associated with an [[Offer]].
 *
 * https://schema.org/shippingDetails
 */
export declare const shippingDetails: Property;
/**
 * shippingLabel
 *
 * Label to match an [[OfferShippingDetails]] with a [[ShippingRateSettings]] (within the context of a [[shippingSettingsLink]] cross-reference).
 *
 * https://schema.org/shippingLabel
 */
export declare const shippingLabel: Property;
/**
 * shippingOrigin
 *
 * Indicates the origin of a shipment, i.e. where it should be coming from.
 *
 * https://schema.org/shippingOrigin
 */
export declare const shippingOrigin: Property;
/**
 * shippingRate
 *
 * The shipping rate is the cost of shipping to the specified destination. Typically, the maxValue and currency values (of the [[MonetaryAmount]]) are most appropriate.
 *
 * https://schema.org/shippingRate
 */
export declare const shippingRate: Property;
/**
 * shippingSettingsLink
 *
 * Link to a page containing [[ShippingRateSettings]] and [[DeliveryTimeSettings]] details.
 *
 * https://schema.org/shippingSettingsLink
 */
export declare const shippingSettingsLink: Property;
/**
 * siblings
 *
 * A sibling of the person.
 *
 * https://schema.org/siblings
 */
export declare const siblings: Property;
/**
 * signDetected
 *
 * A sign detected by the test.
 *
 * https://schema.org/signDetected
 */
export declare const signDetected: Property;
/**
 * signOrSymptom
 *
 * A sign or symptom of this condition. Signs are objective or physically observable manifestations of the medical condition while symptoms are the subjective experience of the medical condition.
 *
 * https://schema.org/signOrSymptom
 */
export declare const signOrSymptom: Property;
/**
 * significance
 *
 * The significance associated with the superficial anatomy; as an example, how characteristics of the superficial anatomy can suggest underlying medical conditions or courses of treatment.
 *
 * https://schema.org/significance
 */
export declare const significance: Property;
/**
 * significantLinks
 *
 * The most significant URLs on the page. Typically, these are the non-navigation links that are clicked on the most.
 *
 * https://schema.org/significantLinks
 */
export declare const significantLinks: Property;
/**
 * size
 *
 * A standardized size of a product or creative work, specified either through a simple textual string (for example 'XL', '32Wx34L'), a  QuantitativeValue with a unitCode, or a comprehensive and structured [[SizeSpecification]]; in other cases, the [[width]], [[height]], [[depth]] and [[weight]] properties may be more applicable.
 *
 * https://schema.org/size
 */
export declare const size: Property;
/**
 * sizeGroup
 *
 * The size group (also known as "size type") for a product's size. Size groups are common in the fashion industry to define size segments and suggested audiences for wearable products. Multiple values can be combined, for example "men's big and tall", "petite maternity" or "regular"
 *
 * https://schema.org/sizeGroup
 */
export declare const sizeGroup: Property;
/**
 * sizeSystem
 *
 * The size system used to identify a product's size. Typically either a standard (for example, "GS1" or "ISO-EN13402"), country code (for example "US" or "JP"), or a measuring system (for example "Metric" or "Imperial").
 *
 * https://schema.org/sizeSystem
 */
export declare const sizeSystem: Property;
/**
 * skills
 *
 * A statement of knowledge, skill, ability, task or any other assertion expressing a competency that is desired or required to fulfill this role or to work in this occupation.
 *
 * https://schema.org/skills
 */
export declare const skills: Property;
/**
 * sku
 *
 * The Stock Keeping Unit (SKU), i.e. a merchant-specific identifier for a product or service, or the product to which the offer refers.
 *
 * https://schema.org/sku
 */
export declare const sku: Property;
/**
 * slogan
 *
 * A slogan or motto associated with the item.
 *
 * https://schema.org/slogan
 */
export declare const slogan: Property;
/**
 * smiles
 *
 * A specification in form of a line notation for describing the structure of chemical species using short ASCII strings.  Double bond stereochemistry \ indicators may need to be escaped in the string in formats where the backslash is an escape character.
 *
 * https://schema.org/smiles
 */
export declare const smiles: Property;
/**
 * smokingAllowed
 *
 * Indicates whether it is allowed to smoke in the place, e.g. in the restaurant, hotel or hotel room.
 *
 * https://schema.org/smokingAllowed
 */
export declare const smokingAllowed: Property;
/**
 * sodiumContent
 *
 * The number of milligrams of sodium.
 *
 * https://schema.org/sodiumContent
 */
export declare const sodiumContent: Property;
/**
 * softwareAddOn
 *
 * Additional content for a software application.
 *
 * https://schema.org/softwareAddOn
 */
export declare const softwareAddOn: Property;
/**
 * softwareHelp
 *
 * Software application help.
 *
 * https://schema.org/softwareHelp
 */
export declare const softwareHelp: Property;
/**
 * softwareVersion
 *
 * Version of the software instance.
 *
 * https://schema.org/softwareVersion
 */
export declare const softwareVersion: Property;
/**
 * sourceOrganization
 *
 * The Organization on whose behalf the creator was working.
 *
 * https://schema.org/sourceOrganization
 */
export declare const sourceOrganization: Property;
/**
 * sourcedFrom
 *
 * The neurological pathway that originates the neurons.
 *
 * https://schema.org/sourcedFrom
 */
export declare const sourcedFrom: Property;
/**
 * spatial
 *
 * The "spatial" property can be used in cases when more specific properties
 * (e.g. [[locationCreated]], [[spatialCoverage]], [[contentLocation]]) are not known to be appropriate.
 *
 * https://schema.org/spatial
 */
export declare const spatial: Property;
/**
 * speakable
 *
 * Indicates sections of a Web page that are particularly 'speakable' in the sense of being highlighted as being especially appropriate for text-to-speech conversion. Other sections of a page may also be usefully spoken in particular circumstances; the 'speakable' property serves to indicate the parts most likely to be generally useful for speech.
 *
 * The *speakable* property can be repeated an arbitrary number of times, with three kinds of possible 'content-locator' values:
 *
 * 1.) *id-value* URL references - uses *id-value* of an element in the page being annotated. The simplest use of *speakable* has (potentially relative) URL values, referencing identified sections of the document concerned.
 *
 * 2.) CSS Selectors - addresses content in the annotated page, e.g. via class attribute. Use the [[cssSelector]] property.
 *
 * 3.)  XPaths - addresses content via XPaths (assuming an XML view of the content). Use the [[xpath]] property.
 *
 *
 * For more sophisticated markup of speakable sections beyond simple ID references, either CSS selectors or XPath expressions to pick out document section(s) as speakable. For this
 * we define a supporting type, [[SpeakableSpecification]]  which is defined to be a possible value of the *speakable* property.
 *
 *
 * https://schema.org/speakable
 */
export declare const speakable: Property;
/**
 * specialCommitments
 *
 * Any special commitments associated with this job posting. Valid entries include VeteranCommit, MilitarySpouseCommit, etc.
 *
 * https://schema.org/specialCommitments
 */
export declare const specialCommitments: Property;
/**
 * specialOpeningHoursSpecification
 *
 * The special opening hours of a certain place.\n\nUse this to explicitly override general opening hours brought in scope by [[openingHoursSpecification]] or [[openingHours]].
 *
 *
 * https://schema.org/specialOpeningHoursSpecification
 */
export declare const specialOpeningHoursSpecification: Property;
/**
 * specialty
 *
 * One of the domain specialities to which this web page's content applies.
 *
 * https://schema.org/specialty
 */
export declare const specialty: Property;
/**
 * speechToTextMarkup
 *
 * Form of markup used. eg. [SSML](https://www.w3.org/TR/speech-synthesis11) or [IPA](https://www.wikidata.org/wiki/Property:P898).
 *
 * https://schema.org/speechToTextMarkup
 */
export declare const speechToTextMarkup: Property;
/**
 * speed
 *
 * The speed range of the vehicle. If the vehicle is powered by an engine, the upper limit of the speed range (indicated by [[maxValue]]) should be the maximum speed achievable under regular conditions.\n\nTypical unit code(s): KMH for km/h, HM for mile per hour (0.447 04 m/s), KNT for knot\n\n*Note 1: Use [[minValue]] and [[maxValue]] to indicate the range. Typically, the minimal value is zero.\n* Note 2: There are many different ways of measuring the speed range. You can link to information about how the given value has been determined using the [[valueReference]] property.
 *
 * https://schema.org/speed
 */
export declare const speed: Property;
/**
 * spokenByCharacter
 *
 * The (e.g. fictional) character, Person or Organization to whom the quotation is attributed within the containing CreativeWork.
 *
 * https://schema.org/spokenByCharacter
 */
export declare const spokenByCharacter: Property;
/**
 * sport
 *
 * A type of sport (e.g. Baseball).
 *
 * https://schema.org/sport
 */
export declare const sport: Property;
/**
 * sportsActivityLocation
 *
 * A sub property of location. The sports activity location where this action occurred.
 *
 * https://schema.org/sportsActivityLocation
 */
export declare const sportsActivityLocation: Property;
/**
 * sportsEvent
 *
 * A sub property of location. The sports event where this action occurred.
 *
 * https://schema.org/sportsEvent
 */
export declare const sportsEvent: Property;
/**
 * sportsTeam
 *
 * A sub property of participant. The sports team that participated on this action.
 *
 * https://schema.org/sportsTeam
 */
export declare const sportsTeam: Property;
/**
 * spouse
 *
 * The person's spouse.
 *
 * https://schema.org/spouse
 */
export declare const spouse: Property;
/**
 * stage
 *
 * The stage of the condition, if applicable.
 *
 * https://schema.org/stage
 */
export declare const stage: Property;
/**
 * stageAsNumber
 *
 * The stage represented as a number, e.g. 3.
 *
 * https://schema.org/stageAsNumber
 */
export declare const stageAsNumber: Property;
/**
 * starRating
 *
 * An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
 *
 * https://schema.org/starRating
 */
export declare const starRating: Property;
/**
 * startDate
 *
 * The start date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
 *
 * https://schema.org/startDate
 */
export declare const startDate: Property;
/**
 * startOffset
 *
 * The start time of the clip expressed as the number of seconds from the beginning of the work.
 *
 * https://schema.org/startOffset
 */
export declare const startOffset: Property;
/**
 * startTime
 *
 * The startTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to start. For actions that span a period of time, when the action was performed. E.g. John wrote a book from *January* to December. For media, including audio and video, it's the time offset of the start of a clip within a larger file.\n\nNote that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
 *
 * https://schema.org/startTime
 */
export declare const startTime: Property;
/**
 * statType
 *
 * Indicates the kind of statistic represented by a [[StatisticalVariable]], e.g. mean, count etc. The value of statType is a property, either from within Schema.org (e.g. [[count]], [[median]], [[marginOfError]], [[maxValue]], [[minValue]]) or from other compatible (e.g. RDF) systems such as DataCommons.org or Wikidata.org.
 *
 * https://schema.org/statType
 */
export declare const statType: Property;
/**
 * status
 *
 * The status of the study (enumerated).
 *
 * https://schema.org/status
 */
export declare const status: Property;
/**
 * steeringPosition
 *
 * The position of the steering wheel or similar device (mostly for cars).
 *
 * https://schema.org/steeringPosition
 */
export declare const steeringPosition: Property;
/**
 * stepValue
 *
 * The stepValue attribute indicates the granularity that is expected (and required) of the value in a PropertyValueSpecification.
 *
 * https://schema.org/stepValue
 */
export declare const stepValue: Property;
/**
 * steps
 *
 * A single step item (as HowToStep, text, document, video, etc.) or a HowToSection (originally misnamed 'steps'; 'step' is preferred).
 *
 * https://schema.org/steps
 */
export declare const steps: Property;
/**
 * storageRequirements
 *
 * Storage requirements (free space required).
 *
 * https://schema.org/storageRequirements
 */
export declare const storageRequirements: Property;
/**
 * streetAddress
 *
 * The street address. For example, 1600 Amphitheatre Pkwy.
 *
 * https://schema.org/streetAddress
 */
export declare const streetAddress: Property;
/**
 * strengthUnit
 *
 * The units of an active ingredient's strength, e.g. mg.
 *
 * https://schema.org/strengthUnit
 */
export declare const strengthUnit: Property;
/**
 * strengthValue
 *
 * The value of an active ingredient's strength, e.g. 325.
 *
 * https://schema.org/strengthValue
 */
export declare const strengthValue: Property;
/**
 * structuralClass
 *
 * The name given to how bone physically connects to each other.
 *
 * https://schema.org/structuralClass
 */
export declare const structuralClass: Property;
/**
 * study
 *
 * A medical study or trial related to this entity.
 *
 * https://schema.org/study
 */
export declare const study: Property;
/**
 * studyDesign
 *
 * Specifics about the observational study design (enumerated).
 *
 * https://schema.org/studyDesign
 */
export declare const studyDesign: Property;
/**
 * studyLocation
 *
 * The location in which the study is taking/took place.
 *
 * https://schema.org/studyLocation
 */
export declare const studyLocation: Property;
/**
 * studySubject
 *
 * A subject of the study, i.e. one of the medical conditions, therapies, devices, drugs, etc. investigated by the study.
 *
 * https://schema.org/studySubject
 */
export declare const studySubject: Property;
/**
 * stupidProperty
 *
 * This is a StupidProperty! - for testing only
 *
 * https://schema.org/stupidProperty
 */
export declare const stupidProperty: Property;
/**
 * subEvents
 *
 * Events that are a part of this event. For example, a conference event includes many presentations, each subEvents of the conference.
 *
 * https://schema.org/subEvents
 */
export declare const subEvents: Property;
/**
 * subReservation
 *
 * The individual reservations included in the package. Typically a repeated property.
 *
 * https://schema.org/subReservation
 */
export declare const subReservation: Property;
/**
 * subStageSuffix
 *
 * The substage, e.g. 'a' for Stage IIIa.
 *
 * https://schema.org/subStageSuffix
 */
export declare const subStageSuffix: Property;
/**
 * subStructure
 *
 * Component (sub-)structure(s) that comprise this anatomical structure.
 *
 * https://schema.org/subStructure
 */
export declare const subStructure: Property;
/**
 * subTest
 *
 * A component test of the panel.
 *
 * https://schema.org/subTest
 */
export declare const subTest: Property;
/**
 * subtitleLanguage
 *
 * Languages in which subtitles/captions are available, in [IETF BCP 47 standard format](http://tools.ietf.org/html/bcp47).
 *
 * https://schema.org/subtitleLanguage
 */
export declare const subtitleLanguage: Property;
/**
 * successorOf
 *
 * A pointer from a newer variant of a product  to its previous, often discontinued predecessor.
 *
 * https://schema.org/successorOf
 */
export declare const successorOf: Property;
/**
 * sugarContent
 *
 * The number of grams of sugar.
 *
 * https://schema.org/sugarContent
 */
export declare const sugarContent: Property;
/**
 * suggestedAge
 *
 * The age or age range for the intended audience or person, for example 3-12 months for infants, 1-5 years for toddlers.
 *
 * https://schema.org/suggestedAge
 */
export declare const suggestedAge: Property;
/**
 * suggestedGender
 *
 * The suggested gender of the intended person or audience, for example "male", "female", or "unisex".
 *
 * https://schema.org/suggestedGender
 */
export declare const suggestedGender: Property;
/**
 * suggestedMaxAge
 *
 * Maximum recommended age in years for the audience or user.
 *
 * https://schema.org/suggestedMaxAge
 */
export declare const suggestedMaxAge: Property;
/**
 * suggestedMeasurement
 *
 * A suggested range of body measurements for the intended audience or person, for example inseam between 32 and 34 inches or height between 170 and 190 cm. Typically found on a size chart for wearable products.
 *
 * https://schema.org/suggestedMeasurement
 */
export declare const suggestedMeasurement: Property;
/**
 * suggestedMinAge
 *
 * Minimum recommended age in years for the audience or user.
 *
 * https://schema.org/suggestedMinAge
 */
export declare const suggestedMinAge: Property;
/**
 * suitableForDiet
 *
 * Indicates a dietary restriction or guideline for which this recipe or menu item is suitable, e.g. diabetic, halal etc.
 *
 * https://schema.org/suitableForDiet
 */
export declare const suitableForDiet: Property;
/**
 * supersededBy
 *
 * Relates a term (i.e. a property, class or enumeration) to one that supersedes it.
 *
 * https://schema.org/supersededBy
 */
export declare const supersededBy: Property;
/**
 * supplyTo
 *
 * The area to which the artery supplies blood.
 *
 * https://schema.org/supplyTo
 */
export declare const supplyTo: Property;
/**
 * supportingData
 *
 * Supporting data for a SoftwareApplication.
 *
 * https://schema.org/supportingData
 */
export declare const supportingData: Property;
/**
 * surface
 *
 * A material used as a surface in some artwork, e.g. Canvas, Paper, Wood, Board, etc.
 *
 * https://schema.org/surface
 */
export declare const surface: Property;
/**
 * syllabusSections
 *
 * Indicates (typically several) Syllabus entities that lay out what each section of the overall course will cover.
 *
 * https://schema.org/syllabusSections
 */
export declare const syllabusSections: Property;
/**
 * target
 *
 * Indicates a target EntryPoint, or url, for an Action.
 *
 * https://schema.org/target
 */
export declare const target: Property;
/**
 * targetDescription
 *
 * The description of a node in an established educational framework.
 *
 * https://schema.org/targetDescription
 */
export declare const targetDescription: Property;
/**
 * targetName
 *
 * The name of a node in an established educational framework.
 *
 * https://schema.org/targetName
 */
export declare const targetName: Property;
/**
 * targetPlatform
 *
 * Type of app development: phone, Metro style, desktop, XBox, etc.
 *
 * https://schema.org/targetPlatform
 */
export declare const targetPlatform: Property;
/**
 * targetPopulation
 *
 * Characteristics of the population for which this is intended, or which typically uses it, e.g. 'adults'.
 *
 * https://schema.org/targetPopulation
 */
export declare const targetPopulation: Property;
/**
 * targetProduct
 *
 * Target Operating System / Product to which the code applies.  If applies to several versions, just the product name can be used.
 *
 * https://schema.org/targetProduct
 */
export declare const targetProduct: Property;
/**
 * targetUrl
 *
 * The URL of a node in an established educational framework.
 *
 * https://schema.org/targetUrl
 */
export declare const targetUrl: Property;
/**
 * taxID
 *
 * The Tax / Fiscal ID of the organization or person, e.g. the TIN in the US or the CIF/NIF in Spain.
 *
 * https://schema.org/taxID
 */
export declare const taxID: Property;
/**
 * taxonRank
 *
 * The taxonomic rank of this taxon given preferably as a URI from a controlled vocabulary – typically the ranks from TDWG TaxonRank ontology or equivalent Wikidata URIs.
 *
 * https://schema.org/taxonRank
 */
export declare const taxonRank: Property;
/**
 * taxonomicRange
 *
 * The taxonomic grouping of the organism that expresses, encodes, or in some way related to the BioChemEntity.
 *
 * https://schema.org/taxonomicRange
 */
export declare const taxonomicRange: Property;
/**
 * teaches
 *
 * The item being described is intended to help a person learn the competency or learning outcome defined by the referenced term.
 *
 * https://schema.org/teaches
 */
export declare const teaches: Property;
/**
 * telephone
 *
 * The telephone number.
 *
 * https://schema.org/telephone
 */
export declare const telephone: Property;
/**
 * temporal
 *
 * The "temporal" property can be used in cases where more specific properties
 * (e.g. [[temporalCoverage]], [[dateCreated]], [[dateModified]], [[datePublished]]) are not known to be appropriate.
 *
 * https://schema.org/temporal
 */
export declare const temporal: Property;
/**
 * termDuration
 *
 * The amount of time in a term as defined by the institution. A term is a length of time where students take one or more classes. Semesters and quarters are common units for term.
 *
 * https://schema.org/termDuration
 */
export declare const termDuration: Property;
/**
 * termsOfService
 *
 * Human-readable terms of service documentation.
 *
 * https://schema.org/termsOfService
 */
export declare const termsOfService: Property;
/**
 * termsPerYear
 *
 * The number of times terms of study are offered per year. Semesters and quarters are common units for term. For example, if the student can only take 2 semesters for the program in one year, then termsPerYear should be 2.
 *
 * https://schema.org/termsPerYear
 */
export declare const termsPerYear: Property;
/**
 * text
 *
 * The textual content of this CreativeWork.
 *
 * https://schema.org/text
 */
export declare const text: Property;
/**
 * textValue
 *
 * Text value being annotated.
 *
 * https://schema.org/textValue
 */
export declare const textValue: Property;
/**
 * thumbnail
 *
 * Thumbnail image for an image or video.
 *
 * https://schema.org/thumbnail
 */
export declare const thumbnail: Property;
/**
 * thumbnailUrl
 *
 * A thumbnail image relevant to the Thing.
 *
 * https://schema.org/thumbnailUrl
 */
export declare const thumbnailUrl: Property;
/**
 * tickerSymbol
 *
 * The exchange traded instrument associated with a Corporation object. The tickerSymbol is expressed as an exchange and an instrument name separated by a space character. For the exchange component of the tickerSymbol attribute, we recommend using the controlled vocabulary of Market Identifier Codes (MIC) specified in ISO 15022.
 *
 * https://schema.org/tickerSymbol
 */
export declare const tickerSymbol: Property;
/**
 * ticketNumber
 *
 * The unique identifier for the ticket.
 *
 * https://schema.org/ticketNumber
 */
export declare const ticketNumber: Property;
/**
 * ticketToken
 *
 * Reference to an asset (e.g., Barcode, QR code image or PDF) usable for entrance.
 *
 * https://schema.org/ticketToken
 */
export declare const ticketToken: Property;
/**
 * ticketedSeat
 *
 * The seat associated with the ticket.
 *
 * https://schema.org/ticketedSeat
 */
export declare const ticketedSeat: Property;
/**
 * timeOfDay
 *
 * The time of day the program normally runs. For example, "evenings".
 *
 * https://schema.org/timeOfDay
 */
export declare const timeOfDay: Property;
/**
 * timeRequired
 *
 * Approximate or typical time it usually takes to work with or through the content of this work for the typical or target audience.
 *
 * https://schema.org/timeRequired
 */
export declare const timeRequired: Property;
/**
 * timeToComplete
 *
 * The expected length of time to complete the program if attending full-time.
 *
 * https://schema.org/timeToComplete
 */
export declare const timeToComplete: Property;
/**
 * tissueSample
 *
 * The type of tissue sample required for the test.
 *
 * https://schema.org/tissueSample
 */
export declare const tissueSample: Property;
/**
 * title
 *
 * The title of the job.
 *
 * https://schema.org/title
 */
export declare const title: Property;
/**
 * titleEIDR
 *
 * An [EIDR](https://eidr.org/) (Entertainment Identifier Registry) [[identifier]] representing at the most general/abstract level, a work of film or television.
 *
 * For example, the motion picture known as "Ghostbusters" has a titleEIDR of  "10.5240/7EC7-228A-510A-053E-CBB8-J". This title (or work) may have several variants, which EIDR calls "edits". See [[editEIDR]].
 *
 * Since schema.org types like [[Movie]], [[TVEpisode]], [[TVSeason]], and [[TVSeries]] can be used for both works and their multiple expressions, it is possible to use [[titleEIDR]] alone (for a general description), or alongside [[editEIDR]] for a more edit-specific description.
 *
 *
 * https://schema.org/titleEIDR
 */
export declare const titleEIDR: Property;
/**
 * toLocation
 *
 * A sub property of location. The final location of the object or the agent after the action.
 *
 * https://schema.org/toLocation
 */
export declare const toLocation: Property;
/**
 * toRecipient
 *
 * A sub property of recipient. The recipient who was directly sent the message.
 *
 * https://schema.org/toRecipient
 */
export declare const toRecipient: Property;
/**
 * tocContinuation
 *
 * A [[HyperTocEntry]] can have a [[tocContinuation]] indicated, which is another [[HyperTocEntry]] that would be the default next item to play or render.
 *
 * https://schema.org/tocContinuation
 */
export declare const tocContinuation: Property;
/**
 * tocEntry
 *
 * Indicates a [[HyperTocEntry]] in a [[HyperToc]].
 *
 * https://schema.org/tocEntry
 */
export declare const tocEntry: Property;
/**
 * tongueWeight
 *
 * The permitted vertical load (TWR) of a trailer attached to the vehicle. Also referred to as Tongue Load Rating (TLR) or Vertical Load Rating (VLR).\n\nTypical unit code(s): KGM for kilogram, LBR for pound\n\n* Note 1: You can indicate additional information in the [[name]] of the [[QuantitativeValue]] node.\n* Note 2: You may also link to a [[QualitativeValue]] node that provides additional information using [[valueReference]].\n* Note 3: Note that you can use [[minValue]] and [[maxValue]] to indicate ranges.
 *
 * https://schema.org/tongueWeight
 */
export declare const tongueWeight: Property;
/**
 * tool
 *
 * A sub property of instrument. An object used (but not consumed) when performing instructions or a direction.
 *
 * https://schema.org/tool
 */
export declare const tool: Property;
/**
 * torque
 *
 * The torque (turning force) of the vehicle's engine.\n\nTypical unit code(s): NU for newton metre (N m), F17 for pound-force per foot, or F48 for pound-force per inch\n\n* Note 1: You can link to information about how the given value has been determined (e.g. reference RPM) using the [[valueReference]] property.\n* Note 2: You can use [[minValue]] and [[maxValue]] to indicate ranges.
 *
 * https://schema.org/torque
 */
export declare const torque: Property;
/**
 * totalHistoricalEnrollment
 *
 * The total number of students that have enrolled in the history of the course.
 *
 * https://schema.org/totalHistoricalEnrollment
 */
export declare const totalHistoricalEnrollment: Property;
/**
 * totalJobOpenings
 *
 * The number of positions open for this job posting. Use a positive integer. Do not use if the number of positions is unclear or not known.
 *
 * https://schema.org/totalJobOpenings
 */
export declare const totalJobOpenings: Property;
/**
 * totalPaymentDue
 *
 * The total amount due.
 *
 * https://schema.org/totalPaymentDue
 */
export declare const totalPaymentDue: Property;
/**
 * totalPrice
 *
 * The total price for the reservation or ticket, including applicable taxes, shipping, etc.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
 *
 * https://schema.org/totalPrice
 */
export declare const totalPrice: Property;
/**
 * totalTime
 *
 * The total time required to perform instructions or a direction (including time to prepare the supplies), in [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601).
 *
 * https://schema.org/totalTime
 */
export declare const totalTime: Property;
/**
 * tourBookingPage
 *
 * A page providing information on how to book a tour of some [[Place]], such as an [[Accommodation]] or [[ApartmentComplex]] in a real estate setting, as well as other kinds of tours as appropriate.
 *
 * https://schema.org/tourBookingPage
 */
export declare const tourBookingPage: Property;
/**
 * touristType
 *
 * Attraction suitable for type(s) of tourist. E.g. children, visitors from a particular country, etc.
 *
 * https://schema.org/touristType
 */
export declare const touristType: Property;
/**
 * trackingNumber
 *
 * Shipper tracking number.
 *
 * https://schema.org/trackingNumber
 */
export declare const trackingNumber: Property;
/**
 * trackingUrl
 *
 * Tracking url for the parcel delivery.
 *
 * https://schema.org/trackingUrl
 */
export declare const trackingUrl: Property;
/**
 * tracks
 *
 * A music recording (track)&#x2014;usually a single song.
 *
 * https://schema.org/tracks
 */
export declare const tracks: Property;
/**
 * trailer
 *
 * The trailer of a movie or TV/radio series, season, episode, etc.
 *
 * https://schema.org/trailer
 */
export declare const trailer: Property;
/**
 * trailerWeight
 *
 * The permitted weight of a trailer attached to the vehicle.\n\nTypical unit code(s): KGM for kilogram, LBR for pound\n* Note 1: You can indicate additional information in the [[name]] of the [[QuantitativeValue]] node.\n* Note 2: You may also link to a [[QualitativeValue]] node that provides additional information using [[valueReference]].\n* Note 3: Note that you can use [[minValue]] and [[maxValue]] to indicate ranges.
 *
 * https://schema.org/trailerWeight
 */
export declare const trailerWeight: Property;
/**
 * trainName
 *
 * The name of the train (e.g. The Orient Express).
 *
 * https://schema.org/trainName
 */
export declare const trainName: Property;
/**
 * trainNumber
 *
 * The unique identifier for the train.
 *
 * https://schema.org/trainNumber
 */
export declare const trainNumber: Property;
/**
 * trainingSalary
 *
 * The estimated salary earned while in the program.
 *
 * https://schema.org/trainingSalary
 */
export declare const trainingSalary: Property;
/**
 * transFatContent
 *
 * The number of grams of trans fat.
 *
 * https://schema.org/transFatContent
 */
export declare const transFatContent: Property;
/**
 * transcript
 *
 * If this MediaObject is an AudioObject or VideoObject, the transcript of that object.
 *
 * https://schema.org/transcript
 */
export declare const transcript: Property;
/**
 * transitTime
 *
 * The typical delay the order has been sent for delivery and the goods reach the final customer. Typical properties: minValue, maxValue, unitCode (d for DAY).
 *
 * https://schema.org/transitTime
 */
export declare const transitTime: Property;
/**
 * transitTimeLabel
 *
 * Label to match an [[OfferShippingDetails]] with a [[DeliveryTimeSettings]] (within the context of a [[shippingSettingsLink]] cross-reference).
 *
 * https://schema.org/transitTimeLabel
 */
export declare const transitTimeLabel: Property;
/**
 * translator
 *
 * Organization or person who adapts a creative work to different languages, regional differences and technical requirements of a target market, or that translates during some event.
 *
 * https://schema.org/translator
 */
export declare const translator: Property;
/**
 * transmissionMethod
 *
 * How the disease spreads, either as a route or vector, for example 'direct contact', 'Aedes aegypti', etc.
 *
 * https://schema.org/transmissionMethod
 */
export declare const transmissionMethod: Property;
/**
 * travelBans
 *
 * Information about travel bans, e.g. in the context of a pandemic.
 *
 * https://schema.org/travelBans
 */
export declare const travelBans: Property;
/**
 * trialDesign
 *
 * Specifics about the trial design (enumerated).
 *
 * https://schema.org/trialDesign
 */
export declare const trialDesign: Property;
/**
 * tributary
 *
 * The anatomical or organ system that the vein flows into; a larger structure that the vein connects to.
 *
 * https://schema.org/tributary
 */
export declare const tributary: Property;
/**
 * tripOrigin
 *
 * The location of origin of the trip, prior to any destination(s).
 *
 * https://schema.org/tripOrigin
 */
export declare const tripOrigin: Property;
/**
 * typeOfBed
 *
 * The type of bed to which the BedDetail refers, i.e. the type of bed available in the quantity indicated by quantity.
 *
 * https://schema.org/typeOfBed
 */
export declare const typeOfBed: Property;
/**
 * typeOfGood
 *
 * The product that this structured value is referring to.
 *
 * https://schema.org/typeOfGood
 */
export declare const typeOfGood: Property;
/**
 * typicalAgeRange
 *
 * The typical expected age range, e.g. '7-9', '11-'.
 *
 * https://schema.org/typicalAgeRange
 */
export declare const typicalAgeRange: Property;
/**
 * typicalCreditsPerTerm
 *
 * The number of credits or units a full-time student would be expected to take in 1 term however 'term' is defined by the institution.
 *
 * https://schema.org/typicalCreditsPerTerm
 */
export declare const typicalCreditsPerTerm: Property;
/**
 * typicalTest
 *
 * A medical test typically performed given this condition.
 *
 * https://schema.org/typicalTest
 */
export declare const typicalTest: Property;
/**
 * underName
 *
 * The person or organization the reservation or ticket is for.
 *
 * https://schema.org/underName
 */
export declare const underName: Property;
/**
 * unitCode
 *
 * The unit of measurement given using the UN/CEFACT Common Code (3 characters) or a URL. Other codes than the UN/CEFACT Common Code may be used with a prefix followed by a colon.
 *
 * https://schema.org/unitCode
 */
export declare const unitCode: Property;
/**
 * unitText
 *
 * A string or text indicating the unit of measurement. Useful if you cannot provide a standard unit code for
 * <a href='unitCode'>unitCode</a>.
 *
 * https://schema.org/unitText
 */
export declare const unitText: Property;
/**
 * unnamedSourcesPolicy
 *
 * For an [[Organization]] (typically a [[NewsMediaOrganization]]), a statement about policy on use of unnamed sources and the decision process required.
 *
 * https://schema.org/unnamedSourcesPolicy
 */
export declare const unnamedSourcesPolicy: Property;
/**
 * unsaturatedFatContent
 *
 * The number of grams of unsaturated fat.
 *
 * https://schema.org/unsaturatedFatContent
 */
export declare const unsaturatedFatContent: Property;
/**
 * uploadDate
 *
 * Date when this media object was uploaded to this site.
 *
 * https://schema.org/uploadDate
 */
export declare const uploadDate: Property;
/**
 * upvoteCount
 *
 * The number of upvotes this question, answer or comment has received from the community.
 *
 * https://schema.org/upvoteCount
 */
export declare const upvoteCount: Property;
/**
 * url
 *
 * URL of the item.
 *
 * https://schema.org/url
 */
export declare const url: Property;
/**
 * urlTemplate
 *
 * An url template (RFC6570) that will be used to construct the target of the execution of the action.
 *
 * https://schema.org/urlTemplate
 */
export declare const urlTemplate: Property;
/**
 * usedToDiagnose
 *
 * A condition the test is used to diagnose.
 *
 * https://schema.org/usedToDiagnose
 */
export declare const usedToDiagnose: Property;
/**
 * userInteractionCount
 *
 * The number of interactions for the CreativeWork using the WebSite or SoftwareApplication.
 *
 * https://schema.org/userInteractionCount
 */
export declare const userInteractionCount: Property;
/**
 * usesDevice
 *
 * Device used to perform the test.
 *
 * https://schema.org/usesDevice
 */
export declare const usesDevice: Property;
/**
 * usesHealthPlanIdStandard
 *
 * The standard for interpreting the Plan ID. The preferred is "HIOS". See the Centers for Medicare & Medicaid Services for more details.
 *
 * https://schema.org/usesHealthPlanIdStandard
 */
export declare const usesHealthPlanIdStandard: Property;
/**
 * utterances
 *
 * Text of an utterances (spoken words, lyrics etc.) that occurs at a certain section of a media object, represented as a [[HyperTocEntry]].
 *
 * https://schema.org/utterances
 */
export declare const utterances: Property;
/**
 * validFor
 *
 * The duration of validity of a permit or similar thing.
 *
 * https://schema.org/validFor
 */
export declare const validFor: Property;
/**
 * validFrom
 *
 * The date when the item becomes valid.
 *
 * https://schema.org/validFrom
 */
export declare const validFrom: Property;
/**
 * validIn
 *
 * The geographic area where a permit or similar thing is valid.
 *
 * https://schema.org/validIn
 */
export declare const validIn: Property;
/**
 * validThrough
 *
 * The date after when the item is not valid. For example the end of an offer, salary period, or a period of opening hours.
 *
 * https://schema.org/validThrough
 */
export declare const validThrough: Property;
/**
 * validUntil
 *
 * The date when the item is no longer valid.
 *
 * https://schema.org/validUntil
 */
export declare const validUntil: Property;
/**
 * value
 *
 * The value of a [[QuantitativeValue]] (including [[Observation]]) or property value node.\n\n* For [[QuantitativeValue]] and [[MonetaryAmount]], the recommended type for values is 'Number'.\n* For [[PropertyValue]], it can be 'Text', 'Number', 'Boolean', or 'StructuredValue'.\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
 *
 * https://schema.org/value
 */
export declare const value: Property;
/**
 * valueAddedTaxIncluded
 *
 * Specifies whether the applicable value-added tax (VAT) is included in the price specification or not.
 *
 * https://schema.org/valueAddedTaxIncluded
 */
export declare const valueAddedTaxIncluded: Property;
/**
 * valueMaxLength
 *
 * Specifies the allowed range for number of characters in a literal value.
 *
 * https://schema.org/valueMaxLength
 */
export declare const valueMaxLength: Property;
/**
 * valueMinLength
 *
 * Specifies the minimum allowed range for number of characters in a literal value.
 *
 * https://schema.org/valueMinLength
 */
export declare const valueMinLength: Property;
/**
 * valueName
 *
 * Indicates the name of the PropertyValueSpecification to be used in URL templates and form encoding in a manner analogous to HTML's input@name.
 *
 * https://schema.org/valueName
 */
export declare const valueName: Property;
/**
 * valuePattern
 *
 * Specifies a regular expression for testing literal values according to the HTML spec.
 *
 * https://schema.org/valuePattern
 */
export declare const valuePattern: Property;
/**
 * valueReference
 *
 * A secondary value that provides additional information on the original value, e.g. a reference temperature or a type of measurement.
 *
 * https://schema.org/valueReference
 */
export declare const valueReference: Property;
/**
 * valueRequired
 *
 * Whether the property must be filled in to complete the action.  Default is false.
 *
 * https://schema.org/valueRequired
 */
export declare const valueRequired: Property;
/**
 * variableMeasured
 *
 * The variableMeasured property can indicate (repeated as necessary) the  variables that are measured in some dataset, either described as text or as pairs of identifier and description using PropertyValue, or more explicitly as a [[StatisticalVariable]].
 *
 * https://schema.org/variableMeasured
 */
export declare const variableMeasured: Property;
/**
 * variablesMeasured
 *
 * Originally named [[variablesMeasured]], the [[variableMeasured]] property can indicate (repeated as necessary) the  variables that are measured in some dataset, either described as text or as pairs of identifier and description using PropertyValue.
 *
 * https://schema.org/variablesMeasured
 */
export declare const variablesMeasured: Property;
/**
 * variantCover
 *
 * A description of the variant cover
 *     	for the issue, if the issue is a variant printing. For example, "Bryan Hitch
 *     	Variant Cover" or "2nd Printing Variant".
 *
 * https://schema.org/variantCover
 */
export declare const variantCover: Property;
/**
 * variesBy
 *
 * Indicates the property or properties by which the variants in a [[ProductGroup]] vary, e.g. their size, color etc. Schema.org properties can be referenced by their short name e.g. "color"; terms defined elsewhere can be referenced with their URIs.
 *
 * https://schema.org/variesBy
 */
export declare const variesBy: Property;
/**
 * vatID
 *
 * The Value-added Tax ID of the organization or person.
 *
 * https://schema.org/vatID
 */
export declare const vatID: Property;
/**
 * vehicleConfiguration
 *
 * A short text indicating the configuration of the vehicle, e.g. '5dr hatchback ST 2.5 MT 225 hp' or 'limited edition'.
 *
 * https://schema.org/vehicleConfiguration
 */
export declare const vehicleConfiguration: Property;
/**
 * vehicleEngine
 *
 * Information about the engine or engines of the vehicle.
 *
 * https://schema.org/vehicleEngine
 */
export declare const vehicleEngine: Property;
/**
 * vehicleIdentificationNumber
 *
 * The Vehicle Identification Number (VIN) is a unique serial number used by the automotive industry to identify individual motor vehicles.
 *
 * https://schema.org/vehicleIdentificationNumber
 */
export declare const vehicleIdentificationNumber: Property;
/**
 * vehicleInteriorColor
 *
 * The color or color combination of the interior of the vehicle.
 *
 * https://schema.org/vehicleInteriorColor
 */
export declare const vehicleInteriorColor: Property;
/**
 * vehicleInteriorType
 *
 * The type or material of the interior of the vehicle (e.g. synthetic fabric, leather, wood, etc.). While most interior types are characterized by the material used, an interior type can also be based on vehicle usage or target audience.
 *
 * https://schema.org/vehicleInteriorType
 */
export declare const vehicleInteriorType: Property;
/**
 * vehicleModelDate
 *
 * The release date of a vehicle model (often used to differentiate versions of the same make and model).
 *
 * https://schema.org/vehicleModelDate
 */
export declare const vehicleModelDate: Property;
/**
 * vehicleSeatingCapacity
 *
 * The number of passengers that can be seated in the vehicle, both in terms of the physical space available, and in terms of limitations set by law.\n\nTypical unit code(s): C62 for persons.
 *
 * https://schema.org/vehicleSeatingCapacity
 */
export declare const vehicleSeatingCapacity: Property;
/**
 * vehicleSpecialUsage
 *
 * Indicates whether the vehicle has been used for special purposes, like commercial rental, driving school, or as a taxi. The legislation in many countries requires this information to be revealed when offering a car for sale.
 *
 * https://schema.org/vehicleSpecialUsage
 */
export declare const vehicleSpecialUsage: Property;
/**
 * vehicleTransmission
 *
 * The type of component used for transmitting the power from a rotating power source to the wheels or other relevant component(s) ("gearbox" for cars).
 *
 * https://schema.org/vehicleTransmission
 */
export declare const vehicleTransmission: Property;
/**
 * vendor
 *
 * 'vendor' is an earlier term for 'seller'.
 *
 * https://schema.org/vendor
 */
export declare const vendor: Property;
/**
 * verificationFactCheckingPolicy
 *
 * Disclosure about verification and fact-checking processes for a [[NewsMediaOrganization]] or other fact-checking [[Organization]].
 *
 * https://schema.org/verificationFactCheckingPolicy
 */
export declare const verificationFactCheckingPolicy: Property;
/**
 * version
 *
 * The version of the CreativeWork embodied by a specified resource.
 *
 * https://schema.org/version
 */
export declare const version: Property;
/**
 * video
 *
 * An embedded video object.
 *
 * https://schema.org/video
 */
export declare const video: Property;
/**
 * videoFormat
 *
 * The type of screening or video broadcast used (e.g. IMAX, 3D, SD, HD, etc.).
 *
 * https://schema.org/videoFormat
 */
export declare const videoFormat: Property;
/**
 * videoFrameSize
 *
 * The frame size of the video.
 *
 * https://schema.org/videoFrameSize
 */
export declare const videoFrameSize: Property;
/**
 * videoQuality
 *
 * The quality of the video.
 *
 * https://schema.org/videoQuality
 */
export declare const videoQuality: Property;
/**
 * volumeNumber
 *
 * Identifies the volume of publication or multi-part work; for example, "iii" or "2".
 *
 * https://schema.org/volumeNumber
 */
export declare const volumeNumber: Property;
/**
 * warning
 *
 * Any FDA or other warnings about the drug (text or URL).
 *
 * https://schema.org/warning
 */
export declare const warning: Property;
/**
 * warrantyPromise
 *
 * The warranty promise(s) included in the offer.
 *
 * https://schema.org/warrantyPromise
 */
export declare const warrantyPromise: Property;
/**
 * warrantyScope
 *
 * The scope of the warranty promise.
 *
 * https://schema.org/warrantyScope
 */
export declare const warrantyScope: Property;
/**
 * webCheckinTime
 *
 * The time when a passenger can check into the flight online.
 *
 * https://schema.org/webCheckinTime
 */
export declare const webCheckinTime: Property;
/**
 * webFeed
 *
 * The URL for a feed, e.g. associated with a podcast series, blog, or series of date-stamped updates. This is usually RSS or Atom.
 *
 * https://schema.org/webFeed
 */
export declare const webFeed: Property;
/**
 * weight
 *
 * The weight of the product or person.
 *
 * https://schema.org/weight
 */
export declare const weight: Property;
/**
 * weightTotal
 *
 * The permitted total weight of the loaded vehicle, including passengers and cargo and the weight of the empty vehicle.\n\nTypical unit code(s): KGM for kilogram, LBR for pound\n\n* Note 1: You can indicate additional information in the [[name]] of the [[QuantitativeValue]] node.\n* Note 2: You may also link to a [[QualitativeValue]] node that provides additional information using [[valueReference]].\n* Note 3: Note that you can use [[minValue]] and [[maxValue]] to indicate ranges.
 *
 * https://schema.org/weightTotal
 */
export declare const weightTotal: Property;
/**
 * wheelbase
 *
 * The distance between the centers of the front and rear wheels.\n\nTypical unit code(s): CMT for centimeters, MTR for meters, INH for inches, FOT for foot/feet
 *
 * https://schema.org/wheelbase
 */
export declare const wheelbase: Property;
/**
 * width
 *
 * The width of the item.
 *
 * https://schema.org/width
 */
export declare const width: Property;
/**
 * winner
 *
 * A sub property of participant. The winner of the action.
 *
 * https://schema.org/winner
 */
export declare const winner: Property;
/**
 * wordCount
 *
 * The number of words in the text of the Article.
 *
 * https://schema.org/wordCount
 */
export declare const wordCount: Property;
/**
 * workHours
 *
 * The typical working hours for this job (e.g. 1st shift, night shift, 8am-5pm).
 *
 * https://schema.org/workHours
 */
export declare const workHours: Property;
/**
 * workLocation
 *
 * A contact location for a person's place of work.
 *
 * https://schema.org/workLocation
 */
export declare const workLocation: Property;
/**
 * workPerformed
 *
 * A work performed in some event, for example a play performed in a TheaterEvent.
 *
 * https://schema.org/workPerformed
 */
export declare const workPerformed: Property;
/**
 * workPresented
 *
 * The movie presented during this event.
 *
 * https://schema.org/workPresented
 */
export declare const workPresented: Property;
/**
 * workload
 *
 * Quantitative measure of the physiologic output of the exercise; also referred to as energy expenditure.
 *
 * https://schema.org/workload
 */
export declare const workload: Property;
/**
 * worksFor
 *
 * Organizations that the person works for.
 *
 * https://schema.org/worksFor
 */
export declare const worksFor: Property;
/**
 * worstRating
 *
 * The lowest value allowed in this rating system. If worstRating is omitted, 1 is assumed.
 *
 * https://schema.org/worstRating
 */
export declare const worstRating: Property;
/**
 * xpath
 *
 * An XPath, e.g. of a [[SpeakableSpecification]] or [[WebPageElement]]. In the latter case, multiple matches within a page can constitute a single conceptual "Web page element".
 *
 * https://schema.org/xpath
 */
export declare const xpath: Property;
/**
 * yearBuilt
 *
 * The year an [[Accommodation]] was constructed. This corresponds to the [YearBuilt field in RESO](https://ddwiki.reso.org/display/DDW17/YearBuilt+Field).
 *
 * https://schema.org/yearBuilt
 */
export declare const yearBuilt: Property;
/**
 * yearlyRevenue
 *
 * The size of the business in annual revenue.
 *
 * https://schema.org/yearlyRevenue
 */
export declare const yearlyRevenue: Property;
/**
 * yearsInOperation
 *
 * The age of the business.
 *
 * https://schema.org/yearsInOperation
 */
export declare const yearsInOperation: Property;
/**
 * actionApplication
 *
 * An application that can complete the request.
 *
 * https://schema.org/actionApplication
 */
export declare const actionApplication: Property;
/**
 * actionOption
 *
 * A sub property of object. The options subject to this action.
 *
 * https://schema.org/actionOption
 */
export declare const actionOption: Property;
/**
 * album
 *
 * A music album.
 *
 * https://schema.org/album
 */
export declare const album: Property;
/**
 * albumRelease
 *
 * A release of this album.
 *
 * https://schema.org/albumRelease
 */
export declare const albumRelease: Property;
/**
 * alternateName
 *
 * An alias for the item.
 *
 * https://schema.org/alternateName
 */
export declare const alternateName: Property;
/**
 * alumni
 *
 * Alumni of an organization.
 *
 * https://schema.org/alumni
 */
export declare const alumni: Property;
/**
 * alumniOf
 *
 * An organization that the person is an alumni of.
 *
 * https://schema.org/alumniOf
 */
export declare const alumniOf: Property;
/**
 *
 *
 *
 *
 * https://schema.org/archiveHeld
 */
export declare const archiveHeld: Property;
/**
 * arterialBranch
 *
 * The branches that comprise the arterial structure.
 *
 * https://schema.org/arterialBranch
 */
export declare const arterialBranch: Property;
/**
 * artworkSurface
 *
 * The supporting materials for the artwork, e.g. Canvas, Paper, Wood, Board, etc.
 *
 * https://schema.org/artworkSurface
 */
export declare const artworkSurface: Property;
/**
 * attendee
 *
 * A person or organization attending the event.
 *
 * https://schema.org/attendee
 */
export declare const attendee: Property;
/**
 * audience
 *
 * An intended audience, i.e. a group for whom something was created.
 *
 * https://schema.org/audience
 */
export declare const audience: Property;
/**
 * availableOnDevice
 *
 * Device required to run the application. Used in cases where a specific make/model is required to run the application.
 *
 * https://schema.org/availableOnDevice
 */
export declare const availableOnDevice: Property;
/**
 * award
 *
 * An award won by or for this item.
 *
 * https://schema.org/award
 */
export declare const award: Property;
/**
 * blogPost
 *
 * A posting that is part of this blog.
 *
 * https://schema.org/blogPost
 */
export declare const blogPost: Property;
/**
 * broker
 *
 * An entity that arranges for an exchange between a buyer and a seller.  In most cases a broker never acquires or releases ownership of a product or service involved in an exchange.  If it is not clear whether an entity is a broker, seller, or buyer, the latter two terms are preferred.
 *
 * https://schema.org/broker
 */
export declare const broker: Property;
/**
 * caption
 *
 * The caption for this object. For downloadable machine formats (closed caption, subtitles etc.) use MediaObject and indicate the [[encodingFormat]].
 *
 * https://schema.org/caption
 */
export declare const caption: Property;
/**
 * category
 *
 * A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy.
 *
 * https://schema.org/category
 */
export declare const category: Property;
/**
 * childTaxon
 *
 * Closest child taxa of the taxon in question.
 *
 * https://schema.org/childTaxon
 */
export declare const childTaxon: Property;
/**
 * clinicalPharmacology
 *
 * Description of the absorption and elimination of drugs, including their concentration (pharmacokinetics, pK) and biological effects (pharmacodynamics, pD).
 *
 * https://schema.org/clinicalPharmacology
 */
export declare const clinicalPharmacology: Property;
/**
 * codeSampleType
 *
 * What type of code sample: full (compile ready) solution, code snippet, inline code, scripts, template.
 *
 * https://schema.org/codeSampleType
 */
export declare const codeSampleType: Property;
/**
 * colleague
 *
 * A colleague of the person.
 *
 * https://schema.org/colleague
 */
export declare const colleague: Property;
/**
 * contactPoint
 *
 * A contact point for a person or organization.
 *
 * https://schema.org/contactPoint
 */
export declare const contactPoint: Property;
/**
 * containsPlace
 *
 * The basic containment relation between a place and another that it contains.
 *
 * https://schema.org/containsPlace
 */
export declare const containsPlace: Property;
/**
 * containsSeason
 *
 * A season that is part of the media series.
 *
 * https://schema.org/containsSeason
 */
export declare const containsSeason: Property;
/**
 * contentLocation
 *
 * The location depicted or described in the content. For example, the location in a photograph or painting.
 *
 * https://schema.org/contentLocation
 */
export declare const contentLocation: Property;
/**
 * creator
 *
 * The creator/author of this CreativeWork. This is the same as the Author property for CreativeWork.
 *
 * https://schema.org/creator
 */
export declare const creator: Property;
/**
 * dataset
 *
 * A dataset contained in this catalog.
 *
 * https://schema.org/dataset
 */
export declare const dataset: Property;
/**
 * dateCreated
 *
 * The date on which the CreativeWork was created or the item was added to a DataFeed.
 *
 * https://schema.org/dateCreated
 */
export declare const dateCreated: Property;
/**
 * director
 *
 * A director of e.g. TV, radio, movie, video gaming etc. content, or of an event. Directors can be associated with individual items or with a series, episode, clip.
 *
 * https://schema.org/director
 */
export declare const director: Property;
/**
 * duration
 *
 * The duration of the item (movie, audio recording, event, etc.) in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
 *
 * https://schema.org/duration
 */
export declare const duration: Property;
/**
 * employee
 *
 * Someone working for this organization.
 *
 * https://schema.org/employee
 */
export declare const employee: Property;
/**
 * encodesBioChemEntity
 *
 * Another BioChemEntity encoded by this one.
 *
 * https://schema.org/encodesBioChemEntity
 */
export declare const encodesBioChemEntity: Property;
/**
 * encodesCreativeWork
 *
 * The CreativeWork encoded by this media object.
 *
 * https://schema.org/encodesCreativeWork
 */
export declare const encodesCreativeWork: Property;
/**
 * encodingFormat
 *
 * Media type typically expressed using a MIME format (see [IANA site](http://www.iana.org/assignments/media-types/media-types.xhtml) and [MDN reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)), e.g. application/zip for a SoftwareApplication binary, audio/mpeg for .mp3 etc.
 *
 * In cases where a [[CreativeWork]] has several media type representations, [[encoding]] can be used to indicate each [[MediaObject]] alongside particular [[encodingFormat]] information.
 *
 * Unregistered or niche encoding and file formats can be indicated instead via the most appropriate URL, e.g. defining Web page or a Wikipedia/Wikidata entry.
 *
 * https://schema.org/encodingFormat
 */
export declare const encodingFormat: Property;
/**
 * episode
 *
 * An episode of a TV, radio or game media within a series or season.
 *
 * https://schema.org/episode
 */
export declare const episode: Property;
/**
 * event
 *
 * Upcoming or past event associated with this place, organization, or action.
 *
 * https://schema.org/event
 */
export declare const event: Property;
/**
 * exampleOfWork
 *
 * A creative work that this work is an example/instance/realization/derivation of.
 *
 * https://schema.org/exampleOfWork
 */
export declare const exampleOfWork: Property;
/**
 * executableLibraryName
 *
 * Library file name, e.g., mscorlib.dll, system.web.dll.
 *
 * https://schema.org/executableLibraryName
 */
export declare const executableLibraryName: Property;
/**
 * exerciseCourse
 *
 * A sub property of location. The course where this action was taken.
 *
 * https://schema.org/exerciseCourse
 */
export declare const exerciseCourse: Property;
/**
 * founder
 *
 * A person who founded this organization.
 *
 * https://schema.org/founder
 */
export declare const founder: Property;
/**
 * frequency
 *
 * How often the dose is taken, e.g. 'daily'.
 *
 * https://schema.org/frequency
 */
export declare const frequency: Property;
/**
 * fundedItem
 *
 * Indicates something directly or indirectly funded or sponsored through a [[Grant]]. See also [[ownershipFundingInfo]].
 *
 * https://schema.org/fundedItem
 */
export declare const fundedItem: Property;
/**
 * funding
 *
 * A [[Grant]] that directly or indirectly provide funding or sponsorship for this item. See also [[ownershipFundingInfo]].
 *
 * https://schema.org/funding
 */
export declare const funding: Property;
/**
 * game
 *
 * Video game which is played on this server.
 *
 * https://schema.org/game
 */
export declare const game: Property;
/**
 * gameServer
 *
 * The server on which  it is possible to play the game.
 *
 * https://schema.org/gameServer
 */
export declare const gameServer: Property;
/**
 * genre
 *
 * Genre of the creative work, broadcast channel or group.
 *
 * https://schema.org/genre
 */
export declare const genre: Property;
/**
 * hasBioChemEntityPart
 *
 * Indicates a BioChemEntity that (in some sense) has this BioChemEntity as a part.
 *
 * https://schema.org/hasBioChemEntityPart
 */
export declare const hasBioChemEntityPart: Property;
/**
 * hasBroadcastChannel
 *
 * A broadcast channel of a broadcast service.
 *
 * https://schema.org/hasBroadcastChannel
 */
export declare const hasBroadcastChannel: Property;
/**
 * hasDefinedTerm
 *
 * A Defined Term contained in this term set.
 *
 * https://schema.org/hasDefinedTerm
 */
export declare const hasDefinedTerm: Property;
/**
 * hasMenu
 *
 * Either the actual menu as a structured representation, as text, or a URL of the menu.
 *
 * https://schema.org/hasMenu
 */
export declare const hasMenu: Property;
/**
 * hasMerchantReturnPolicy
 *
 * Specifies a MerchantReturnPolicy that may be applicable.
 *
 * https://schema.org/hasMerchantReturnPolicy
 */
export declare const hasMerchantReturnPolicy: Property;
/**
 * hasVariant
 *
 * Indicates a [[Product]] that is a member of this [[ProductGroup]] (or [[ProductModel]]).
 *
 * https://schema.org/hasVariant
 */
export declare const hasVariant: Property;
/**
 *
 *
 *
 *
 * https://schema.org/holdingArchive
 */
export declare const holdingArchive: Property;
/**
 * inDefinedTermSet
 *
 * A [[DefinedTermSet]] that contains this term.
 *
 * https://schema.org/inDefinedTermSet
 */
export declare const inDefinedTermSet: Property;
/**
 * inLanguage
 *
 * The language of the content or performance or used in an action. Please use one of the language codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47). See also [[availableLanguage]].
 *
 * https://schema.org/inLanguage
 */
export declare const inLanguage: Property;
/**
 * incentiveCompensation
 *
 * Description of bonus and commission compensation aspects of the job.
 *
 * https://schema.org/incentiveCompensation
 */
export declare const incentiveCompensation: Property;
/**
 * interactionStatistic
 *
 * The number of interactions for the CreativeWork using the WebSite or SoftwareApplication. The most specific child type of InteractionCounter should be used.
 *
 * https://schema.org/interactionStatistic
 */
export declare const interactionStatistic: Property;
/**
 * isAccessibleForFree
 *
 * A flag to signal that the item, event, or place is accessible for free.
 *
 * https://schema.org/isAccessibleForFree
 */
export declare const isAccessibleForFree: Property;
/**
 * isBasedOn
 *
 * A resource from which this work is derived or from which it is a modification or adaptation.
 *
 * https://schema.org/isBasedOn
 */
export declare const isBasedOn: Property;
/**
 * isEncodedByBioChemEntity
 *
 * Another BioChemEntity encoding by this one.
 *
 * https://schema.org/isEncodedByBioChemEntity
 */
export declare const isEncodedByBioChemEntity: Property;
/**
 * isPartOfBioChemEntity
 *
 * Indicates a BioChemEntity that is (in some sense) a part of this BioChemEntity.
 *
 * https://schema.org/isPartOfBioChemEntity
 */
export declare const isPartOfBioChemEntity: Property;
/**
 * isVariantOf
 *
 * Indicates the kind of product that this is a variant of. In the case of [[ProductModel]], this is a pointer (from a ProductModel) to a base product from which this product is a variant. It is safe to infer that the variant inherits all product features from the base model, unless defined locally. This is not transitive. In the case of a [[ProductGroup]], the group description also serves as a template, representing a set of Products that vary on explicitly defined, specific dimensions only (so it defines both a set of variants, as well as which values distinguish amongst those variants). When used with [[ProductGroup]], this property can apply to any [[Product]] included in the group.
 *
 * https://schema.org/isVariantOf
 */
export declare const isVariantOf: Property;
/**
 * itemOffered
 *
 * An item being offered (or demanded). The transactional nature of the offer or demand is documented using [[businessFunction]], e.g. sell, lease etc. While several common expected types are listed explicitly in this definition, others can be used. Using a second type, such as Product or a subtype of Product, can clarify the nature of the offer.
 *
 * https://schema.org/itemOffered
 */
export declare const itemOffered: Property;
/**
 * jobBenefits
 *
 * Description of benefits associated with the job.
 *
 * https://schema.org/jobBenefits
 */
export declare const jobBenefits: Property;
/**
 * jurisdiction
 *
 * Indicates a legal jurisdiction, e.g. of some legislation, or where some government service is based.
 *
 * https://schema.org/jurisdiction
 */
export declare const jurisdiction: Property;
/**
 * legislationApplies
 *
 * Indicates that this legislation (or part of a legislation) somehow transfers another legislation in a different legislative context. This is an informative link, and it has no legal value. For legally-binding links of transposition, use the <a href="/legislationTransposes">legislationTransposes</a> property. For example an informative consolidated law of a European Union's member state "applies" the consolidated version of the European Directive implemented in it.
 *
 * https://schema.org/legislationApplies
 */
export declare const legislationApplies: Property;
/**
 * mainContentOfPage
 *
 * Indicates if this web page element is the main subject of the page.
 *
 * https://schema.org/mainContentOfPage
 */
export declare const mainContentOfPage: Property;
/**
 * mainEntity
 *
 * Indicates the primary entity described in some page or other CreativeWork.
 *
 * https://schema.org/mainEntity
 */
export declare const mainEntity: Property;
/**
 * mainEntityOfPage
 *
 * Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
 *
 * https://schema.org/mainEntityOfPage
 */
export declare const mainEntityOfPage: Property;
/**
 * makesOffer
 *
 * A pointer to products or services offered by the organization or person.
 *
 * https://schema.org/makesOffer
 */
export declare const makesOffer: Property;
/**
 * measurementTechnique
 *
 * A technique, method or technology used in an [[Observation]], [[StatisticalVariable]] or [[Dataset]] (or [[DataDownload]], [[DataCatalog]]), corresponding to the method used for measuring the corresponding variable(s) (for datasets, described using [[variableMeasured]]; for [[Observation]], a [[StatisticalVariable]]). Often but not necessarily each [[variableMeasured]] will have an explicit representation as (or mapping to) an property such as those defined in Schema.org, or other RDF vocabularies and "knowledge graphs". In that case the subproperty of [[variableMeasured]] called [[measuredProperty]] is applicable.
 *
 * The [[measurementTechnique]] property helps when extra clarification is needed about how a [[measuredProperty]] was measured. This is oriented towards scientific and scholarly dataset publication but may have broader applicability; it is not intended as a full representation of measurement, but can often serve as a high level summary for dataset discovery.
 *
 * For example, if [[variableMeasured]] is: molecule concentration, [[measurementTechnique]] could be: "mass spectrometry" or "nmr spectroscopy" or "colorimetry" or "immunofluorescence". If the [[variableMeasured]] is "depression rating", the [[measurementTechnique]] could be "Zung Scale" or "HAM-D" or "Beck Depression Inventory".
 *
 * If there are several [[variableMeasured]] properties recorded for some given data object, use a [[PropertyValue]] for each [[variableMeasured]] and attach the corresponding [[measurementTechnique]]. The value can also be from an enumeration, organized as a [[MeasurementMetholdEnumeration]].
 *
 * https://schema.org/measurementTechnique
 */
export declare const measurementTechnique: Property;
/**
 * merchantReturnDays
 *
 * Specifies either a fixed return date or the number of days (from the delivery date) that a product can be returned. Used when the [[returnPolicyCategory]] property is specified as [[MerchantReturnFiniteReturnWindow]].
 *
 * https://schema.org/merchantReturnDays
 */
export declare const merchantReturnDays: Property;
/**
 * merchantReturnLink
 *
 * Specifies a Web page or service by URL, for product returns.
 *
 * https://schema.org/merchantReturnLink
 */
export declare const merchantReturnLink: Property;
/**
 * offeredBy
 *
 * A pointer to the organization or person making the offer.
 *
 * https://schema.org/offeredBy
 */
export declare const offeredBy: Property;
/**
 * offers
 *
 * An offer to provide this item&#x2014;for example, an offer to sell a product, rent the DVD of a movie, perform a service, or give away tickets to an event. Use [[businessFunction]] to indicate the kind of transaction offered, i.e. sell, lease, etc. This property can also be used to describe a [[Demand]]. While this property is listed as expected on a number of common types, it can be used in others. In that case, using a second type, such as Product or a subtype of Product, can clarify the nature of the offer.
 *
 *
 * https://schema.org/offers
 */
export declare const offers: Property;
/**
 * parent
 *
 * A parent of this person.
 *
 * https://schema.org/parent
 */
export declare const parent: Property;
/**
 * parentTaxon
 *
 * Closest parent taxon of the taxon in question.
 *
 * https://schema.org/parentTaxon
 */
export declare const parentTaxon: Property;
/**
 * partOfSeries
 *
 * The series to which this episode or season belongs.
 *
 * https://schema.org/partOfSeries
 */
export declare const partOfSeries: Property;
/**
 * partOfTrip
 *
 * Identifies that this [[Trip]] is a subTrip of another Trip.  For example Day 1, Day 2, etc. of a multi-day trip.
 *
 * https://schema.org/partOfTrip
 */
export declare const partOfTrip: Property;
/**
 * paymentDueDate
 *
 * The date that payment is due.
 *
 * https://schema.org/paymentDueDate
 */
export declare const paymentDueDate: Property;
/**
 * performTime
 *
 * The length of time it takes to perform instructions or a direction (not including time to prepare the supplies), in [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601).
 *
 * https://schema.org/performTime
 */
export declare const performTime: Property;
/**
 * performer
 *
 * A performer at the event&#x2014;for example, a presenter, musician, musical group or actor.
 *
 * https://schema.org/performer
 */
export declare const performer: Property;
/**
 * photo
 *
 * A photograph of this place.
 *
 * https://schema.org/photo
 */
export declare const photo: Property;
/**
 * provider
 *
 * The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller.
 *
 * https://schema.org/provider
 */
export declare const provider: Property;
/**
 * providesBroadcastService
 *
 * The BroadcastService offered on this channel.
 *
 * https://schema.org/providesBroadcastService
 */
export declare const providesBroadcastService: Property;
/**
 * recipeIngredient
 *
 * A single ingredient used in the recipe, e.g. sugar, flour or garlic.
 *
 * https://schema.org/recipeIngredient
 */
export declare const recipeIngredient: Property;
/**
 * recordedAs
 *
 * An audio recording of the work.
 *
 * https://schema.org/recordedAs
 */
export declare const recordedAs: Property;
/**
 * recordedAt
 *
 * The Event where the CreativeWork was recorded. The CreativeWork may capture all or part of the event.
 *
 * https://schema.org/recordedAt
 */
export declare const recordedAt: Property;
/**
 * recordedIn
 *
 * The CreativeWork that captured all or part of this Event.
 *
 * https://schema.org/recordedIn
 */
export declare const recordedIn: Property;
/**
 * recordingOf
 *
 * The composition this track is a recording of.
 *
 * https://schema.org/recordingOf
 */
export declare const recordingOf: Property;
/**
 * releaseOf
 *
 * The album this is a release of.
 *
 * https://schema.org/releaseOf
 */
export declare const releaseOf: Property;
/**
 * review
 *
 * A review of the item.
 *
 * https://schema.org/review
 */
export declare const review: Property;
/**
 * roleName
 *
 * A role played, performed or filled by a person or organization. For example, the team of creators for a comic book might fill the roles named 'inker', 'penciller', and 'letterer'; or an athlete in a SportsTeam might play in the position named 'Quarterback'.
 *
 * https://schema.org/roleName
 */
export declare const roleName: Property;
/**
 * runtimePlatform
 *
 * Runtime platform or script interpreter dependencies (example: Java v1, Python 2.3, .NET Framework 3.0).
 *
 * https://schema.org/runtimePlatform
 */
export declare const runtimePlatform: Property;
/**
 * season
 *
 * A season in a media series.
 *
 * https://schema.org/season
 */
export declare const season: Property;
/**
 * serialNumber
 *
 * The serial number or any alphanumeric identifier of a particular product. When attached to an offer, it is a shortcut for the serial number of the product included in the offer.
 *
 * https://schema.org/serialNumber
 */
export declare const serialNumber: Property;
/**
 * serviceArea
 *
 * The geographic area where the service is provided.
 *
 * https://schema.org/serviceArea
 */
export declare const serviceArea: Property;
/**
 * serviceOutput
 *
 * The tangible thing generated by the service, e.g. a passport, permit, etc.
 *
 * https://schema.org/serviceOutput
 */
export declare const serviceOutput: Property;
/**
 * sibling
 *
 * A sibling of the person.
 *
 * https://schema.org/sibling
 */
export declare const sibling: Property;
/**
 * significantLink
 *
 * One of the more significant URLs on the page. Typically, these are the non-navigation links that are clicked on the most.
 *
 * https://schema.org/significantLink
 */
export declare const significantLink: Property;
/**
 * softwareRequirements
 *
 * Component dependency requirements for application. This includes runtime environments and shared libraries that are not included in the application distribution package, but required to run the application (examples: DirectX, Java or .NET runtime).
 *
 * https://schema.org/softwareRequirements
 */
export declare const softwareRequirements: Property;
/**
 * sponsor
 *
 * A person or organization that supports a thing through a pledge, promise, or financial contribution. E.g. a sponsor of a Medical Study or a corporate sponsor of an event.
 *
 * https://schema.org/sponsor
 */
export declare const sponsor: Property;
/**
 * subOrganization
 *
 * A relationship between two organizations where the first includes the second, e.g., as a subsidiary. See also: the more specific 'department' property.
 *
 * https://schema.org/subOrganization
 */
export declare const subOrganization: Property;
/**
 * subTrip
 *
 * Identifies a [[Trip]] that is a subTrip of this Trip.  For example Day 1, Day 2, etc. of a multi-day trip.
 *
 * https://schema.org/subTrip
 */
export declare const subTrip: Property;
/**
 * subjectOf
 *
 * A CreativeWork or Event about this Thing.
 *
 * https://schema.org/subjectOf
 */
export declare const subjectOf: Property;
/**
 * suggestedAnswer
 *
 * An answer (possibly one of several, possibly incorrect) to a Question, e.g. on a Question/Answer site.
 *
 * https://schema.org/suggestedAnswer
 */
export declare const suggestedAnswer: Property;
/**
 * superEvent
 *
 * An event that this event is a part of. For example, a collection of individual music performances might each have a music festival as their superEvent.
 *
 * https://schema.org/superEvent
 */
export declare const superEvent: Property;
/**
 * targetCollection
 *
 * A sub property of object. The collection target of the action.
 *
 * https://schema.org/targetCollection
 */
export declare const targetCollection: Property;
/**
 * temporalCoverage
 *
 * The temporalCoverage of a CreativeWork indicates the period that the content applies to, i.e. that it describes, either as a DateTime or as a textual string indicating a time period in [ISO 8601 time interval format](https://en.wikipedia.org/wiki/ISO_8601#Time_intervals). In
 *       the case of a Dataset it will typically indicate the relevant time period in a precise notation (e.g. for a 2011 census dataset, the year 2011 would be written "2011/2012"). Other forms of content, e.g. ScholarlyArticle, Book, TVSeries or TVEpisode, may indicate their temporalCoverage in broader terms - textually or via well-known URL.
 *       Written works such as books may sometimes have precise temporal coverage too, e.g. a work set in 1939 - 1945 can be indicated in ISO 8601 interval format format via "1939/1945".
 *
 * Open-ended date ranges can be written with ".." in place of the end date. For example, "2015-11/.." indicates a range beginning in November 2015 and with no specified final date. This is tentative and might be updated in future when ISO 8601 is officially updated.
 *
 * https://schema.org/temporalCoverage
 */
export declare const temporalCoverage: Property;
/**
 * termCode
 *
 * A code that identifies this [[DefinedTerm]] within a [[DefinedTermSet]]
 *
 * https://schema.org/termCode
 */
export declare const termCode: Property;
/**
 * track
 *
 * A music recording (track)&#x2014;usually a single song. If an ItemList is given, the list should contain items of type MusicRecording.
 *
 * https://schema.org/track
 */
export declare const track: Property;
/**
 * translationOfWork
 *
 * The work that this work has been translated from. E.g. 物种起源 is a translationOf “On the Origin of Species”.
 *
 * https://schema.org/translationOfWork
 */
export declare const translationOfWork: Property;
/**
 * usageInfo
 *
 * The schema.org [[usageInfo]] property indicates further information about a [[CreativeWork]]. This property is applicable both to works that are freely available and to those that require payment or other transactions. It can reference additional information, e.g. community expectations on preferred linking and citation conventions, as well as purchasing details. For something that can be commercially licensed, usageInfo can provide detailed, resource-specific information about licensing options.
 *
 * This property can be used alongside the license property which indicates license(s) applicable to some piece of content. The usageInfo property can provide information about other licensing options, e.g. acquiring commercial usage rights for an image that is also available under non-commercial creative commons licenses.
 *
 * https://schema.org/usageInfo
 */
export declare const usageInfo: Property;
/**
 * warranty
 *
 * The warranty promise(s) included in the offer.
 *
 * https://schema.org/warranty
 */
export declare const warranty: Property;
/**
 * workTranslation
 *
 * A work that is a translation of the content of this work. E.g. 西遊記 has an English workTranslation “Journey to the West”, a German workTranslation “Monkeys Pilgerfahrt” and a Vietnamese  translation Tây du ký bình khảo.
 *
 * https://schema.org/workTranslation
 */
export declare const workTranslation: Property;
/**
 * yield
 *
 * The quantity that results by performing instructions. For example, a paper airplane, 10 personalized candles.
 * Note that `yield` is a reserved Javascript keyword, and is therefore suffixed by `__workaround`.
 * For a list of reserved keywords, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Keywords.
 *
 * https://schema.org/yield
 */
export declare const yield__workaround: Property;
/**
 * about
 *
 * The subject matter of the content.
 *
 * https://schema.org/about
 */
export declare const about: Property;
/**
 * actor
 *
 * An actor, e.g. in TV, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip.
 *
 * https://schema.org/actor
 */
export declare const actor: Property;
/**
 * associatedReview
 *
 * An associated [[Review]].
 *
 * https://schema.org/associatedReview
 */
export declare const associatedReview: Property;
/**
 * competitor
 *
 * A competitor in a sports event.
 *
 * https://schema.org/competitor
 */
export declare const competitor: Property;
/**
 * containedInPlace
 *
 * The basic containment relation between a place and one that contains it.
 *
 * https://schema.org/containedInPlace
 */
export declare const containedInPlace: Property;
/**
 * encoding
 *
 * A media object that encodes this CreativeWork. This property is a synonym for associatedMedia.
 *
 * https://schema.org/encoding
 */
export declare const encoding: Property;
/**
 * hasMap
 *
 * A URL to a map of the place.
 *
 * https://schema.org/hasMap
 */
export declare const hasMap: Property;
/**
 * material
 *
 * A material that something is made from, e.g. leather, wool, cotton, paper.
 *
 * https://schema.org/material
 */
export declare const material: Property;
/**
 * memberOf
 *
 * An Organization (or ProgramMembership) to which this Person or Organization belongs.
 *
 * https://schema.org/memberOf
 */
export declare const memberOf: Property;
/**
 * parentOrganization
 *
 * The larger organization that this organization is a [[subOrganization]] of, if any.
 *
 * https://schema.org/parentOrganization
 */
export declare const parentOrganization: Property;
/**
 * result
 *
 * The result produced in the action. E.g. John wrote *a book*.
 *
 * https://schema.org/result
 */
export declare const result: Property;
/**
 * seller
 *
 * An entity which offers (sells / leases / lends / loans) the services / goods.  A seller may also be a provider.
 *
 * https://schema.org/seller
 */
export declare const seller: Property;
/**
 * spatialCoverage
 *
 * The spatialCoverage of a CreativeWork indicates the place(s) which are the focus of the content. It is a subproperty of
 *       contentLocation intended primarily for more technical and detailed materials. For example with a Dataset, it indicates
 *       areas that the dataset describes: a dataset of New York weather would have spatialCoverage which was the place: the state of New York.
 *
 * https://schema.org/spatialCoverage
 */
export declare const spatialCoverage: Property;
/**
 * step
 *
 * A single step item (as HowToStep, text, document, video, etc.) or a HowToSection.
 *
 * https://schema.org/step
 */
export declare const step: Property;
/**
 * subEvent
 *
 * An Event that is part of this event. For example, a conference event includes many presentations, each of which is a subEvent of the conference.
 *
 * https://schema.org/subEvent
 */
export declare const subEvent: Property;
/**
 * supply
 *
 * A sub-property of instrument. A supply consumed when performing instructions or a direction.
 *
 * https://schema.org/supply
 */
export declare const supply: Property;
/**
 * workFeatured
 *
 * A work featured in some event, e.g. exhibited in an ExhibitionEvent.
 *        Specific subproperties are available for workPerformed (e.g. a play), or a workPresented (a Movie at a ScreeningEvent).
 *
 * https://schema.org/workFeatured
 */
export declare const workFeatured: Property;
/**
 * areaServed
 *
 * The geographic area where a service or offered item is provided.
 *
 * https://schema.org/areaServed
 */
export declare const areaServed: Property;
/**
 * image
 *
 * An image of the item. This can be a [[URL]] or a fully described [[ImageObject]].
 *
 * https://schema.org/image
 */
export declare const image: Property;
/**
 * includedInDataCatalog
 *
 * A data catalog which contains this dataset.
 *
 * https://schema.org/includedInDataCatalog
 */
export declare const includedInDataCatalog: Property;
/**
 * member
 *
 * A member of an Organization or a ProgramMembership. Organizations can be members of organizations; ProgramMembership is typically for individuals.
 *
 * https://schema.org/member
 */
export declare const member: Property;
/**
 * recipient
 *
 * A sub property of participant. The participant who is at the receiving end of the action.
 *
 * https://schema.org/recipient
 */
export declare const recipient: Property;
/**
 * workExample
 *
 * Example/instance/realization/derivation of the concept of this creative work. E.g. the paperback edition, first edition, or e-book.
 *
 * https://schema.org/workExample
 */
export declare const workExample: Property;
/**
 * description
 *
 * A description of the item.
 *
 * https://schema.org/description
 */
export declare const description: Property;
/**
 * gtin
 *
 * A Global Trade Item Number ([GTIN](https://www.gs1.org/standards/id-keys/gtin)). GTINs identify trade items, including products and services, using numeric identification codes.
 *
 * The GS1 [digital link specifications](https://www.gs1.org/standards/Digital-Link/) express GTINs as URLs (URIs, IRIs, etc.). Details including regular expression examples can be found in, Section 6 of the GS1 URI Syntax specification; see also [schema.org tracking issue](https://github.com/schemaorg/schemaorg/issues/3156#issuecomment-1209522809) for schema.org-specific discussion. A correct [[gtin]] value should be a valid GTIN, which means that it should be an all-numeric string of either 8, 12, 13 or 14 digits, or a "GS1 Digital Link" URL based on such a string. The numeric component should also have a [valid GS1 check digit](https://www.gs1.org/services/check-digit-calculator) and meet the other rules for valid GTINs. See also [GS1's GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) and [Wikipedia](https://en.wikipedia.org/wiki/Global_Trade_Item_Number) for more details. Left-padding of the gtin values is not required or encouraged. The [[gtin]] property generalizes the earlier [[gtin8]], [[gtin12]], [[gtin13]], and [[gtin14]] properties.
 *
 * Note also that this is a definition for how to include GTINs in Schema.org data, and not a definition of GTINs in general - see the GS1 documentation for authoritative details.
 *
 * https://schema.org/gtin
 */
export declare const gtin: Property;
/**
 * hasRepresentation
 *
 * A common representation such as a protein sequence or chemical structure for this entity. For images use schema.org/image.
 *
 * https://schema.org/hasRepresentation
 */
export declare const hasRepresentation: Property;
/**
 * hasPart
 *
 * Indicates an item or CreativeWork that is part of this item, or CreativeWork (in some sense).
 *
 * https://schema.org/hasPart
 */
export declare const hasPart: Property;
/**
 * position
 *
 * The position of an item in a series or sequence of items.
 *
 * https://schema.org/position
 */
export declare const position: Property;
/**
 * isPartOf
 *
 * Indicates an item or CreativeWork that this item, or CreativeWork (in some sense), is part of.
 *
 * https://schema.org/isPartOf
 */
export declare const isPartOf: Property;
/**
 * instrument
 *
 * The object that helped the agent perform the action. E.g. John wrote a book with *a pen*.
 *
 * https://schema.org/instrument
 */
export declare const instrument: Property;
/**
 * object
 *
 * The object upon which the action is carried out, whose state is kept intact or changed. Also known as the semantic roles patient, affected or undergoer (which change their state) or theme (which doesn't). E.g. John read *a book*.
 *
 * https://schema.org/object
 */
export declare const object: Property;
/**
 * publishingPrinciples
 *
 * The publishingPrinciples property indicates (typically via [[URL]]) a document describing the editorial principles of an [[Organization]] (or individual, e.g. a [[Person]] writing a blog) that relate to their activities as a publisher, e.g. ethics or diversity policies. When applied to a [[CreativeWork]] (e.g. [[NewsArticle]]) the principles are those of the party primarily responsible for the creation of the [[CreativeWork]].
 *
 * While such policies are most typically expressed in natural language, sometimes related information (e.g. indicating a [[funder]]) can be expressed using schema.org terminology.
 *
 *
 * https://schema.org/publishingPrinciples
 */
export declare const publishingPrinciples: Property;
/**
 * location
 *
 * The location of, for example, where an event is happening, where an organization is located, or where an action takes place.
 *
 * https://schema.org/location
 */
export declare const location: Property;
/**
 * participant
 *
 * Other co-agents that participated in the action indirectly. E.g. John wrote a book with *Steve*.
 *
 * https://schema.org/participant
 */
export declare const participant: Property;
/**
 * identifier
 *
 * The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
 *
 *
 * https://schema.org/identifier
 */
export declare const identifier: Property;
export {};
//# sourceMappingURL=schema_https.d.ts.map