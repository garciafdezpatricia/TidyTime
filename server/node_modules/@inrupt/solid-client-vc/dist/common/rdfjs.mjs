import { DataFactory } from 'n3';

const { defaultGraph } = DataFactory;
function getSingleObject(vc, subject, predicate, type) {
    const results = [...vc.match(subject, predicate, null, defaultGraph())];
    if (results.length !== 1) {
        throw new Error(`Expected exactly one result. Found ${results.length}.`);
    }
    const [{ object }] = results;
    const expectedTypes = [type];
    if (!expectedTypes.includes(object.termType)) {
        throw new Error(`Expected [${object.value}] to be a ${expectedTypes.join(" or ")}. Found [${object.termType}]`);
    }
    return object;
}
/**
 * @internal
 */
function lenientSingle(dataset, termTypes = ["NamedNode", "BlankNode"]) {
    const array = [...dataset];
    return array.length === 1 && termTypes.includes(array[0].object.termType)
        ? array[0].object
        : undefined;
}

export { getSingleObject, lenientSingle };
