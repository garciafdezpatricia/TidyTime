import type { Iri, VerifiableCredentialBase, VerifiablePresentation } from "./common";
export type VerifiableClaims = {
    "@context": unknown;
    id: Iri;
    type: Iri[];
    proofType: string;
    proofCreated: string;
    proofVerificationMethod: string;
    proofPurpose: string;
    proofValue: string;
};
export type CredentialClaims = VerifiableClaims & {
    issuer: Iri;
    issuanceDate: string;
    subjectId: Iri;
    subjectClaims: Record<string, string>;
};
export declare const defaultVerifiableClaims: VerifiableClaims;
export declare const defaultCredentialClaims: CredentialClaims;
export declare const mockPartialCredential: (claims?: Partial<CredentialClaims>, id?: string) => Record<string, unknown>;
export declare const mockPartialCredential2Proofs: (claims?: Partial<CredentialClaims>, id?: string) => Record<string, unknown>;
export declare const mockCredential: (claims: CredentialClaims) => VerifiableCredentialBase;
export declare const mockDefaultCredential: (id?: string) => VerifiableCredentialBase;
export declare const mockDefaultCredential2Proofs: (id?: string) => VerifiableCredentialBase;
export declare const mockPartialPresentation: (credentials?: VerifiableCredentialBase[], claims?: Partial<VerifiableClaims>) => Record<string, unknown>;
export declare const mockDefaultPresentation: (vc?: VerifiableCredentialBase[]) => VerifiablePresentation;
export declare const mockAnonymousDefaultPresentation: (vc?: VerifiableCredentialBase[]) => VerifiablePresentation;
export declare const mockAccessGrant: () => {
    "@context": string[];
    type: string;
    holder: string;
    verifiableCredential: {
        id: string;
        type: string[];
        proof: {
            type: string;
            created: string;
            domain: string;
            proofPurpose: string;
            proofValue: string;
            verificationMethod: string;
        };
        credentialStatus: {
            id: string;
            type: string;
            revocationListCredential: string;
            revocationListIndex: string;
        };
        credentialSubject: {
            id: string;
            hasConsent: {
                mode: string;
                forPersonalData: string;
                forPurpose: string;
                hasStatus: string;
                isConsentForDataSubject: string;
            };
        };
        issuanceDate: string;
        issuer: string;
        "@context": string[];
    }[];
};
