import { DataFactory } from 'n3';
import { sec, cred, rdf } from './constants.mjs';
import { lenientSingle } from './rdfjs.mjs';
import { isValidProof, isDate } from './getters.mjs';

const { defaultGraph, quad } = DataFactory;
/**
 * Verifies that a given JSON-LD payload conforms to the Verifiable Credential
 * schema we expect.
 * @param data The JSON-LD payload as an RDFJS dataset
 * @param id The id of the VerifiableCredential as a Named Node
 * @returns true is the payload matches our expectation.
 * @deprecated Use isRdfjsVerifiableCredential instead
 */
function isRdfjsVerifiableCredential(dataset, id) {
    const proof = lenientSingle(dataset.match(id, sec.proof, null, defaultGraph()));
    return (!!proof &&
        isValidProof(dataset, proof) &&
        !!lenientSingle(dataset.match(id, cred.issuer, null, defaultGraph()), ["NamedNode"]) &&
        isDate(lenientSingle(dataset.match(id, cred.issuanceDate, null, defaultGraph()), ["Literal"])) &&
        !!lenientSingle(dataset.match(id, cred.credentialSubject, null, defaultGraph()), ["NamedNode"]) &&
        dataset.has(quad(id, rdf.type, cred.VerifiableCredential, defaultGraph())));
}

export { isRdfjsVerifiableCredential as default };
