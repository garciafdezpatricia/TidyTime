import { DataFactory } from 'n3';
import { isUrl } from './common.mjs';
import { cred, rdf } from './constants.mjs';
import isRdfjsVerifiableCredential from './isRdfjsVerifiableCredential.mjs';

const { defaultGraph } = DataFactory;
function getHolder(dataset, id) {
    const holder = [...dataset.match(id, cred.holder, null, defaultGraph())];
    if (holder.length === 1 &&
        holder[0].object.termType === "NamedNode" &&
        isUrl(holder[0].object.value)) {
        return holder[0].object.value;
    }
    throw new Error("Could not find a valid holder");
}
function getVpSubject(data) {
    const presentations = [
        ...data.match(null, rdf.type, cred.VerifiablePresentation, defaultGraph()),
    ];
    if (presentations.length !== 1) {
        throw new Error(`Expected exactly one Verifiable Presentation. Found ${presentations.length}.`);
    }
    const { subject } = presentations[0];
    if (subject.termType !== "BlankNode" && subject.termType !== "NamedNode") {
        throw new Error(`Expected VP subject to be NamedNode or BlankNode. Instead found [${subject.value}] with termType [${subject.termType}]`);
    }
    return subject;
}
function isRdfjsVerifiablePresentation(dataset, id) {
    for (const { object } of dataset.match(id, cred.verifiableCredential, null, defaultGraph())) {
        if (object.termType !== "NamedNode" ||
            !isRdfjsVerifiableCredential(dataset, object)) {
            return false;
        }
    }
    const holder = [...dataset.match(id, cred.holder, null, defaultGraph())];
    return ((holder.length === 0 ||
        (holder.length === 1 &&
            holder[0].object.termType === "NamedNode" &&
            isUrl(holder[0].object.value))) &&
        // dataset.has(quad(id, rdf.type, cred.VerifiablePresentation, defaultGraph()))
        // FIXME: Replace with the above condition
        dataset.match(id, rdf.type, null, defaultGraph()).size >= 1);
}

export { isRdfjsVerifiablePresentation as default, getHolder, getVpSubject };
