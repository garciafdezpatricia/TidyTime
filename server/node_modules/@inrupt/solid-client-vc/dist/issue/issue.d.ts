/**
 * @module issue
 */
import type { Iri, JsonLd, VerifiableCredential, VerifiableCredentialBase, DatasetWithId } from "../common/common";
/**
 * Request that a given Verifiable Credential (VC) Issuer issues a VC containing
 * the provided claims. The VC Issuer is expected to implement the [W3C VC Issuer HTTP API](https://w3c-ccg.github.io/vc-api/issuer.html).
 *
 * @param issuerEndpoint The `/issue` endpoint of the VC Issuer.
 * @param subjectId The identifier of the VC claims' subject.
 * @param subjectClaims Claims about the subject that will be attested by the VC.
 * @param credentialClaims Claims about the credential itself, rather than its subject, e.g. credential type or expiration.
 * @param options
 * - options.fetch: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * This can be typically used for authentication. Note that if it is omitted, and
 * `@inrupt/solid-client-authn-browser` is in your dependencies, the default session
 * is picked up.
 * - options.returnLegacyJsonld: Include the normalized JSON-LD in the response
 * @returns the VC returned by the Issuer if the request is successful. Otherwise, an error is thrown.
 * @since 0.1.0
 */
export declare function issueVerifiableCredential(issuerEndpoint: Iri, subjectClaims: JsonLd, credentialClaims: JsonLd, options: {
    fetch?: typeof fetch;
    returnLegacyJsonld: false;
}): Promise<DatasetWithId>;
/**
 * Request that a given Verifiable Credential (VC) Issuer issues a VC containing
 * the provided claims. The VC Issuer is expected to implement the [W3C VC Issuer HTTP API](https://w3c-ccg.github.io/vc-api/issuer.html).
 *
 * @param issuerEndpoint The `/issue` endpoint of the VC Issuer.
 * @param subjectId The identifier of the VC claims' subject.
 * @param subjectClaims Claims about the subject that will be attested by the VC.
 * @param credentialClaims Claims about the credential itself, rather than its subject, e.g. credential type or expiration.
 * @param options
 * - options.fetch: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * This can be typically used for authentication. Note that if it is omitted, and
 * `@inrupt/solid-client-authn-browser` is in your dependencies, the default session
 * is picked up.
 * - options.returnLegacyJsonld: Include the normalized JSON-LD in the response
 * @returns the VC returned by the Issuer if the request is successful. Otherwise, an error is thrown.
 * @since 0.1.0
 * @deprecated Deprecated in favour of setting returnLegacyJsonld: false. This will be the default value in future
 * versions of this library.
 */
export declare function issueVerifiableCredential(issuerEndpoint: Iri, subjectClaims: JsonLd, credentialClaims?: JsonLd, options?: {
    fetch?: typeof fetch;
    returnLegacyJsonld?: true;
    normalize?: (object: VerifiableCredentialBase) => VerifiableCredentialBase;
}): Promise<VerifiableCredential>;
/**
 * Request that a given Verifiable Credential (VC) Issuer issues a VC containing
 * the provided claims. The VC Issuer is expected to implement the [W3C VC Issuer HTTP API](https://w3c-ccg.github.io/vc-api/issuer.html).
 *
 * @param issuerEndpoint The `/issue` endpoint of the VC Issuer.
 * @param subjectId The identifier of the VC claims' subject.
 * @param subjectClaims Claims about the subject that will be attested by the VC.
 * @param credentialClaims Claims about the credential itself, rather than its subject, e.g. credential type or expiration.
 * @param options
 * - options.fetch: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * This can be typically used for authentication. Note that if it is omitted, and
 * `@inrupt/solid-client-authn-browser` is in your dependencies, the default session
 * is picked up.
 * - options.returnLegacyJsonld: Include the normalized JSON-LD in the response
 * @returns the VC returned by the Issuer if the request is successful. Otherwise, an error is thrown.
 * @since 0.1.0
 * @deprecated Deprecated in favour of setting returnLegacyJsonld: false. This will be the default value in future
 * versions of this library.
 */
export declare function issueVerifiableCredential(issuerEndpoint: Iri, subjectClaims: JsonLd, credentialClaims?: JsonLd, options?: {
    fetch?: typeof fetch;
    returnLegacyJsonld?: boolean;
    normalize?: (object: VerifiableCredentialBase) => VerifiableCredentialBase;
}): Promise<DatasetWithId>;
export default issueVerifiableCredential;
