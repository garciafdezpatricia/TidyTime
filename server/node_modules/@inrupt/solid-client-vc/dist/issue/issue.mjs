import { concatenateContexts, defaultCredentialTypes, internal_getVerifiableCredentialFromResponse, defaultContext } from '../common/common.mjs';

//
// Copyright Inrupt Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
// Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
async function issueVerifiableCredential(issuerEndpoint, subjectClaims, credentialClaims, options) {
    const internalOptions = { ...options };
    if (internalOptions.fetch === undefined) {
        internalOptions.fetch = fetch;
    }
    // credentialClaims should contain all the claims, but not the context.
    const { "@context": subjectClaimsContext, ...contextlessSubjectClaims } = subjectClaims;
    // When we add proper JSONLD parsing support, the following should be replaced.
    const { "@context": credentialClaimsContext, ...contextlessCredentialClaims } = credentialClaims !== undefined ? credentialClaims : { "@context": [] };
    const { type: credentialTypeClaims, ...nonTypeCredentialClaims } = contextlessCredentialClaims;
    let credentialTypes = [];
    if (credentialTypeClaims !== undefined) {
        credentialTypes = Array.isArray(credentialTypeClaims)
            ? credentialTypeClaims
            : [credentialTypeClaims];
    }
    const credentialIssueBody = {
        // See https://w3c-ccg.github.io/vc-api/issuer.html
        credential: {
            "@context": concatenateContexts(defaultContext, subjectClaimsContext, credentialClaimsContext),
            type: [...defaultCredentialTypes, ...credentialTypes],
            ...nonTypeCredentialClaims,
            credentialSubject: contextlessSubjectClaims,
        },
    };
    const response = await internalOptions.fetch(issuerEndpoint, {
        headers: {
            "Content-Type": "application/json",
        },
        method: "POST",
        body: JSON.stringify(credentialIssueBody),
    });
    if (!response.ok) {
        // TODO: use the error library when available.
        throw new Error(`The VC issuing endpoint [${issuerEndpoint}] could not successfully issue a VC: ${response.status} ${response.statusText}`);
    }
    return internal_getVerifiableCredentialFromResponse(undefined, response, options);
}

export { issueVerifiableCredential as default, issueVerifiableCredential };
