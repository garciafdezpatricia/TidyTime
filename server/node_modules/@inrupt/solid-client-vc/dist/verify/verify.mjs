import { DataFactory } from 'n3';
import { hasId, getVerifiableCredentialApiConfiguration, verifiableCredentialToDataset, getVerifiableCredential } from '../common/common.mjs';
import { getId, getIssuer } from '../common/getters.mjs';
import isRdfjsVerifiableCredential from '../common/isRdfjsVerifiableCredential.mjs';
import isRdfjsVerifiablePresentation, { getVpSubject, getHolder } from '../common/isRdfjsVerifiablePresentation.mjs';

//
// Copyright Inrupt Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
// Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
const { namedNode } = DataFactory;
async function dereferenceVc(vc, options) {
    // This test passes for both URL and UrlString
    if (!vc.toString().startsWith("http")) {
        if (typeof vc.match === "function") {
            return vc;
        }
        return verifiableCredentialToDataset(vc, {
            requireId: true,
        });
    }
    return getVerifiableCredential(vc.toString(), options);
}
/**
 * Verify that a VC is valid, i.e. :
 * - its signature matches its issuer's key
 * - it has not been revoked
 * - it isn't expired
 * These verifications are done server-side by a Verification Service, either
 * discovered from the VC Issuer or manually provided.
 *
 * @param vc The VC to verify
 * @param options Additional options
 * - `options.fetch`: An alternative `fetch` function to make the HTTP request,
 * compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * This can be typically used for authentication.
 * - `options.verificationEndpoint`: Pass a trusted VC verification service
 *
 * @returns a JSON-shaped validation report structured accoring to the [VC Verifier API](https://w3c-ccg.github.io/vc-api/verifier.html#operation/verifyCredential).
 * @since 0.3.0
 */
async function isValidVc(vc, options) {
    var _a, _b;
    const fetcher = (_a = options === null || options === void 0 ? void 0 : options.fetch) !== null && _a !== void 0 ? _a : fetch;
    const vcObject = await dereferenceVc(vc, options);
    if (!hasId(vcObject) ||
        !isRdfjsVerifiableCredential(vcObject, namedNode(getId(vcObject)))) {
        throw new Error(`The request to [${vc}] returned an unexpected response: ${JSON.stringify(vcObject, null, "  ")}`);
    }
    // Discover the consent endpoint from the resource part of the Access Grant.
    const verifierEndpoint = (_b = options === null || options === void 0 ? void 0 : options.verificationEndpoint) !== null && _b !== void 0 ? _b : (await getVerifiableCredentialApiConfiguration(getIssuer(vcObject)))
        .verifierService;
    if (verifierEndpoint === undefined) {
        throw new Error(`The VC service provider ${getIssuer(vcObject)} does not advertize for a verifier service in its .well-known/vc-configuration document`);
    }
    const response = await fetcher(verifierEndpoint, {
        headers: {
            "Content-Type": "application/json",
        },
        method: "POST",
        body: JSON.stringify({
            verifiableCredential: vcObject,
        }),
    });
    if (!response.ok) {
        throw new Error(`The request to the verification endpoint [${verifierEndpoint}] failed: ${response.status} ${response.statusText}`);
    }
    try {
        return await response.json();
    }
    catch (e) {
        throw new Error(`Parsing the response of the verification service hosted at [${verifierEndpoint}] as JSON failed: ${
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        e.toString()}`);
    }
}
async function asDataset(data, requireId) {
    return typeof data.match === "function"
        ? data
        : verifiableCredentialToDataset(data, {
            requireId,
        });
}
/**
 * Verify that a VP is valid and content has not ben tampered with.
 *
 * @param verificationEndpoint The verification endpoint
 * @param verifiablePresentation The VP to verify
 * @param options Additional options
 * - `options.fetch`: An alternative `fetch` function to make the HTTP request,
 * compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * This can be typically used for authentication.
 * - `options.domain`: Pass a domain
 * - `options.challenge`: Pass a challenge
 *
 * @returns a JSON-shaped validation report structured accoring to the [VP Verifier API](https://w3c-ccg.github.io/vc-api/verifier.html#operation/verifyPresentation).
 * @since
 */
async function isValidVerifiablePresentation(verificationEndpoint, verifiablePresentation, options = {}) {
    var _a;
    const fetcher = (_a = options.fetch) !== null && _a !== void 0 ? _a : fetch;
    const dataset = await asDataset(verifiablePresentation, false);
    const subject = getVpSubject(dataset);
    if (!isRdfjsVerifiablePresentation(dataset, subject)) {
        throw new Error(`The request to [${dataset}] returned an unexpected response: ${JSON.stringify(dataset, null, "  ")}`);
    }
    if (verifiablePresentation.verifiableCredential) {
        const datasets = await Promise.all(verifiablePresentation.verifiableCredential.map(async (vc) => {
            const vcDataset = await asDataset(vc, true);
            return isRdfjsVerifiableCredential(vcDataset, namedNode(getId(vcDataset)));
        }));
        if (datasets.some((vc) => vc === false)) {
            throw new Error(`The request to [${dataset}] returned an unexpected response: ${JSON.stringify(dataset, null, "  ")}`);
        }
    }
    const verifierEndpoint = verificationEndpoint !== null && verificationEndpoint !== void 0 ? verificationEndpoint : (await getVerifiableCredentialApiConfiguration(getHolder(dataset, subject)))
        .verifierService;
    if (verifierEndpoint === undefined) {
        throw new Error(`The VC service provider ${getHolder(dataset, subject)} does not advertize for a verifier service in its .well-known/vc-configuration document`);
    }
    const response = await fetcher(verifierEndpoint, {
        headers: {
            "Content-Type": "application/json",
        },
        method: "POST",
        body: JSON.stringify({
            verifiablePresentation: dataset,
            options: {
                domain: options.domain,
                challenge: options.challenge,
            },
        }),
    });
    if (!response.ok) {
        throw new Error(`The request to the verification endpoint [${verificationEndpoint}] failed: ${response.status} ${response.statusText}`);
    }
    try {
        return await response.json();
    }
    catch (e) {
        throw new Error(`Parsing the response of the verification service hosted at [${verificationEndpoint}] as JSON failed: ${
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        e.toString()}`);
    }
}

export { isValidVc, isValidVerifiablePresentation };
