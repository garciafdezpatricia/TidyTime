import { getCredentialSubject, getId, getIssuanceDate, getExpirationDate, getIssuer } from '@inrupt/solid-client-vc';
export { getCredentialSubject, getExpirationDate, getId, getIssuanceDate, getIssuer } from '@inrupt/solid-client-vc';
import { DataFactory } from 'n3';
import { gc, ldp, acl, TYPE, INHERIT, XSD_BOOLEAN } from './constants.mjs';

const { namedNode, defaultGraph, quad, literal } = DataFactory;
function getSingleObject(vc, subject, predicate, type, required = true) {
    const results = [...vc.match(subject, predicate, null, defaultGraph())];
    if (results.length === 0 && !required) {
        return undefined;
    }
    if (results.length !== 1) {
        throw new Error(`Expected exactly one result. Found ${results.length}.`);
    }
    const [{ object }] = results;
    const expectedTypes = type ? [type] : ["NamedNode", "BlankNode"];
    if (!expectedTypes.includes(object.termType)) {
        throw new Error(`Expected [${object.value}] to be a ${expectedTypes.join(" or ")}. Found [${object.termType}]`);
    }
    return object;
}
/**
 * @internal
 */
function getConsent(vc) {
    const credentialSubject = getCredentialSubject(vc);
    const consents = [
        ...vc.match(credentialSubject, gc.providedConsent, null, defaultGraph()),
        ...vc.match(credentialSubject, gc.hasConsent, null, defaultGraph()),
    ];
    if (consents.length !== 1) {
        throw new Error(`Expected exactly 1 consent value. Found ${consents.length}.`);
    }
    const [{ object }] = consents;
    if (object.termType !== "BlankNode" && object.termType !== "NamedNode") {
        throw new Error(`Expected consent to be a Named Node or Blank Node, instead got [${object.termType}].`);
    }
    return object;
}
/**
 * Get the resources to which an Access Grant/Request applies.
 *
 * @example
 *
 * ```
 * const resources = getResources(accessGrant);
 * ```
 *
 * @param vc The Access Grant/Request
 * @returns The resources IRIs
 */
function getResources(vc) {
    const resources = [];
    for (const { object } of vc.match(getConsent(vc), gc.forPersonalData, null, defaultGraph())) {
        if (object.termType !== "NamedNode") {
            throw new Error(`Expected resource to be a Named Node. Instead got [${object.value}] with term type [${object.termType}]`);
        }
        resources.push(object.value);
    }
    return resources;
}
/**
 * Get the purposes for which an Access Grant/Request applies.
 *
 * @example
 *
 * ```
 * const purposes = getPurposes(accessGrant);
 * ```
 *
 * @param vc The Access Grant/Request
 * @returns The purpose IRIs
 */
function getPurposes(vc) {
    const consent = getConsent(vc);
    const purposes = [];
    for (const { object } of vc.match(consent, gc.forPurpose, null, defaultGraph())) {
        if (object.termType !== "NamedNode") {
            throw new Error(`Expected purpose to be Named Node. Instead got [${object.value}] with term type [${object.termType}]`);
        }
        purposes.push(object.value);
    }
    return purposes;
}
function isGConsentAccessGrant(vc) {
    var _a;
    const credentialSubject = getCredentialSubject(vc);
    const providedConsent = getSingleObject(vc, credentialSubject, gc.providedConsent, undefined, false);
    if (!providedConsent)
        return false;
    const gcStatus = getSingleObject(vc, providedConsent, gc.hasStatus, undefined, false);
    return (gcStatus !== undefined &&
        (vc.has(quad(providedConsent, gc.hasStatus, gc.ConsentStatusDenied)) ||
            vc.has(quad(providedConsent, gc.hasStatus, gc.ConsentStatusExplicitlyGiven))) &&
        ((_a = getSingleObject(vc, providedConsent, gc.isProvidedTo, undefined, false)) === null || _a === void 0 ? void 0 : _a.termType) === "NamedNode");
}
function getResourceOwner(vc) {
    var _a;
    const credentialSubject = getCredentialSubject(vc);
    if (isGConsentAccessGrant(vc)) {
        return credentialSubject.value;
    }
    return (_a = getSingleObject(vc, getSingleObject(vc, credentialSubject, gc.hasConsent), gc.isConsentForDataSubject, "NamedNode", false)) === null || _a === void 0 ? void 0 : _a.value;
}
/**
 * Get the requestor asking for access to a resources with an Access Grant/Request.
 *
 * @example
 *
 * ```
 * const requestorWebId = getRequestor(accessGrant);
 * ```
 *
 * @param vc The Access Grant/Request
 * @returns The requestor WebID
 */
function getRequestor(vc) {
    const credentialSubject = getCredentialSubject(vc);
    const providedConsent = getSingleObject(vc, credentialSubject, gc.providedConsent, undefined, false);
    if (!providedConsent)
        return credentialSubject.value;
    return getSingleObject(vc, providedConsent, gc.isProvidedTo, "NamedNode")
        .value;
}
/**
 * Get the inbox of the requestor of an Access Grant/Request.
 *
 * @example
 *
 * ```
 * const inbox = getInbox(accessGrant);
 * ```
 *
 * @param vc The Access Grant/Request
 * @returns The requestors inbox
 */
function getInbox(vc) {
    try {
        return getSingleObject(vc, getCredentialSubject(vc), ldp.inbox, "NamedNode")
            .value;
    }
    catch (_a) {
        return undefined;
    }
}
/**
 * Get the access modes granted to a resources via an Access Grant/Request.
 *
 * @example
 *
 * ```
 * const modes = getAccessModes(accessGrant);
 * ```
 *
 * @param vc The Access Grant/Request
 * @returns The access modes the grant recipient can exercise.
 */
function getAccessModes(vc) {
    const consent = getConsent(vc);
    return {
        read: vc.has(quad(consent, acl.mode, acl.Read, defaultGraph())),
        write: vc.has(quad(consent, acl.mode, acl.Write, defaultGraph())),
        append: vc.has(quad(consent, acl.mode, acl.Append, defaultGraph())),
    };
}
const shorthand = {
    "http://www.w3.org/ns/solid/vc#SolidAccessRequest": "SolidAccessRequest",
    "http://www.w3.org/ns/solid/vc#SolidAccessDenial": "SolidAccessDenial",
    "http://www.w3.org/ns/solid/vc#SolidAccessGrant": "SolidAccessGrant",
    "https://www.w3.org/2018/credentials#VerifiableCredential": "VerifiableCredential",
    "https://www.w3.org/2018/credentials#VerifiablePresentation": "VerifiablePresentation",
};
/**
 * Get the VC types of an Access Grant/Request.
 *
 * @example
 *
 * ```
 * const types = getTypes(accessGrant);
 * ```
 *
 * @param vc The Access Grant/Request
 * @returns The VC types
 */
function getTypes(vc) {
    const results = [
        ...vc.match(namedNode(getId(vc)), TYPE, undefined, defaultGraph()),
    ].map((res) => res.object);
    const types = [];
    for (const result of results) {
        if (result.termType !== "NamedNode") {
            throw new Error(`Expected every type to be a Named Node, but found [${result.value}] with term type [${result.termType}]`);
        }
        types.push(result.value);
        if (result.value in shorthand) {
            types.push(shorthand[result.value]);
        }
    }
    return types;
}
/**
 * Check whether a given Access Grant applies recursively to child resources or not.
 *
 * @example
 *
 * ```
 * const isInherited = getInherit(accessGrant);
 * ```
 *
 * @param vc The Access Grant/Request
 * @returns true if the Grant applies to contained resources, false otherwise.
 */
function getInherit(vc) {
    return !vc.has(quad(getConsent(vc), INHERIT, literal("false", XSD_BOOLEAN), defaultGraph()));
}
/**
 * This class wraps all the accessor functions on a raw Access Grant JSON object.
 * It wraps all the supported Access Grants data models, namely GConsent.
 *
 * @example
 *
 * ```
 * const rawGrant = await getAccessGrantFromRedirectUrl(someUrl, { fetch: session.fetch });
 * const grant = new AccessGrant(grant);
 * const grantOwner = grant.getResourceOwner();
 * ```
 */
class AccessGrantWrapper {
    constructor(vc) {
        this.vc = vc;
    }
    getPurposes() {
        return getPurposes(this.vc);
    }
    getInbox() {
        return getInbox(this.vc);
    }
    getResources() {
        return getResources(this.vc);
    }
    getResourceOwner() {
        return getResourceOwner(this.vc);
    }
    getRequestor() {
        return getRequestor(this.vc);
    }
    getAccessModes() {
        return getAccessModes(this.vc);
    }
    getId() {
        return getId(this.vc);
    }
    getTypes() {
        return getTypes(this.vc);
    }
    getIssuanceDate() {
        return getIssuanceDate(this.vc);
    }
    getExpirationDate() {
        return getExpirationDate(this.vc);
    }
    getIssuer() {
        return getIssuer(this.vc);
    }
    getInherit() {
        return getInherit(this.vc);
    }
}

export { AccessGrantWrapper, getAccessModes, getConsent, getInbox, getInherit, getPurposes, getRequestor, getResourceOwner, getResources, getSingleObject, getTypes, isGConsentAccessGrant };
