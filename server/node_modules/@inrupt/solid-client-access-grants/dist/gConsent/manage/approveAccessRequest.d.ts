import type { UrlString } from "@inrupt/solid-client";
import type { DatasetWithId, VerifiableCredential, VerifiableCredentialBase } from "@inrupt/solid-client-vc";
import type { AccessBaseOptions, WithLegacyJsonFlag } from "../type/AccessBaseOptions";
import type { AccessGrant } from "../type/AccessGrant";
import type { AccessGrantParameters } from "../type/Parameter";
export type ApproveAccessRequestOverrides = Omit<Omit<AccessGrantParameters, "status">, "expirationDate"> & {
    expirationDate?: Date | null;
};
/**
 * Internal function. This is a stopgap until we have proper JSON-LD parsing.
 * It enforces the shape of the JSON returned by the issuer service, which may
 * vary while still serializing the same data.
 *
 * In particular, this transforms some literals into a one-value array.
 *
 * @hidden
 * @param accessGrant The grant returned by the VC issuer
 * @returns An equivalent JSON-LD document framed according to our typing.
 */
export declare function normalizeAccessGrant<T extends VerifiableCredentialBase>(accessGrant: T): T;
/**
 * Approve an access request. The content of the approved access request is provided
 * as a Verifiable Credential which properties may be overridden if necessary.
 *
 * @param requestVc The Verifiable Credential representing the Access Request. If
 * not conform to an Access Request, the function will throw.
 * @param requestOverride Elements overriding information from the provided Verifiable
 * Credential.
 * @param options Optional properties to customizes the access grant behavior. Options
 * include `updateAcr` which defaults to true. If this flag is set to true, the ACR
 * of the Resource will be updated when the access grant is approved. If this flag is
 * set to false, the ACR of the Resource will remain unchanged. This is an advanced
 * feature, and only users having a good understanding of the relationship between
 * Access Grants and ACRs should deviate from the default. Additional information is
 * available in [the ESS documentation](https://docs.inrupt.com/ess/latest/security/access-requests-grants/#acp)
 * @returns A Verifiable Credential representing the granted access.
 * @since 0.0.1.
 */
export declare function approveAccessRequest(requestVc: DatasetWithId | VerifiableCredential | URL | UrlString, requestOverride: Partial<ApproveAccessRequestOverrides>, options: AccessBaseOptions & {
    returnLegacyJsonld: false;
}): Promise<DatasetWithId>;
/**
 * Approve an access request. The content of the approved access request is provided
 * as a Verifiable Credential which properties may be overridden if necessary.
 *
 * @param requestVc The Verifiable Credential representing the Access Request. If
 * not conform to an Access Request, the function will throw.
 * @param requestOverride Elements overriding information from the provided Verifiable
 * Credential.
 * @param options Optional properties to customizes the access grant behavior. Options
 * include `updateAcr` which defaults to true. If this flag is set to true, the ACR
 * of the Resource will be updated when the access grant is approved. If this flag is
 * set to false, the ACR of the Resource will remain unchanged. This is an advanced
 * feature, and only users having a good understanding of the relationship between
 * Access Grants and ACRs should deviate from the default. Additional information is
 * available in [the ESS documentation](https://docs.inrupt.com/ess/latest/security/access-requests-grants/#acp)
 * @returns A Verifiable Credential representing the granted access.
 * @since 0.0.1.
 * @deprecated Set the options flag `returnLegacyJsonLd` to false, and prefer using the RDFJS interfaces.
 */
export declare function approveAccessRequest(requestVc: DatasetWithId | VerifiableCredential | URL | UrlString, requestOverride?: Partial<ApproveAccessRequestOverrides>, options?: AccessBaseOptions & {
    returnLegacyJsonld?: true;
}): Promise<AccessGrant>;
/**
 * Approve an access request. The content of the approved access request is provided
 * as a Verifiable Credential which properties may be overridden if necessary.
 *
 * @param requestVc The Verifiable Credential representing the Access Request. If
 * not conform to an Access Request, the function will throw.
 * @param requestOverride Elements overriding information from the provided Verifiable
 * Credential.
 * @param options Optional properties to customizes the access grant behavior. Options
 * include `updateAcr` which defaults to true. If this flag is set to true, the ACR
 * of the Resource will be updated when the access grant is approved. If this flag is
 * set to false, the ACR of the Resource will remain unchanged. This is an advanced
 * feature, and only users having a good understanding of the relationship between
 * Access Grants and ACRs should deviate from the default. Additional information is
 * available in [the ESS documentation](https://docs.inrupt.com/ess/latest/security/access-requests-grants/#acp)
 * @returns A Verifiable Credential representing the granted access.
 * @since 0.0.1.
 * @deprecated Set the options flag `returnLegacyJsonLd` to false, and prefer using the RDFJS interfaces.
 */
export declare function approveAccessRequest(requestVc: DatasetWithId | VerifiableCredential | URL | UrlString, requestOverride?: Partial<ApproveAccessRequestOverrides>, options?: AccessBaseOptions & {
    returnLegacyJsonld?: boolean;
}): Promise<DatasetWithId>;
/**
 * Approve an access request. The content of the approved access request is provided
 * as a set of claims, and no input Verifiable Credential is expected.
 *
 * @param requestVc A Verifiable Credential that would represent the Access Request if provided.
 * @param requestOverride Claims constructing the Access Grant.
 * @param options Optional properties to customise the access grant behaviour.
 * @returns A Verifiable Credential representing the granted access.
 * @since 0.0.1.
 */
export declare function approveAccessRequest(requestVc: undefined, requestOverride: ApproveAccessRequestOverrides, options: AccessBaseOptions & {
    returnLegacyJsonld: false;
}): Promise<DatasetWithId>;
/**
 * Approve an access request. The content of the approved access request is provided
 * as a set of claims, and no input Verifiable Credential is expected.
 *
 * @param requestVc A Verifiable Credential that would represent the Access Request if provided.
 * @param requestOverride Claims constructing the Access Grant.
 * @param options Optional properties to customise the access grant behaviour.
 * @returns A Verifiable Credential representing the granted access.
 * @since 0.0.1.
 * @deprecated Set the options flag `returnLegacyJsonLd` to false, and prefer using the RDFJS interfaces.
 */
export declare function approveAccessRequest(requestVc: undefined, requestOverride: ApproveAccessRequestOverrides, options?: AccessBaseOptions & {
    returnLegacyJsonld?: true;
}): Promise<AccessGrant>;
/**
 * Approve an access request. The content of the approved access request is provided
 * as a set of claims, and no input Verifiable Credential is expected.
 *
 * @param requestVc A Verifiable Credential that would represent the Access Request if provided.
 * @param requestOverride Claims constructing the Access Grant.
 * @param options Optional properties to customise the access grant behaviour.
 * @returns A Verifiable Credential representing the granted access.
 * @since 0.0.1.
 * @deprecated Set the options flag `returnLegacyJsonLd` to false, and prefer using the RDFJS interfaces.
 */
export declare function approveAccessRequest(requestVc: undefined, requestOverride: ApproveAccessRequestOverrides, options?: AccessBaseOptions & WithLegacyJsonFlag): Promise<DatasetWithId>;
export default approveAccessRequest;
export type { UrlString, VerifiableCredential };
