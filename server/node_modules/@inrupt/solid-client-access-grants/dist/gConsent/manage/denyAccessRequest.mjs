import { gc, solidVc } from '../../common/constants.mjs';
import { CREDENTIAL_TYPE_ACCESS_DENIAL } from '../constants.mjs';
import { initializeGrantParameters } from '../util/initializeGrantParameters.mjs';
import { getGrantBody, issueAccessVc } from '../util/issueAccessVc.mjs';
import { normalizeAccessGrant } from './approveAccessRequest.mjs';
import { getBaseAccess } from '../util/getBaseAccessVerifiableCredential.mjs';

//
// Copyright Inrupt Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
// Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
async function denyAccessRequest(vc, options) {
    const baseVc = await getBaseAccess(vc, options !== null && options !== void 0 ? options : {}, solidVc.SolidAccessRequest);
    const internalOptions = initializeGrantParameters(baseVc);
    const denialBody = getGrantBody({
        access: internalOptions.access,
        requestor: internalOptions.requestor,
        resources: internalOptions.resources,
        requestorInboxUrl: internalOptions.requestorInboxUrl,
        status: gc.ConsentStatusExplicitlyGiven.value,
        purpose: internalOptions.purpose,
        // denyAccessRequest doesn't take an override, so the expiration date
        // cannot be null.
        expirationDate: internalOptions.expirationDate,
    });
    denialBody.type = [CREDENTIAL_TYPE_ACCESS_DENIAL];
    denialBody.credentialSubject.providedConsent.hasStatus =
        gc.ConsentStatusDenied.value;
    return issueAccessVc(denialBody, {
        ...options,
        normalize: normalizeAccessGrant,
    });
}

export { denyAccessRequest as default, denyAccessRequest };
