import type { UrlString } from "@inrupt/solid-client";
import type { DatasetWithId } from "@inrupt/solid-client-vc";
import type { AccessRequest } from "../type/AccessRequest";
/**
 * Fetch the Access Request from the given URL.
 *
 * @param url The URL of the Access Request.
 * @param options Optional properties to customise the behaviour:
 * - fetch: an authenticated fetch function. If not provided, the default session
 * from @inrupt/solid-client-authn-browser will be used if available.
 * @returns An Access Request.
 * @since 2.4.0
 */
export declare function getAccessRequest(url: UrlString | URL, options: {
    fetch?: typeof fetch;
    returnLegacyJsonld: false;
}): Promise<DatasetWithId>;
/**
 * Fetch the Access Request from the given URL.
 *
 * @param url The URL of the Access Request.
 * @param options Optional properties to customise the behaviour:
 * - fetch: an authenticated fetch function. If not provided, the default session
 * from @inrupt/solid-client-authn-browser will be used if available.
 * @returns An Access Request.
 * @since 2.4.0
 * @deprecated Use RDFJS API instead of relying on the JSON structure by setting `returnLegacyJsonld` to false
 */
export declare function getAccessRequest(url: UrlString | URL, options?: {
    fetch?: typeof fetch;
    returnLegacyJsonld?: true;
}): Promise<AccessRequest>;
/**
 * Fetch the Access Request from the given URL.
 *
 * @param url The URL of the Access Request.
 * @param options Optional properties to customise the behaviour:
 * - fetch: an authenticated fetch function. If not provided, the default session
 * from @inrupt/solid-client-authn-browser will be used if available.
 * @returns An Access Request.
 * @since 2.4.0
 */
export declare function getAccessRequest(url: UrlString | URL, options?: {
    fetch?: typeof fetch;
    returnLegacyJsonld?: boolean;
}): Promise<DatasetWithId>;
export default getAccessRequest;
