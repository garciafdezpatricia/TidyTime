import type { UrlString } from "@inrupt/solid-client";
import type { DatasetWithId } from "@inrupt/solid-client-vc";
import type { AccessRequest } from "../type/AccessRequest";
/**
 * Get the Access Request out of the incoming redirect from the Access Management app.
 *
 * @param redirectUrl The URL the user has been redirected to from the access
 * management app.
 * @param options Optional properties to customise the behaviour:
 * - fetch: an authenticated fetch function. If not provided, the default session
 * from @inrupt/solid-client-authn-browser will be used if available.
 * @returns An Access Request, and the URL to which the corresponding grant should
 * be sent when redirecting the resource owner back to the requestor.
 * @since 0.5.0
 */
export declare function getAccessRequestFromRedirectUrl(redirectUrl: UrlString | URL, options: {
    fetch?: typeof fetch;
    returnLegacyJsonld: false;
}): Promise<{
    accessRequest: DatasetWithId;
    requestorRedirectUrl: UrlString;
}>;
/**
 * Get the Access Request out of the incoming redirect from the Access Management app.
 *
 * @param redirectUrl The URL the user has been redirected to from the access
 * management app.
 * @param options Optional properties to customise the behaviour:
 * - fetch: an authenticated fetch function. If not provided, the default session
 * from @inrupt/solid-client-authn-browser will be used if available.
 * @returns An Access Request, and the URL to which the corresponding grant should
 * be sent when redirecting the resource owner back to the requestor.
 * @since 0.5.0
 * @deprecated Use RDFJS API
 */
export declare function getAccessRequestFromRedirectUrl(redirectUrl: UrlString | URL, options?: {
    fetch?: typeof fetch;
    returnLegacyJsonld?: true;
}): Promise<{
    accessRequest: AccessRequest;
    requestorRedirectUrl: UrlString;
}>;
/**
 * Get the Access Request out of the incoming redirect from the Access Management app.
 *
 * @param redirectUrl The URL the user has been redirected to from the access
 * management app.
 * @param options Optional properties to customise the behaviour:
 * - fetch: an authenticated fetch function. If not provided, the default session
 * from @inrupt/solid-client-authn-browser will be used if available.
 * @returns An Access Request, and the URL to which the corresponding grant should
 * be sent when redirecting the resource owner back to the requestor.
 * @since 0.5.0
 */
export declare function getAccessRequestFromRedirectUrl(redirectUrl: UrlString | URL, options?: {
    fetch?: typeof fetch;
    returnLegacyJsonld?: boolean;
}): Promise<{
    accessRequest: DatasetWithId;
    requestorRedirectUrl: UrlString;
}>;
export default getAccessRequestFromRedirectUrl;
