import { REDIRECT_URL_PARAM_NAME, REQUEST_VC_URL_PARAM_NAME } from '../discover/redirectToAccessManagementUi.mjs';
import { getAccessRequest } from './getAccessRequest.mjs';

//
// Copyright Inrupt Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
// Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
function getSearchParam(url, param) {
    const value = url.searchParams.get(param);
    if (value === null) {
        throw new Error(`The provided redirect URL [${url.toString()}] is missing the expected [${param}] query parameter`);
    }
    return value;
}
async function getAccessRequestFromRedirectUrl(redirectUrl, options) {
    const redirectUrlObj = typeof redirectUrl === "string" ? new URL(redirectUrl) : redirectUrl;
    // Get the URL where the requestor expects the user to be redirected with
    // the grant.
    const requestorRedirectUrl = getSearchParam(redirectUrlObj, REDIRECT_URL_PARAM_NAME);
    // Get the Access Request IRI.
    const accessRequestIri = getSearchParam(redirectUrlObj, REQUEST_VC_URL_PARAM_NAME);
    return {
        accessRequest: await getAccessRequest(accessRequestIri, options),
        requestorRedirectUrl,
    };
}

export { getAccessRequestFromRedirectUrl as default, getAccessRequestFromRedirectUrl };
