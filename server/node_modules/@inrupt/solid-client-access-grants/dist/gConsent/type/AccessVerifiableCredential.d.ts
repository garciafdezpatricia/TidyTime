import type { UrlString } from "@inrupt/solid-client";
import type { ACCESS_GRANT_CONTEXT_DEFAULT, GC_CONSENT_STATUS_DENIED_ABBREV, GC_CONSENT_STATUS_EXPLICITLY_GIVEN_ABBREV, GC_CONSENT_STATUS_REQUESTED_ABBREV } from "../constants";
import type { ResourceAccessMode } from "../../type/ResourceAccessMode";
import type { GConsentStatus } from "./GConsentStatus";
import type { AccessCredentialType } from "./AccessCredentialType";
import type { gc } from "../../common/constants";
export type GConsentAttributes = {
    mode: ResourceAccessMode[];
    hasStatus: GConsentStatus;
    forPersonalData: UrlString[];
    forPurpose?: UrlString[];
    inherit?: boolean;
};
export type GConsentGrantAttributes = GConsentAttributes & {
    isProvidedTo: UrlString;
};
export type GConsentRequestAttributes = GConsentAttributes & {
    isConsentForDataSubject?: UrlString;
};
export type CredentialSubject = {
    id: UrlString;
    inbox: UrlString | undefined;
    hasConsent?: GConsentRequestAttributes;
    providedConsent?: GConsentGrantAttributes;
};
export type RequestCredentialSubject = Required<Omit<CredentialSubject, "providedConsent">>;
export type RequestCredentialSubjectPayload = Omit<RequestCredentialSubject, "id">;
export type GrantCredentialSubject = Required<Omit<CredentialSubject, "hasConsent">>;
export type GrantCredentialSubjectPayload = Omit<GrantCredentialSubject, "id">;
export type BaseAccessVcBody = {
    "@context": typeof ACCESS_GRANT_CONTEXT_DEFAULT;
    type: AccessCredentialType[];
    credentialSubject: RequestCredentialSubject | GrantCredentialSubject | Omit<RequestCredentialSubject, "id"> | Omit<GrantCredentialSubject, "id">;
    issuanceDate?: string;
    expirationDate?: string;
};
export type BaseRequestBody = BaseAccessVcBody & {
    credentialSubject: RequestCredentialSubject;
};
export type BaseGrantBody = BaseAccessVcBody & {
    credentialSubject: GrantCredentialSubject;
};
export type BaseRequestPayload = BaseAccessVcBody & {
    credentialSubject: Omit<RequestCredentialSubject, "id">;
};
export type BaseGrantPayload = BaseAccessVcBody & {
    credentialSubject: Omit<GrantCredentialSubject, "id">;
};
export type AccessRequestBody = BaseRequestBody & {
    credentialSubject: {
        hasConsent: {
            hasStatus: typeof gc.ConsentStatusRequested.value | typeof GC_CONSENT_STATUS_REQUESTED_ABBREV;
        };
    };
};
export type AccessDeniedBody = BaseGrantBody & {
    credentialSubject: {
        providedConsent: {
            hasStatus: typeof gc.ConsentStatusDenied.value;
        };
    };
};
export type AccessGrantBody = BaseGrantBody & {
    credentialSubject: {
        providedConsent: {
            hasStatus: typeof gc.ConsentStatusExplicitlyGiven.value | typeof gc.ConsentStatusDenied.value | typeof GC_CONSENT_STATUS_EXPLICITLY_GIVEN_ABBREV | typeof GC_CONSENT_STATUS_DENIED_ABBREV;
            isProvidedTo: UrlString;
        };
    };
};
export type AccessVerifiableCredentialBody = AccessRequestBody | AccessDeniedBody | AccessGrantBody;
