import { DataFactory } from 'n3';
import { ACCESS_STATUS } from '../constants.mjs';
import { RESOURCE_ACCESS_MODE } from '../../type/ResourceAccessMode.mjs';
import { isUnknownObject } from './isUnknownObject.mjs';
import { acl, gc } from '../../common/constants.mjs';

//
// Copyright Inrupt Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
// Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
const { defaultGraph } = DataFactory;
function isResourceAccessModeArray(x) {
    return Array.isArray(x) && x.every((y) => RESOURCE_ACCESS_MODE.has(y));
}
function isGConsentStatus(x) {
    return typeof x === "string" && ACCESS_STATUS.has(x);
}
// TODO: Discuss a strongly typed UrlString guard (as a team).
function isStringArray(x) {
    return Array.isArray(x) && x.every((y) => typeof y === "string");
}
/**
 * @deprecated This function checks structural assumptions about the JSON-LD presentation of the VC,
 * which is not recommended. Use the RDFJS API that is now provided instead.
 */
function isGConsentAttributes(x) {
    return (isUnknownObject(x) &&
        isResourceAccessModeArray(x.mode) &&
        isGConsentStatus(x.hasStatus) &&
        isStringArray(x.forPersonalData));
}
function isRdfjsGConsentAttributes(dataset, 
// eslint-disable-next-line camelcase
consent) {
    // isResourceAccessModeArray
    const modeQuads = dataset.match(consent, acl.mode, null, defaultGraph());
    if (modeQuads.size === 0) {
        return false;
    }
    for (const { object: mode } of modeQuads) {
        if (![acl.Append, acl.Read, acl.Write].some((allowedMode) => allowedMode.equals(mode))) {
            return false;
        }
    }
    // isGConsentStatus
    const statuses = [
        ...dataset.match(consent, gc.hasStatus, null, defaultGraph()),
    ];
    if (statuses.length !== 1 ||
        ![
            gc.ConsentStatusDenied,
            gc.ConsentStatusExplicitlyGiven,
            gc.ConsentStatusRequested,
        ].some((e) => e.equals(statuses[0].object))) {
        return false;
    }
    const forPersonalData = dataset.match(consent, gc.forPersonalData, null, defaultGraph());
    if (forPersonalData.size === 0) {
        throw new Error("No Personal Data specified for Access Grant");
    }
    for (const { object } of forPersonalData) {
        if (object.termType !== "NamedNode") {
            return false;
        }
    }
    return true;
}

export { isGConsentAttributes, isRdfjsGConsentAttributes };
