import type { VerifiableCredential, VerifiableCredentialBase, DatasetWithId } from "@inrupt/solid-client-vc";
import type { AccessBaseOptions } from "../type/AccessBaseOptions";
import type { AccessGrantBody, AccessRequestBody, BaseGrantBody, BaseRequestBody } from "../type/AccessVerifiableCredential";
import type { AccessRequestParameters, AccessGrantParameters } from "../type/Parameter";
export declare function getRequestBody(params: AccessRequestParameters): AccessRequestBody;
export declare function getGrantBody(params: AccessGrantParameters): AccessGrantBody;
export declare function issueAccessVc(vcBody: BaseRequestBody | BaseGrantBody, options: AccessBaseOptions & {
    returnLegacyJsonld: false;
    normalize?: (arg: VerifiableCredentialBase) => VerifiableCredentialBase;
}): Promise<DatasetWithId>;
/**
 * @deprecated Use RDFJS API by setting returnLegacyJsonld: false
 */
export declare function issueAccessVc(vcBody: BaseRequestBody | BaseGrantBody, options?: AccessBaseOptions & {
    returnLegacyJsonld?: true;
    normalize?: (arg: VerifiableCredentialBase) => VerifiableCredentialBase;
}): Promise<VerifiableCredential>;
/**
 * @deprecated Use RDFJS API by setting returnLegacyJsonld: false
 */
export declare function issueAccessVc(vcBody: BaseRequestBody | BaseGrantBody, options?: AccessBaseOptions & {
    returnLegacyJsonld?: boolean;
    normalize?: (arg: VerifiableCredentialBase) => VerifiableCredentialBase;
}): Promise<DatasetWithId>;
