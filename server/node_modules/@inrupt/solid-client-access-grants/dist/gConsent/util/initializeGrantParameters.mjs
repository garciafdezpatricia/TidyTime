import { getCredentialSubject, getIssuanceDate, getExpirationDate } from '@inrupt/solid-client-vc';
import { DataFactory } from 'n3';
import { INHERIT, XSD_BOOLEAN } from '../../common/constants.mjs';
import { getAccessModes, getResources, getInbox, getPurposes, getConsent } from '../../common/getters.mjs';

//
// Copyright Inrupt Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
// Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
const { quad, literal, defaultGraph } = DataFactory;
const inheritQuad = (subject, inherit) => quad(subject, INHERIT, literal(inherit ? "true" : "false", XSD_BOOLEAN), defaultGraph());
function getInherit(vc) {
    if (vc.has(inheritQuad(getConsent(vc), true))) {
        return true;
    }
    if (vc.has(inheritQuad(getConsent(vc), false))) {
        return false;
    }
    return undefined;
}
function initializeGrantParameters(requestVc, requestOverride) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const resultGrant = requestVc === undefined
        ? requestOverride
        : {
            requestor: (_a = requestOverride === null || requestOverride === void 0 ? void 0 : requestOverride.requestor) !== null && _a !== void 0 ? _a : getCredentialSubject(requestVc).value,
            access: (_b = requestOverride === null || requestOverride === void 0 ? void 0 : requestOverride.access) !== null && _b !== void 0 ? _b : getAccessModes(requestVc),
            resources: (_c = requestOverride === null || requestOverride === void 0 ? void 0 : requestOverride.resources) !== null && _c !== void 0 ? _c : getResources(requestVc),
            requestorInboxUrl: (_d = requestOverride === null || requestOverride === void 0 ? void 0 : requestOverride.requestorInboxUrl) !== null && _d !== void 0 ? _d : getInbox(requestVc),
            issuanceDate: (_e = requestOverride === null || requestOverride === void 0 ? void 0 : requestOverride.issuanceDate) !== null && _e !== void 0 ? _e : getIssuanceDate(requestVc),
            purpose: (_f = requestOverride === null || requestOverride === void 0 ? void 0 : requestOverride.purpose) !== null && _f !== void 0 ? _f : getPurposes(requestVc),
            expirationDate: (_g = requestOverride === null || requestOverride === void 0 ? void 0 : requestOverride.expirationDate) !== null && _g !== void 0 ? _g : getExpirationDate(requestVc),
            inherit: (_h = requestOverride === null || requestOverride === void 0 ? void 0 : requestOverride.inherit) !== null && _h !== void 0 ? _h : getInherit(requestVc),
        };
    if ((requestOverride === null || requestOverride === void 0 ? void 0 : requestOverride.expirationDate) === null) {
        resultGrant.expirationDate = undefined;
    }
    return resultGrant;
}

export { initializeGrantParameters };
