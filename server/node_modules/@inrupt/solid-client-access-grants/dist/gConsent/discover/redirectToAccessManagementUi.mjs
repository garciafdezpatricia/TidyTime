import { getBaseAccess } from '../util/getBaseAccessVerifiableCredential.mjs';
import { getSessionFetch } from '../../common/util/getSessionFetch.mjs';
import { getAccessManagementUi, getAccessManagementUiFromWellKnown } from './getAccessManagementUi.mjs';
import { redirectWithParameters } from '../util/redirect.mjs';
import '@inrupt/solid-client-vc';
import { getResources } from '../../common/getters.mjs';

//
// Copyright Inrupt Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
// Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
const REQUEST_VC_URL_PARAM_NAME = "requestVcUrl";
const REDIRECT_URL_PARAM_NAME = "redirectUrl";
async function discoverAccessManagementUi(options) {
    const authFetch = await getSessionFetch({ fetch: options.fetch });
    let accessManagementUi;
    if (options.resourceOwner) {
        accessManagementUi = await getAccessManagementUi(options.resourceOwner, {
            fetch: authFetch,
        });
    }
    else {
        accessManagementUi = await getAccessManagementUiFromWellKnown(options.resourceUrl, { fetch: authFetch });
    }
    return accessManagementUi !== null && accessManagementUi !== void 0 ? accessManagementUi : options.fallbackUi;
}
/**
 * Redirects the application to a resource owner's preferred access management
 * UI.
 *
 * @param accessRequestVc The VC containing the Access Request to a resource.
 * @param redirectUrl The URL where the user should be redirected back after
 * having granted access.
 * @param options If you are in a NodeJS environment, you must specify a
 * callback to handle the redirection.
 * @since 0.4.0
 */
async function redirectToAccessManagementUi(accessRequestVc, redirectUrl, options = {}) {
    const fallbackUi = options.fallbackAccessManagementUi;
    const requestVc = await getBaseAccess(accessRequestVc, {
        fetch: options.fetch,
    });
    const [resourceUrl] = getResources(requestVc);
    const accessManagementUi = await discoverAccessManagementUi({
        resourceUrl,
        resourceOwner: options.resourceOwner,
        fallbackUi,
        fetch: options.fetch,
    });
    if (accessManagementUi === undefined) {
        throw new Error(`Cannot discover access management UI URL for [${resourceUrl}]${options.resourceOwner ? `, neither from [${options.resourceOwner}]` : ""}`);
    }
    return redirectWithParameters(accessManagementUi, {
        [`${REQUEST_VC_URL_PARAM_NAME}`]: encodeURI(requestVc.id),
        [`${REDIRECT_URL_PARAM_NAME}`]: encodeURI(typeof redirectUrl === "string" ? redirectUrl : redirectUrl.href),
    }, options);
}

export { REDIRECT_URL_PARAM_NAME, REQUEST_VC_URL_PARAM_NAME, redirectToAccessManagementUi };
