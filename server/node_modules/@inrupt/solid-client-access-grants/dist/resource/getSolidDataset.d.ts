import type { UrlString } from "@inrupt/solid-client";
import type { DatasetWithId, VerifiableCredential } from "@inrupt/solid-client-vc";
import type { FetchOptions } from "../type/FetchOptions";
/**
 * Retrieve a Dataset from a Solid Pod using an Access Grant to prove the caller
 * is authorized to access the target dataset.
 *
 * @see [@inrupt/solid-client's
 * getSolidDataset](https://docs.inrupt.com/developer-tools/api/javascript/solid-client/modules/resource_solidDataset.html#getsoliddataset)
 *
 * @param datasetUrl The URL of the target dataset.
 * @param accessGrant The Access Grant VC proving the caller is authorized.
 * @param options Optional properties to customise the request behaviour.
 * @returns A promise that resolves to a SolidDataset if successful, and that
 * rejects otherwise.
 * @since 0.4.0
 */
export declare function getSolidDataset(datasetUrl: UrlString, accessGrant: VerifiableCredential | DatasetWithId, options?: FetchOptions): Promise<Readonly<{
    type: "Dataset";
    graphs: Readonly<Record<string, Readonly<Record<string, Readonly<{
        type: "Subject";
        url: string;
        predicates: Readonly<Record<string, Readonly<Partial<{
            literals: Readonly<Record<string, readonly string[]>>;
            langStrings: Readonly<Record<string, readonly string[]>>;
            namedNodes: readonly string[];
            blankNodes: readonly (`_:${string}` | Readonly<Record<string, Readonly<Partial<any>>>>)[];
        }>>>>;
    }>>>> & {
        default: Readonly<Record<string, Readonly<{
            type: "Subject";
            url: string;
            predicates: Readonly<Record<string, Readonly<Partial<{
                literals: Readonly<Record<string, readonly string[]>>;
                langStrings: Readonly<Record<string, readonly string[]>>;
                namedNodes: readonly string[];
                blankNodes: readonly (`_:${string}` | Readonly<Record<string, Readonly<Partial<any>>>>)[];
            }>>>>;
        }>>>;
    }>;
}> & import("@inrupt/solid-client").WithResourceInfo & {
    internal_resourceInfo: {
        aclUrl?: string | undefined;
        contentLocation?: string | undefined;
        linkedResources: import("@inrupt/solid-client/dist/interfaces").LinkedResourceUrlAll;
        location?: string | undefined;
        permissions?: {
            user: import("@inrupt/solid-client").Access;
            public: import("@inrupt/solid-client").Access;
        } | undefined;
    };
}>;
