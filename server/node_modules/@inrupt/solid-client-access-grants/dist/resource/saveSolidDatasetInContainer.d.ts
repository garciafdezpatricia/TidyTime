import type { UrlString, SolidDataset } from "@inrupt/solid-client";
import type { DatasetWithId, VerifiableCredential } from "@inrupt/solid-client-vc";
import type { SaveInContainerOptions } from "../type/SaveInContainerOptions";
/**
 * Given a SolidDataset, store it in a Solid Pod as a new Resource inside a Container.
 *
 * The Container at the given URL should already exist; if it does not, you can initialise it first
 * using createContainerAt, or directly save the SolidDataset at the desired location using
 * {@link resource.saveSolidDatasetAt}.
 *
 * This function is primarily useful if the current user has not been granted
 * access to change existing files in a Container, but is allowed to add new
 * files; in other words, they have been granted Append, but not Write access to
 * a Container. This is useful in situations where someone wants to allow others
 * to, for example, send notifications to their Pod, but not to view or delete
 * existing notifications. You can pass a suggestion for the new Resource's
 * name, but the server may decide to give it another name â€” for example, if a
 * Resource with that name already exists inside the given Container. If the
 * user does have access to write directly to a given location,
 * {@link resource.saveSolidDatasetAt} will do the job just fine, and does not require the
 * parent Container to exist in advance.
 *
 * @see [@inrupt/solid-client's
 * saveSolidDatasetInContainer](https://docs.inrupt.com/developer-tools/api/javascript/solid-client/modules/resource_solidDataset.html#savesoliddatasetincontainer)
 *
 *
 * @param containerUrl URL of the Container in which to create a new Resource.
 * @param solidDataset The SolidDataset to save to a new Resource in the given Container.
 * @param accessGrant The Access Grant that would allow the Agent/Application to perform this operation.
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * @returns A Promise resolving to a SolidDataset containing the saved data. The Promise rejects if the save failed.
 * @since 2.1.0
 */
export declare function saveSolidDatasetInContainer(containerUrl: UrlString, solidDataset: SolidDataset, accessGrant: VerifiableCredential | DatasetWithId, options: SaveInContainerOptions): Promise<Readonly<{
    type: "Dataset";
    graphs: Readonly<Record<string, Readonly<Record<string, Readonly<{
        type: "Subject";
        url: string;
        predicates: Readonly<Record<string, Readonly<Partial<{
            literals: Readonly<Record<string, readonly string[]>>;
            langStrings: Readonly<Record<string, readonly string[]>>;
            namedNodes: readonly string[];
            blankNodes: readonly (`_:${string}` | Readonly<Record<string, Readonly<Partial<any>>>>)[];
        }>>>>;
    }>>>> & {
        default: Readonly<Record<string, Readonly<{
            type: "Subject";
            url: string;
            predicates: Readonly<Record<string, Readonly<Partial<{
                literals: Readonly<Record<string, readonly string[]>>;
                langStrings: Readonly<Record<string, readonly string[]>>;
                namedNodes: readonly string[];
                blankNodes: readonly (`_:${string}` | Readonly<Record<string, Readonly<Partial<any>>>>)[];
            }>>>>;
        }>>>;
    }>;
}> & import("@inrupt/solid-client").WithResourceInfo>;
