import type { DatasetWithId } from "@inrupt/solid-client-vc";
import { getCredentialSubject, getExpirationDate, getId, getIssuanceDate, getIssuer } from "@inrupt/solid-client-vc";
import type { BlankNode, DatasetCore, Literal, NamedNode, Term } from "@rdfjs/types";
import type { AccessGrantGConsent } from "../gConsent/type/AccessGrant";
import type { AccessModes } from "../type/AccessModes";
export declare function getSingleObject(vc: DatasetCore, subject: Term, predicate: Term, type: "NamedNode", required: false): NamedNode | undefined;
export declare function getSingleObject(vc: DatasetCore, subject: Term, predicate: Term, type: "Literal", required: false): Literal | undefined;
export declare function getSingleObject(vc: DatasetCore, subject: Term, predicate: Term, type: "BlankNode"): BlankNode;
export declare function getSingleObject(vc: DatasetCore, subject: Term, predicate: Term, type: "Literal"): Literal;
export declare function getSingleObject(vc: DatasetCore, subject: Term, predicate: Term): NamedNode | BlankNode;
export declare function getSingleObject(vc: DatasetCore, subject: Term, predicate: Term, type: undefined, required: false): NamedNode | BlankNode | undefined;
export { getCredentialSubject, getExpirationDate, getId, getIssuanceDate, getIssuer, };
/**
 * Get the resources to which an Access Grant/Request applies.
 *
 * @example
 *
 * ```
 * const resources = getResources(accessGrant);
 * ```
 *
 * @param vc The Access Grant/Request
 * @returns The resources IRIs
 */
export declare function getResources(vc: DatasetWithId): string[];
/**
 * Get the purposes for which an Access Grant/Request applies.
 *
 * @example
 *
 * ```
 * const purposes = getPurposes(accessGrant);
 * ```
 *
 * @param vc The Access Grant/Request
 * @returns The purpose IRIs
 */
export declare function getPurposes(vc: DatasetWithId): string[];
export declare function isGConsentAccessGrant(vc: DatasetWithId): boolean;
/**
 * Get the resource owner granting access to their resources from an Access Grant/Request.
 *
 * @example
 *
 * ```
 * const ownerWebId = getResourceOwner(accessGrant);
 * ```
 *
 * @param vc The Access Grant/Request
 * @returns The resource owner WebID
 */
export declare function getResourceOwner(vc: AccessGrantGConsent): string;
export declare function getResourceOwner(vc: DatasetWithId): string | undefined;
/**
 * Get the requestor asking for access to a resources with an Access Grant/Request.
 *
 * @example
 *
 * ```
 * const requestorWebId = getRequestor(accessGrant);
 * ```
 *
 * @param vc The Access Grant/Request
 * @returns The requestor WebID
 */
export declare function getRequestor(vc: DatasetWithId): string;
/**
 * Get the inbox of the requestor of an Access Grant/Request.
 *
 * @example
 *
 * ```
 * const inbox = getInbox(accessGrant);
 * ```
 *
 * @param vc The Access Grant/Request
 * @returns The requestors inbox
 */
export declare function getInbox(vc: DatasetWithId): string | undefined;
/**
 * Get the access modes granted to a resources via an Access Grant/Request.
 *
 * @example
 *
 * ```
 * const modes = getAccessModes(accessGrant);
 * ```
 *
 * @param vc The Access Grant/Request
 * @returns The access modes the grant recipient can exercise.
 */
export declare function getAccessModes(vc: DatasetWithId): AccessModes;
/**
 * Get the VC types of an Access Grant/Request.
 *
 * @example
 *
 * ```
 * const types = getTypes(accessGrant);
 * ```
 *
 * @param vc The Access Grant/Request
 * @returns The VC types
 */
export declare function getTypes(vc: DatasetWithId): string[];
/**
 * Check whether a given Access Grant applies recursively to child resources or not.
 *
 * @example
 *
 * ```
 * const isInherited = getInherit(accessGrant);
 * ```
 *
 * @param vc The Access Grant/Request
 * @returns true if the Grant applies to contained resources, false otherwise.
 */
export declare function getInherit(vc: DatasetWithId): boolean;
/**
 * This class wraps all the accessor functions on a raw Access Grant JSON object.
 * It wraps all the supported Access Grants data models, namely GConsent.
 *
 * @example
 *
 * ```
 * const rawGrant = await getAccessGrantFromRedirectUrl(someUrl, { fetch: session.fetch });
 * const grant = new AccessGrant(grant);
 * const grantOwner = grant.getResourceOwner();
 * ```
 */
export declare class AccessGrantWrapper {
    private vc;
    constructor(vc: DatasetWithId);
    getPurposes(): ReturnType<typeof getResources>;
    getInbox(): ReturnType<typeof getInbox>;
    getResources(): ReturnType<typeof getResources>;
    getResourceOwner(): ReturnType<typeof getResourceOwner>;
    getRequestor(): ReturnType<typeof getRequestor>;
    getAccessModes(): ReturnType<typeof getAccessModes>;
    getId(): ReturnType<typeof getId>;
    getTypes(): ReturnType<typeof getTypes>;
    getIssuanceDate(): ReturnType<typeof getIssuanceDate>;
    getExpirationDate(): ReturnType<typeof getExpirationDate>;
    getIssuer(): ReturnType<typeof getIssuer>;
    getInherit(): ReturnType<typeof getInherit>;
}
