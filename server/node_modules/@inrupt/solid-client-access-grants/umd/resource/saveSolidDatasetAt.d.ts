import type { UrlString, SolidDataset } from "@inrupt/solid-client";
import type { DatasetWithId, VerifiableCredential } from "@inrupt/solid-client-vc";
import type { FetchOptions } from "../type/FetchOptions";
/**
 * Saves a Dataset in a Solid Pod using an Access Grant to prove the caller is
 * authorized to write or append to the dataset at the given dataset URL.
 *
 * ```{note} This function does not support saving a dataset if the
 * dataset does not yet exist, unlike its `@inrupt/solid-client`
 * counterpart.
 * ```
 *
 * @see [@inrupt/solid-client's
 * saveSolidDatasetAt](https://docs.inrupt.com/developer-tools/api/javascript/solid-client/modules/resource_solidDataset.html#savesoliddatasetat)
 *
 * @param datasetUrl The URL of the dataset to save.
 * @param accessGrant The Access Grant VC proving the caller is authorized.
 * @param options Optional properties to customise the request behaviour.
 * @returns A promise that resolves to a SolidDataset if successful, and that
 * rejects otherwise.
 * @since 0.4.0
 */
export declare function saveSolidDatasetAt<Dataset extends SolidDataset>(datasetUrl: UrlString, solidDataset: Dataset, accessGrant: VerifiableCredential | DatasetWithId, options?: FetchOptions): Promise<Dataset & import("@inrupt/solid-client").WithResourceInfo & {
    internal_resourceInfo: {
        aclUrl?: string | undefined;
        contentLocation?: string | undefined;
        linkedResources: import("@inrupt/solid-client/dist/interfaces").LinkedResourceUrlAll;
        location?: string | undefined;
        permissions?: {
            user: import("@inrupt/solid-client").Access;
            public: import("@inrupt/solid-client").Access;
        } | undefined;
    };
} & Readonly<{
    type: "Dataset";
    graphs: Readonly<Record<string, Readonly<Record<string, Readonly<{
        type: "Subject";
        url: string;
        predicates: Readonly<Record<string, Readonly<Partial<{
            literals: Readonly<Record<string, readonly string[]>>;
            langStrings: Readonly<Record<string, readonly string[]>>;
            namedNodes: readonly string[];
            blankNodes: readonly (`_:${string}` | Readonly<Record<string, Readonly<Partial<any>>>>)[];
        }>>>>;
    }>>>> & {
        default: Readonly<Record<string, Readonly<{
            type: "Subject";
            url: string;
            predicates: Readonly<Record<string, Readonly<Partial<{
                literals: Readonly<Record<string, readonly string[]>>;
                langStrings: Readonly<Record<string, readonly string[]>>;
                namedNodes: readonly string[];
                blankNodes: readonly (`_:${string}` | Readonly<Record<string, Readonly<Partial<any>>>>)[];
            }>>>>;
        }>>>;
    }>;
}> & {
    internal_changeLog: {
        additions: import("rdf-js").Quad[];
        deletions: import("rdf-js").Quad[];
    };
}>;
