/// <reference types="node" />
import type { File as NodeFile } from "buffer";
import type { UrlString, WithResourceInfo } from "@inrupt/solid-client";
import type { DatasetWithId, VerifiableCredential } from "@inrupt/solid-client-vc";
import type { FetchOptions } from "../type/FetchOptions";
/**
 * Retrieve a File from a Solid Pod using an Access Grant to prove the caller is
 * authorized to access the target resource.
 *
 * @see [@inrupt/solid-client's
 * getFile](https://docs.inrupt.com/developer-tools/api/javascript/solid-client/modules/resource_file.html#getfile)
 *
 * @param resourceUrl The URL of the target resource.
 * @param accessGrant The Access Grant VC proving the caller is authorized.
 * @param options Optional properties to customise the request behaviour.
 * @returns A promise that resolves to a File if successful, and that rejects
 * otherwise.
 * @since 0.4.0
 */
export declare function getFile(resourceUrl: UrlString, accessGrant: VerifiableCredential | DatasetWithId, options?: FetchOptions): Promise<Blob & WithResourceInfo & {
    internal_resourceInfo: {
        aclUrl?: string | undefined;
        contentLocation?: string | undefined;
        linkedResources: import("@inrupt/solid-client/dist/interfaces").LinkedResourceUrlAll;
        location?: string | undefined;
        permissions?: {
            user: import("@inrupt/solid-client").Access;
            public: import("@inrupt/solid-client").Access;
        } | undefined;
    };
}>;
/**
 * Overwrites the file using an Access Grant to prove the caller is authorized
 * to write to the given resource URL.
 *
 * ```{note} This function does not support saving a file if the file does not
 * yet exist, unlike its `@inrupt/solid-client` counterpart. To save a new file
 * in a container, you should use [saveFileInContainer](#savefileincontainer)
 * instead.
 * ```
 *
 * @see [@inrupt/solid-client's
 * overwriteFile](https://docs.inrupt.com/developer-tools/api/javascript/solid-client/modules/resource_file.html#overwritefile)
 *
 * @param resourceUrl The URL where the file is located.
 * @param file The file to be written.
 * @param accessGrant The Access Grant VC proving the caller is authorized.
 * @param options Optional properties to customise the request behaviour, or
 * override the Content-Type of the file.
 * @returns A promise that resolves to a File if successful, and that rejects
 * otherwise.
 * @since 1.1.0
 */
export declare function overwriteFile<T extends File | NodeFile | Blob>(resourceUrl: UrlString, file: T, accessGrant: VerifiableCredential | DatasetWithId, options?: FetchOptions & {
    contentType?: string;
}): Promise<T & WithResourceInfo>;
/**
 * Saves a file in the given container URL using an Access Grant to prove the caller is
 * authorized to save a file in the given container.
 *
 * @see [@inrupt/solid-client's
 * saveFileInContainer](https://docs.inrupt.com/developer-tools/api/javascript/solid-client/modules/resource_file.html#savefileincontainer)
 *
 * @param containerUrl The container URL where the file is to be saved.
 * @param file The file to be written.
 * @param accessGrant The Access Grant VC proving the caller is authorized.
 * @param options Optional properties to customise the request behaviour, or override the Content-Type of the file.
 * @returns A promise that resolves to a File if successful, and that rejects
 * otherwise.
 * @since 1.1.0
 */
export declare function saveFileInContainer<T extends File | NodeFile | Blob>(containerUrl: UrlString, file: T, accessGrant: VerifiableCredential | DatasetWithId, options?: FetchOptions & {
    contentType?: string;
    slug?: string;
}): Promise<T & WithResourceInfo>;
