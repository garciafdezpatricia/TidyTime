import type { UrlString, WebId } from "@inrupt/solid-client";
import type { DatasetWithId, VerifiableCredential } from "@inrupt/solid-client-vc";
import type { FetchOptions } from "../../type/FetchOptions";
import type { RedirectOptions } from "../../type/RedirectOptions";
export declare const REQUEST_VC_URL_PARAM_NAME = "requestVcUrl";
export declare const REDIRECT_URL_PARAM_NAME = "redirectUrl";
/**
 * Optional parameters for the [[redirectToAccessManagementUi]] method:
 *
 * - `fetch?`: Pass in a function with a signature compatible with the WHATWG
 *   Fetch API, which will be used to make HTTP requests. Primarily useful when
 *   requests need to be authenticated. When
 *   `@inrupt/solid-client-authn-browser` is available and this property is not
 *   set, `fetch` will be imported from there. Otherwise, the HTTP requests will
 *   be unauthenticated.
 * - `redirectCallback?`: For use in a non-browser environment, this must be
 *   provided by the user in order to handle the redirect URL, since setting
 *   `window.location.href` is not an option.
 *
 * @since 0.4.0
 */
export type RedirectToAccessManagementUiOptions = RedirectOptions & FetchOptions & {
    resourceOwner?: WebId;
    /**
     * @since 0.4.0
     */
    fallbackAccessManagementUi?: UrlString;
};
/**
 * Redirects the application to a resource owner's preferred access management
 * UI.
 *
 * @param accessRequestVc The VC containing the Access Request to a resource.
 * @param redirectUrl The URL where the user should be redirected back after
 * having granted access.
 * @param options If you are in a NodeJS environment, you must specify a
 * callback to handle the redirection.
 * @since 0.4.0
 */
export declare function redirectToAccessManagementUi(accessRequestVc: DatasetWithId | VerifiableCredential | UrlString | URL, redirectUrl: UrlString | URL, options?: RedirectToAccessManagementUiOptions): Promise<void>;
