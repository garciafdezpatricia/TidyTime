import type { UrlString } from "@inrupt/solid-client";
import type { DatasetWithId } from "@inrupt/solid-client-vc";
import type { AccessBaseOptions } from "../type/AccessBaseOptions";
import type { AccessGrant } from "../type/AccessGrant";
/**
 * Retrieve the Access Grant associated to the given URL.
 *
 * @param accessGrantVcUrl The URL of an access grant, with or without consent.
 * @param options Optional properties to customise the request behaviour.
 * @returns The Verifiable Credential associated to the given IRI, if it is an access grant. Throws otherwise.
 * @since 0.4.0
 */
export declare function getAccessGrant(accessGrantVcUrl: UrlString | URL, options: AccessBaseOptions & {
    returnLegacyJsonld: false;
}): Promise<DatasetWithId>;
/**
 * Retrieve the Access Grant associated to the given URL.
 *
 * @param accessGrantVcUrl The URL of an access grant, with or without consent.
 * @param options Optional properties to customise the request behaviour.
 * @returns The Verifiable Credential associated to the given IRI, if it is an access grant. Throws otherwise.
 * @since 0.4.0
 * @deprecated set returnLegacyJsonld: false and use RDFJS API
 */
export declare function getAccessGrant(accessGrantVcUrl: UrlString | URL, options?: AccessBaseOptions & {
    returnLegacyJsonld?: true;
}): Promise<AccessGrant>;
/**
 * Retrieve the Access Grant associated to the given URL.
 *
 * @param accessGrantVcUrl The URL of an access grant, with or without consent.
 * @param options Optional properties to customise the request behaviour.
 * @returns The Verifiable Credential associated to the given IRI, if it is an access grant. Throws otherwise.
 * @since 0.4.0
 * @deprecated set returnLegacyJsonld: false and use RDFJS API
 */
export declare function getAccessGrant(accessGrantVcUrl: UrlString | URL, options?: AccessBaseOptions & {
    returnLegacyJsonld?: boolean;
}): Promise<DatasetWithId>;
