import type { UrlString } from "@inrupt/solid-client";
import type { DatasetWithId, VerifiableCredential } from "@inrupt/solid-client-vc";
import type { UmaConfiguration } from "../type/UmaConfiguration";
import type { FetchOptions } from "../type/FetchOptions";
/**
 * @hidden This is just an internal utility function to parse the ticket value out of the www-authenticate header.
 */
export declare function parseUMAAuthTicket(header: string): string | null;
/**
 * @hidden This is just an internal utility function to parse the as_uri value out of the www-authenticate header.
 */
export declare function parseUMAAuthIri(header: string): UrlString | null;
/**
 * @hidden This is just an internal utility function to get the UMA configuration from .well-known.
 */
export declare function getUmaConfiguration(authIri: string): Promise<UmaConfiguration>;
/**
 * @hidden This is just an internal utility function to exchange a VC and ticket for an auth token.
 */
export declare function exchangeTicketForAccessToken(tokenEndpoint: UrlString, accessGrant: DatasetWithId | VerifiableCredential, authTicket: string, authFetch: typeof fetch): Promise<string | null>;
/**
 * @hidden This is just an internal utility function to bind a fetch function to the UMA auth token.
 */
export declare function boundFetch(accessToken: string): typeof fetch;
/**
 * Builds a WHATWG Fetch compatible function issuing authenticated requests
 * based on an Access Grant VC. The obtained fetch function authentication will
 * only be valid for the resources included in the Access Grant.
 *
 * Note that providing an authenticated `fetch` as an option is mandatory for
 * the resulting fetch to be valid. The input fetch should be authenticated to
 * the requestor's Solid-OIDC provider.
 *
 * @param resourceIri One of the resources from the Access Grant.
 * @param accessGrant The Verifiable Credential proving that the requestor has
 * been granted access to the target resource.
 * @param options Additional fetch options, allowing you to override the
 * `fetch()` implementation
 * @returns A Promise resolving to a WHATWG Fetch compatible function matching
 * the standard signature. The obtained fetch function will override any
 * provided `Authentication` header with authentication information obtained
 * thanks to the provided VC.
 * @since 0.4.0
 */
export declare function fetchWithVc(resourceIri: UrlString, accessGrant: DatasetWithId | VerifiableCredential, options?: FetchOptions): Promise<typeof fetch>;
